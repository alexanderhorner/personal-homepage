{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAsJ,CAAY;AAAlK,GAAG,CAAC,QAAQ,GAAG,IAAI;AAAC,GAAG,CAAC,QAAQ,GAAG,IAAI;AAAC,GAAG,CAAC,UAAU,GAAG,KAAK;AAAC,GAAG,CAAC,YAAY,GAAG,CAAkB;AAAC,MAAM,CAAC,MAAM,CAAC,aAAa,GAAG,CAAkB;SAE5I,kBAAkB,CAAC,GAAG,EAAE,CAAC;IAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,KAAK,gBAAgB,CAAC,GAAG,KAAK,2BAA2B,CAAC,GAAG,KAAK,kBAAkB;AAAI,CAAC;SAEhJ,kBAAkB,GAAG,CAAC;IAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAsI;AAAG,CAAC;SAErL,gBAAgB,CAAC,IAAI,EAAE,CAAC;IAAC,EAAE,EAAE,MAAM,CAAC,MAAM,KAAK,CAAW,cAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,CAAY,gBAAK,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;AAAG,CAAC;SAErJ,kBAAkB,CAAC,GAAG,EAAE,CAAC;IAAC,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,GAAG;AAAG,CAAC;SAElF,0BAA0B,CAAC,CAAC,EAAE,cAAc,EAAE,CAAC;IAAC,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,KAAK,CAAW,cAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAY;IAAG,EAAE,GAAG,EAAE,EAAE,CAAC;QAAC,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,2BAA2B,CAAC,CAAC,MAAM,cAAc,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,KAAK,CAAQ,SAAE,CAAC;YAAC,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE;YAAE,GAAG,CAAC,CAAC,GAAG,CAAC;YAAE,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC;YAAA,CAAC;YAAE,MAAM,CAAC,CAAC;gBAAC,CAAC,EAAE,CAAC;gBAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC;oBAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;wBAAC,IAAI,EAAE,IAAI;oBAAC,CAAC;oBAAE,MAAM,CAAC,CAAC;wBAAC,IAAI,EAAE,KAAK;wBAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBAAI,CAAC;gBAAE,CAAC;gBAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;oBAAC,KAAK,CAAC,EAAE;gBAAE,CAAC;gBAAE,CAAC,EAAE,CAAC;YAAC,CAAC;QAAE,CAAC;QAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAuI;IAAG,CAAC;IAAC,GAAG,CAAC,gBAAgB,GAAG,IAAI,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG;IAAE,MAAM,CAAC,CAAC;QAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC;YAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QAAG,CAAC;QAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC;YAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI;YAAI,gBAAgB,GAAG,IAAI,CAAC,IAAI;YAAE,MAAM,CAAC,IAAI;QAAE,CAAC;QAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YAAC,MAAM,GAAG,IAAI;YAAE,GAAG,GAAG,GAAG;QAAE,CAAC;QAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC;YAAC,GAAG,CAAC,CAAC;gBAAC,EAAE,GAAG,gBAAgB,IAAI,EAAE,CAAC,MAAM,IAAI,IAAI,EAAE,EAAE,CAAC,MAAM;YAAI,CAAC,QAAS,CAAC;gBAAC,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG;YAAE,CAAC;QAAC,CAAC;IAAC,CAAC;AAAE,CAAC;SAE79B,2BAA2B,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC;IAAC,EAAE,GAAG,CAAC,EAAE,MAAM;IAAE,EAAE,EAAE,MAAM,CAAC,CAAC,KAAK,CAAQ,SAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC,EAAE,MAAM;IAAG,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE;IAAG,EAAE,EAAE,CAAC,KAAK,CAAQ,WAAI,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI;IAAE,EAAE,EAAE,CAAC,KAAK,CAAK,QAAI,CAAC,KAAK,CAAK,MAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAAG,EAAE,EAAE,CAAC,KAAK,CAAW,yDAA+C,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,EAAE,MAAM;AAAG,CAAC;SAEvZ,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;IAAC,EAAE,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM;IAAE,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAM,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;IAAK,MAAM,CAAC,IAAI;AAAE,CAAC;AAEvL,EAAyD,AAAzD,qDAAyD,AAAzD,EAAyD,CAEzD,EAgCE,AAhCF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCE,AAhCF,EAgCE,CACF,GAAG,CAAC,UAAU,GAAG,CAA4B;AAC7C,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM;SAE3B,MAAM,CAAC,UAAU,EAAE,CAAC;IAC3B,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU;IAC/B,IAAI,CAAC,GAAG,GAAG,CAAC;QACV,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO;QAC3B,gBAAgB,EAAE,CAAC,CAAC;QACpB,iBAAiB,EAAE,CAAC,CAAC;QACrB,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;YAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,GAAI,CAAC;YAAA,CAAC;QACjD,CAAC;QACD,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;YAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE;QAChC,CAAC;IACH,CAAC;IACD,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,SAAS;AACnC,CAAC;AAED,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM;AAC7B,GAAG,CAAC,aAAa,EAEf,cAAc,EAEd,cAAc;SAIP,WAAW,GAAG,CAAC;IACtB,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAM,WAAM,CAAC,GAAG,QAAQ,CAAC,QAAQ,GAAG,CAAW;AAC/F,CAAC;SAEQ,OAAO,GAAG,CAAC;IAClB,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI;AAClC,CAAC,AAAC,CAAwC,AAAxC,EAAwC,AAAxC,sCAAwC;AAG1C,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM;AAEjC,EAAE,IAAI,MAAM,KAAK,MAAM,CAAC,eAAe,KAAK,MAAM,CAAC,SAAS,KAAK,CAAW,YAAE,CAAC;IAC7E,GAAG,CAAC,QAAQ,GAAG,WAAW;IAC1B,GAAG,CAAC,IAAI,GAAG,OAAO;IAClB,GAAG,CAAC,QAAQ,GAAG,UAAU,IAAI,QAAQ,CAAC,QAAQ,IAAI,CAAQ,0CAAmC,IAAI,CAAC,QAAQ,IAAI,CAAK,OAAG,CAAI;IAC1H,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAK,OAAG,QAAQ,IAAI,IAAI,GAAG,CAAG,KAAG,IAAI,GAAG,CAAE,KAAI,CAAG,IAAG,CAAa,AAAb,EAAa,AAAb,WAAa;IAEnG,EAAE,CAAC,SAAS,GAAG,QAAQ,CAAE,KAAK,EAE5B,CAAC;QACD,aAAa,GAAG,CAAC;QAAA,CAAC;QAGlB,cAAc,GAAG,CAAC;QAAA,CAAC;QAGnB,cAAc,GAAG,CAAC,CAAC;QACnB,GAAG,CAAC,IAAI,GAEN,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI;QAEvB,EAAE,EAAE,IAAI,CAAC,IAAI,KAAK,CAAQ,SAAE,CAAC;YAC3B,EAAuC,AAAvC,qCAAuC;YACvC,EAAE,EAAE,MAAM,CAAC,QAAQ,KAAK,CAAW,YACjC,kBAAkB;YAGpB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAE,KAAK,EAAE,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC,OAAO,KAAK,YAAY;YACvC,CAAC,EAAG,CAAoB,AAApB,EAAoB,AAApB,kBAAoB;YAExB,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAE,KAAK,EAAE,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAK,QAAI,KAAK,CAAC,IAAI,KAAK,CAAI,OAAI,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,YAAY;YACvH,CAAC;YAED,EAAE,EAAE,OAAO,EAAE,CAAC;gBACZ,OAAO,CAAC,KAAK;gBACb,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAE,KAAK,EAAE,CAAC;oBAC/B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK;gBACpC,CAAC;gBAED,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAI,CAAC;oBAC/C,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC,CAAC,EAAE,CAAC;oBAE5B,EAAE,GAAG,cAAc,CAAC,EAAE,GACpB,YAAY,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE;gBAEzC,CAAC;YACH,CAAC,MACC,MAAM,CAAC,QAAQ,CAAC,MAAM;QAE1B,CAAC;QAED,EAAE,EAAE,IAAI,CAAC,IAAI,KAAK,CAAO,QAAE,CAAC;YAC1B,EAA+B,AAA/B,6BAA+B;YAC/B,GAAG,CAAC,SAAS,GAAG,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,GAC5D,KAAK;YAET,GAAG,CAAC,CAAC;gBACH,GAAG,CAAE,SAAS,CAAC,CAAC,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,IAAI,IAAI,EAAG,CAAC;oBACnD,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC,KAAK;oBAChC,GAAG,CAAC,KAAK,GAAG,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC,KAAK;oBACtF,OAAO,CAAC,KAAK,CAAC,CAAc,mBAAM,cAAc,CAAC,OAAO,GAAG,CAAI,MAAG,KAAK,GAAG,CAAM,QAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAI;gBAChH,CAAF;YACH,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;gBACb,SAAS,CAAC,CAAC,CAAC,GAAG;YACjB,CAAC,QAAS,CAAC;gBACT,SAAS,CAAC,CAAC;YACb,CAAC;YAED,EAAE,EAAE,MAAM,CAAC,QAAQ,KAAK,CAAW,YAAE,CAAC;gBACpC,EAAgC,AAAhC,8BAAgC;gBAChC,kBAAkB;gBAClB,GAAG,CAAC,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAG,CAAa,AAAb,EAAa,AAAb,WAAa;gBAEtE,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO;YACnC,CAAC;QACH,CAAC;IACH,CAAC;IAED,EAAE,CAAC,OAAO,GAAG,QAAQ,CAAE,CAAC,EAAE,CAAC;QACzB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO;IACzB,CAAC;IAED,EAAE,CAAC,OAAO,GAAG,QAAQ,GAAI,CAAC;QACxB,OAAO,CAAC,IAAI,CAAC,CAAkD;IAC9D,CAAF;AACH,CAAC;SAEQ,kBAAkB,GAAG,CAAC;IAC7B,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU;IAEhD,EAAE,EAAE,OAAO,EAAE,CAAC;QACZ,OAAO,CAAC,MAAM;QACd,OAAO,CAAC,GAAG,CAAC,CAA2B;IACvC,CAAD;AACH,CAAC;SAEQ,kBAAkB,CAAC,WAAW,EAAE,CAAC;IACxC,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAK;IAC1C,OAAO,CAAC,EAAE,GAAG,UAAU;IACvB,GAAG,CAAC,SAAS,GAAG,CAAwN;IAExO,GAAG,CAAC,UAAU,GAAG,0BAA0B,CAAC,WAAW,GACnD,MAAM;IAEV,GAAG,CAAC,CAAC;QACH,GAAG,CAAE,UAAU,CAAC,CAAC,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC,IAAI,IAAI,EAAG,CAAC;YACtD,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK;YAC7B,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,KAAK;YAC1E,SAAS,IAAI,CAAuH,uHAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAiC,kCAAE,MAAM,CAAC,KAAK,EAAE,CAAmC,oCAAE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAE,IAAI,EAAE,CAAC;gBACjS,MAAM,CAAC,CAAS,cAAG,IAAI,GAAG,CAAQ;YACpC,CAAC,EAAE,IAAI,CAAC,CAAE,IAAG,CAA4B,6BAAE,MAAM,CAAC,UAAU,CAAC,aAAa,GAAG,CAAsD,sDAAC,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,CAA2C,8CAAI,CAAE,GAAE,CAAsB;QAChP,CAAC;IACH,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;QACb,UAAU,CAAC,CAAC,CAAC,GAAG;IAClB,CAAC,QAAS,CAAC;QACT,UAAU,CAAC,CAAC;IACd,CAAC;IAED,SAAS,IAAI,CAAQ;IACrB,OAAO,CAAC,SAAS,GAAG,SAAS;IAC7B,MAAM,CAAC,OAAO;AAChB,CAAC;SAEQ,UAAU,CAAC,MAAM,EAAE,EAAE,EAC9B,EAAqC,AAArC,iCAAqC,AAArC,EAAqC,CACrC,CAAC;IACC,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;IAE5B,EAAE,GAAG,OAAO,EACV,MAAM,CAAC,CAAC,CAAC;IAGX,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC;IAChB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG;IAEb,GAAG,CAAE,CAAC,IAAI,OAAO,CACf,GAAG,CAAE,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAG,CAAC;QACxB,GAAG,GAAG,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;QAErB,EAAE,EAAE,GAAG,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,MAAM,EAAE,EAChE,OAAO,CAAC,IAAI,CAAC,CAAC;YAAA,MAAM;YAAE,CAAC;QAAA,CAAC;IAE5B,CAAC;IAGH,EAAE,EAAE,MAAM,CAAC,MAAM,EACf,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE;IAGvD,MAAM,CAAC,OAAO;AAChB,CAAC;SAEQ,UAAU,CAAC,IAAI,EAAE,CAAC;IACzB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS;IAE5B,OAAO,CAAC,MAAM,GAAG,QAAQ,GAAI,CAAC;QAC5B,EAAE,EAAE,IAAI,CAAC,UAAU,KAAK,IAAI,EAC1B,EAAa,AAAb,WAAa;QACb,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI;IAEpC,CAAC;IAED,OAAO,CAAC,YAAY,CAAC,CAAM,OAC3B,IAAI,CAAC,YAAY,CAAC,CAAM,OAAE,KAAK,CAAC,CAAG,IAAE,CAAC,IAAI,CAAG,KAAG,IAAI,CAAC,GAAG,IAAK,CAAa,AAAb,EAAa,AAAb,WAAa;IAE1E,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW;AACxD,CAAC;AAED,GAAG,CAAC,UAAU,GAAG,IAAI;SAEZ,SAAS,GAAG,CAAC;IACpB,EAAE,EAAE,UAAU,EACZ,MAAM;IAGR,UAAU,GAAG,UAAU,CAAC,QAAQ,GAAI,CAAC;QACnC,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAwB;QAE9D,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAI,CAAC;YACtC,EAAgC,AAAhC,8BAAgC;YAChC,GAAG,CAAC,IAAI,GAEN,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAM;YAC9B,GAAG,CAAC,QAAQ,GAAG,WAAW;YAC1B,GAAG,CAAC,mBAAmB,GAAG,QAAQ,KAAK,CAAW,aAAG,GAAG,CAAC,MAAM,CAAC,CAAgD,kDAAG,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAG,KAAG,OAAO;YAChL,GAAG,CAAC,QAAQ,mBAAmB,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,MAAM,CAAC,KAAK,mBAAmB;YAE/G,EAAE,GAAG,QAAQ,EACX,UAAU,CAAC,KAAK,CAAC,CAAC;QAEtB,CAAC;QAED,UAAU,GAAG,IAAI;IACnB,CAAC,EAAE,EAAE;AACP,CAAC;SAEQ,QAAQ,CAAC,MAAM,EAEtB,KAAK,EAEL,CAAC;IACD,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;IAE5B,EAAE,GAAG,OAAO,EACV,MAAM;IAGR,EAAE,EAAE,KAAK,CAAC,IAAI,KAAK,CAAK,MACtB,SAAS;SACJ,EAAE,EAAE,KAAK,CAAC,IAAI,KAAK,CAAI,KAAE,CAAC;QAC/B,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa;QAElD,EAAE,EAAE,IAAI,EAAE,CAAC;YACT,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC;gBACtB,EAAiE,AAAjE,+DAAiE;gBACjE,EAAoH,AAApH,kHAAoH;gBACpH,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;gBAEjC,GAAG,CAAE,GAAG,CAAC,GAAG,IAAI,OAAO,CACrB,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,GAAG,CAAC;oBAC7C,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG;oBACpB,GAAG,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;oBAE/C,EAAE,EAAE,OAAO,CAAC,MAAM,KAAK,CAAC,EACtB,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;gBAEpC,CAAC;YAEL,CAAC;YAED,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAS,UAAE,CAAQ,SAAE,CAAS,UAAE,KAAK,CAAC,MAAM;YAClE,OAAO,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;gBAAA,EAAE;gBAAE,IAAI;YAAA,CAAC;QAChC,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,MAAM,EACtB,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK;IAEjC,CAAC;AACH,CAAC;SAEQ,SAAS,CAAC,MAAM,EAAE,GAAE,EAAE,CAAC;IAC9B,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;IAE5B,EAAE,GAAG,OAAO,EACV,MAAM;IAGR,EAAE,EAAE,OAAO,CAAC,GAAE,GAAG,CAAC;QAChB,EAA8E,AAA9E,4EAA8E;QAC9E,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC,GAAE,EAAE,CAAC;QACxB,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC;QAEhB,GAAG,CAAE,GAAG,CAAC,GAAG,IAAI,IAAI,CAAE,CAAC;YACrB,GAAG,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG;YAErD,EAAE,EAAE,OAAO,CAAC,MAAM,KAAK,CAAC,EACtB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;QAEzB,CAAC,AAAC,CAAsG,AAAtG,EAAsG,AAAtG,oGAAsG;QAGxG,MAAM,CAAC,OAAO,CAAC,GAAE;QACjB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAE,EAAG,CAA0B,AAA1B,EAA0B,AAA1B,wBAA0B;QAEnD,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAE,EAAE,EAAE,CAAC;YAC7B,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;QAClC,CAAC;IACH,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,MAAM,EACtB,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,GAAE;AAE/B,CAAC;SAEQ,cAAc,CAAC,MAAM,EAE5B,EAAE,EAEF,YAAY,EAEZ,CAAC;IACD,EAAE,EAAE,iBAAiB,CAAC,MAAM,EAAE,EAAE,EAAE,YAAY,GAC5C,MAAM,CAAC,IAAI;IACX,CAAuG,AAAvG,EAAuG,AAAvG,qGAAuG;IAGzG,GAAG,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;IAC/C,GAAG,CAAC,QAAQ,GAAG,KAAK;UAEb,OAAO,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;QAC1B,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK;QACrB,GAAG,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;QAE1C,EAAE,EAAE,CAAC,EACH,EAA+E,AAA/E,6EAA+E;QAC/E,QAAQ,GAAG,IAAI;aACV,CAAC;YACN,EAAyD,AAAzD,uDAAyD;YACzD,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAE1C,EAAE,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnB,EAAkF,AAAlF,gFAAkF;gBAClF,QAAQ,GAAG,KAAK;gBAChB,KAAK;YACP,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ;AACjB,CAAC;SAEQ,iBAAiB,CAAC,MAAM,EAE/B,EAAE,EAEF,YAAY,EAEZ,CAAC;IACD,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;IAE5B,EAAE,GAAG,OAAO,EACV,MAAM;IAGR,EAAE,EAAE,YAAY,KAAK,YAAY,CAAC,MAAM,CAAC,aAAa,GAAG,CAAC;QACxD,EAA2E,AAA3E,yEAA2E;QAC3E,EAAyE,AAAzE,uEAAyE;QACzE,EAAE,GAAG,MAAM,CAAC,MAAM,EAChB,MAAM,CAAC,IAAI;QAGb,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,EAAE,YAAY;IACvD,CAAC;IAED,EAAE,EAAE,aAAa,CAAC,EAAE,GAClB,MAAM,CAAC,IAAI;IAGb,aAAa,CAAC,EAAE,IAAI,IAAI;IACxB,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE;IAC5B,cAAc,CAAC,IAAI,CAAC,CAAC;QAAA,MAAM;QAAE,EAAE;IAAA,CAAC;IAEhC,EAAE,GAAG,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAC7D,MAAM,CAAC,IAAI;AAEf,CAAC;SAEQ,YAAY,CAAC,MAAM,EAE1B,EAAE,EAEF,CAAC;IACD,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE;IAC5B,MAAM,CAAC,OAAO,GAAG,CAAC;IAAA,CAAC;IAEnB,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,GAAG,EACtB,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO;IAGlC,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,EAC7D,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAE,EAAE,EAAE,CAAC;QAClD,EAAE,CAAC,MAAM,CAAC,OAAO;IACnB,CAAC;IAGH,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;IACtB,MAAM,CAAC,EAAE;IACT,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE;IAExB,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAC5D,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAE,EAAE,EAAE,CAAC;QACjD,GAAG,CAAC,kBAAkB,GAAG,EAAE,CAAC,QAAQ,GAAI,CAAC;YACvC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;QAC1C,CAAC;QAED,EAAE,EAAE,kBAAkB,IAAI,cAAc,CAAC,MAAM,EAC7C,EAA+B,AAA/B,6BAA+B;QAC/B,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,kBAAkB;IAEhE,CAAC;IAGH,cAAc,CAAC,EAAE,IAAI,IAAI;AAC3B,CAAC;;;;;oDEhdYA,EAAAA;;+CAAAA,EAAAA;;0DAAAA,EAAAA;;sDAAAA,EAAAA;;wDAAAA,CAAAA;;yCAAAA,EAAAA;;mDAAAA,CAAAA;;wDAAAA,EAAAA;;2CAAAA,EAAAA;;oDAAAA,EAAAA;;6CAAAA,EAAAA;;iDAAAA,EAAAA;;wDAAAA,EAAAA;;+DAAAA,EAAAA;;kDAAAA,EAAAA;;oEAAAA,EAAAA;;oDAAAA,EAAAA;;uDAAAA,EAAAA;;2DAAAA,EAAAA;;oDAAAA,EAAAA;;uDAAAA,EAAAA;;qDAAAA,EAAAA;;uDAAAA,CAAAA;;sDAAAA,EAAAA;;wDAAAA,CAAAA;;2DAAAA,EAAAA;;4CAAAA,EAAAA;;2CAAAA,EAAAA;;8CAAAA,EAAAA;;mDAAAA,EAAAA;;sDAAAA,EAAAA;;iDAAAA,CAAAA;;+CAAAA,EAAAA;;kDAAAA,EAAAA;;2CAAAA,EAAAA;;6CAAAA,EAAAA;;4CAAAA,EAAAA;;yCAAAA,EAAAA;;AAAAA,GAAAA;AAAAA,GAAAA;AAAAA,KAAAA,CAAAA,CAAAA,GAAqB,CAAA;MAOrBC,CAAAA;IAMFE,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GCtBgC,CAAA,0BDuBrCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,gBACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAaC,IAAAA;QAAAA,CAAAA;IAAAA,CAGxBC;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CAAEI;YAAAA,UAAAA,EAAY,CAAA;YAAA,CAAA;QAAA,CAAA;IAAA,CAI/DC;IAAAA,YAAAA,CAAaC,CAAAA,EAAAA,CACnB;QAAA,MAAA,CAAA,IAAA,CAAYC,SAAAA,CAAU,CAAA,aAAcD,CAAAA;IAAAA,CAO9BE;IAAAA,YAAAA,CAAaF,CAAAA,EAAkBG,CAAAA,EAAAA,CACrC;QAAA,MAAA,CAAA,IAAA,CAAYC,SAAAA,CAAU,CAAA,aAAcJ,CAAAA,EAAUG,CAAAA,EAAU,CAAEE;YAAAA,KAAAA,EAjC1B,CAAA;QAAA,CAAA;IAAA,CAwC1BC;IAAAA,cAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYC,gBAAAA,CAAiB,CAAA;IAAA,CAOvBC;IAAAA,aAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYC,cAAAA,CAAe,CAAA;IAAA,CAAA;;AA1ChBxB,CAAAA,CACEyB,cAAAA,GChBwB,CAAA;ACIvC,KAAA,CAAMC,CAAAA,GDJiC,CAAA;MC+E1BC,CAAAA;mBAA0BC,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACtBxB,aAAAA,GAAgBsB,CAAAA,EAAAA,IAAAA,CAEhBG,YAAAA,GAAe,CAACtB;+BAAaC,IAAAA;QAAAA,CAAAA,EAAAA,IAAAA,CAE7BsB,aAAAA,GAAgB,CAACvB;+BAAawB,QAAAA;QAAAA,CAAAA;IAAAA,CAIvCC;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWhC,CAAAA,CAAcG,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIjCC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CAiBX;QAAA,MAAA,EAhBgBA,CAAAA,CAAQC,OAAAA,CAECC,IAAAA,CAAKC,KAAAA,IAAS,CAAA,CAAA,EAC9BC,OAAAA,EAASC,CAAAA,EAASC,CAAAA,GAAAA,CAC1B;YAAA,EAAA,GAAKD,CAAAA,CAAQE,UAAAA,KAAeF,CAAAA,CAAQE,UAAAA,CAAWjB,CAAAA,GAAO,MAAA;YAEtD,KAAA,CAAMkB,CAAAA,GAAmBH,CAAAA,CAAQE,UAAAA,CAAWjB,CAAAA,GACtCmB,CAAAA,GAAgB1C,IAAAA,CAAK6B,mBAAAA;YAE3B,GAAA,CAAK,KAAA,CAAMjB,EAAAA,IAAY6B,CAAAA,CAAiB/B,UAAAA,CACvCgC,CAAAA,CAAc5B,YAAAA,CAAaF,EAAAA,EAAUqB,CAAAA,CAAQU,SAAAA,CAAUF,CAAAA,CAAiB/B,UAAAA,CAAWE,EAAAA;YAGpFqB,CAAAA,CAAQG,KAAAA,CAAMG,CAAAA,EAAWK,YAAAA,CAAarB,CAAAA,EAAMmB,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAOvCG;IAAAA,QAAAA,CAASZ,CAAAA,EAAAA,CAGfA;QAAAA,CAAAA,CAAQa,4BAAAA,CAA6BC,GAAAA,CF7GL,CAAA;QE8GhC,GAAA,EAAK,KAAA,CAAMC,CAAAA,IAAAA,IAAAA,CAAaC,UAAAA,CACvB,GAAA,EAAK,KAAA,CAAMC,CAAAA,IAAcF,CAAAA,CAAuB9B,cAAAA,GAC/Ce,CAAAA,CAAQkB,uBAAAA,CAAwBD,CAAAA,EFhHF,CAAA;QEmHhC,MAAA,CAAA,IAAA;IAAA,CAIME;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,EAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAuBxB,MAAA,CArBAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAC,SAAAA,GACAjB,OAAAA,EAASkB,EAAAA,GAAAA,CACT;YAAA,KAAA,CAAMb,CAAAA,GAAgBa,EAAAA,CAAKC,YAAAA,CAA4BjC,CAAAA;YACvD,EAAA,EAAImB,CAAAA,EAAe,CAClB;gBAAA,KAAA,CAAMH,CAAAA,GAAYN,CAAAA,CAAQwB,YAAAA,CAAaC,GAAAA,CAAIH,EAAAA,GACrCjB,CAAAA,GAAUJ,EAAAA,CAAQC,IAAAA,CAAKC,KAAAA,CAAOG,CAAAA,GAE9BE,CAAAA,GAAmB,CAAE/B;oBAAAA,UAAAA,EAAY,CAAA;oBAAA,CAAA;gBAAA,CAAA;gBAEvCgC,CAAAA,CAActB,aAAAA,GAAgBiB,OAAAA,EAASzB,CAAAA,GAAAA,CACtC;oBAAA,KAAA,CAAMsC,CAAAA,GAAYR,CAAAA,CAAc/B,YAAAA,CAAaC,CAAAA;oBAC7C6B,CAAAA,CAAiB/B,UAAAA,CAAWE,CAAAA,IAAYqB,CAAAA,CAAQ0B,gBAAAA,CAAiBD,GAAAA,CAAIR,CAAAA;gBAAAA,CAAAA,GAGtEZ,CAAAA,CAAQE,UAAAA,GAAaF,CAAAA,CAAQE,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAC3CF,CAAAA,CAAQE,UAAAA,CAAWjB,CAAAA,IAAQkB,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;SAAAA,CAAAA,GAAAA,CAAAA;IAAAA,MAAAA,EAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA;QAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA;YAAAA,GAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA;YAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;QAAAA,CAAAA;QAAAA,MAAAA,CAAAA,CAAAA;IAAAA,CAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;AAAAA,CAAAA;AAAAA,GAAAA,CCjJpBmB,CAAAA,EASAC,CAAAA,EAMAC,CAAAA;AD8DCtC,CAAAA,CAMWF,cAAAA,GAAiBC,CAAAA,GCnFzC,QAAA,CAAYqC,CAAAA,EAAAA,CACXA;IAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,WACAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA;AAAAA,CAFD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KASZ,QAAA,CAAYC,CAAAA,EAAAA,CACXA;IAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,aACAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,YACAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA;AAAAA,CAHD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAMZ,QAAA,CAAYC,CAAAA,EAAAA,CACXA;IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,OACAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,aACAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,aACAA,CAAAA,CAAAA,WAAAA,GAAAA,CAAAA;AAAAA,CAJD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA;ACAZ,KACmCQ,CADnC,CAAMP,CAAAA,IAAAA,EAAEA,CAAAA,GAAFC,KAAAA,EAAQA,CAAAA,GAARC,KAAAA,EAAeA,CAAAA,EAAAA,CAAAA,kBAAmBE,aAAAA,EAAAA,CAClCC,CAAAA,SAAAA,EAAEA,CAAAA,GAAFC,WAAAA,EAAaA,CAAAA,EAAAA,CAAAA;SAGHE,CAAAA,CACfxD,EAAAA,EACAyD,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EAAAA,CAEA;IAAA,KAQA,CARA,CAAMC,CAAAA,MAAAA,EAAEA,EAAAA,GAAFC,IAAAA,EAAUA,CAAAA,EAAAA,CAAAA,GAASF,EAAAA,EACnBG,CAAAA,GAA2B,CAChCC;QAAAA,KAAAA,EAAO/D,EAAAA,CAASgE,QAAAA;QAChBC,UAAAA,EAAYjE,EAAAA,CAASkE,cAAAA,KAAmBlE,EAAAA,CAASmE,gBAAAA;QACjDC,aAAAA,EAAepE,EAAAA,CAASqE,gBAAAA;QACxBC,UAAAA,EAAYtE,EAAAA,CAASuE,aAAAA;IAAAA,CAAAA;IAGtB,EAAA,EAAIb,EAAAA,KAASZ,CAAAA,CAAY0B,UAAAA,EAAY,MAAA,CAAOV,CAAAA;IAE5C,EAAA,EAAIF,EAAAA,KAAWb,CAAAA,CAAc0B,IAAAA,EAAM,CAClC;QAAA,GAAA,CAAIV,EAAAA,GAAQ/D,EAAAA,CAASuE,aAAAA,KA+CvB,QAAA,CAA0BpC,CAAAA,EAAAA,CACzB;YAAA,KAAA,CAAMiC,CAAAA,GAAgBjC,CAAAA,CAAUkC,gBAAAA,IAC1BK,CAAAA,GAAWvC,CAAAA,CAAU6B,QAAAA,IACrBW,CAAAA,GAAW,GAAA,CAAIC,YAAAA,CAAaF,CAAAA,CAASG,MAAAA;YAC3C,GAAA,CAAK,GAAA,CAAIC,EAAAA,GAAI,CAAA,EAAGA,EAAAA,GAAIJ,CAAAA,CAASG,MAAAA,EAAQC,EAAAA,GACpCH,CAAAA,CAASG,EAAAA,IAAKxB,CAAAA,CAAYoB,CAAAA,CAASI,EAAAA,GAAIV,CAAAA;YAExC,MAAA,CAAOO,CAAAA;QAAAA,CAtDiCI,CAAiB/E,EAAAA,IAAY,GAAA,CAAI4E,YAAAA,CAAad,CAAAA,CAAOC,KAAAA;QAE5F,MAAA,CAAQH,EAAAA;YACP,IAAA,CAAKb,CAAAA,CAAciC,WAAAA;gBAClBlB,CAAAA,CAAOG,UAAAA,GAAyC,CAAA,GAA5BjE,EAAAA,CAASkE,cAAAA,IAC7BJ,CAAAA,CAAOM,aAAAA,GAAgBlB,CAAAA,EACvBY,CAAAA,CAAOQ,UAAAA,IAAa,CAAA,EACpBR,CAAAA,CAAOC,KAAAA,GAAQN,EAAAA,CAAQwB,eAAAA,CAAgBlB,EAAAA,EAAO/D,EAAAA,CAASkF,QAAAA,IAAYpB,CAAAA,CAAOG,UAAAA,EAAYJ,CAAAA;gBACtF,KAAA;YAED,IAAA,CAAKd,CAAAA,CAAcoC,UAAAA;gBAClBrB,CAAAA,CAAOG,UAAAA,GAAaJ,CAAAA,GAAO,CAAA,GAAI,CAAA,GAAI,CAAA,EACnCC,CAAAA,CAAOM,aAAAA,GAAgBP,CAAAA,GAAO,CAAA,GAAIZ,CAAAA,GAAQD,CAAAA,EAC1Cc,CAAAA,CAAOQ,UAAAA,IAAa,CAAA,EACpBP,EAAAA,GAAsC,CAAA,KAA9B/D,EAAAA,CAASkE,cAAAA,MA6DrB,QAAA,CAAoBQ,CAAAA,EAAAA,CACnB;oBAAA,KAAA,CAAMC,CAAAA,GAAW,GAAA,CAAIC,YAAAA,CAAgC,CAAA,GAAlBF,CAAAA,CAASG,MAAAA,GAAc,CAAA;oBAC1D,GAAA,CAAK,GAAA,CAAIC,CAAAA,GAAI,CAAA,EAAGM,CAAAA,GAAKV,CAAAA,CAASG,MAAAA,GAAS,CAAA,EAAGC,CAAAA,GAAIM,CAAAA,EAAIN,CAAAA,GACjDH,CAAAA,CAAa,CAAA,GAAJG,CAAAA,IAASJ,CAAAA,CAAa,CAAA,GAAJI,CAAAA,GAC3BH,CAAAA,CAAa,CAAA,GAAJG,CAAAA,GAAQ,CAAA,IAAKJ,CAAAA,CAAa,CAAA,GAAJI,CAAAA,GAAQ,CAAA,GACvCH,CAAAA,CAAa,CAAA,GAAJG,CAAAA,GAAQ,CAAA,IAAKJ,CAAAA,CAAa,CAAA,GAAJI,CAAAA,GAAQ,CAAA;oBAExC,MAAA,CAAOH,CAAAA;gBAAAA,CApEsCU,EAAWtB,EAAAA,IAASA,EAAAA,EAC9DD,CAAAA,CAAOC,KAAAA,GAAQN,EAAAA,CAAQ6B,eAAAA,CAAgBvB,EAAAA,EAAO/D,EAAAA,CAASkF,QAAAA,IAAYpB,CAAAA,CAAOG,UAAAA,EAAYJ,CAAAA;gBACtF,KAAA;YAED,IAAA,CAAKd,CAAAA,CAAcwC,UAAAA;gBAClBzB,CAAAA,CAAOG,UAAAA,GAAa,CAAA,EACpBH,CAAAA,CAAOM,aAAAA,GAAgBnB,CAAAA,EACvBa,CAAAA,CAAOQ,UAAAA,IAAa,CAAA,EACpBR,CAAAA,CAAOC,KAAAA,GAAQN,EAAAA,CAAQ+B,gBAAAA,CAAiBzB,EAAAA,EAAO/D,EAAAA,CAASkF,QAAAA,IAAYpB,CAAAA,CAAOG,UAAAA,EAAYJ,CAAAA;gBACvF,KAAA;;gBAGA,KAAA,CAAA,GAAA,CAAU4B,KAAAA,CAAM,CAAA;;QAGlB3B,CAAAA,CAAO4B,GAAAA,GAAM1F,EAAAA,CAAS2F,MAAAA,CAAO,CAAA,CAAA,GAC7B7B,CAAAA,CAAO8B,GAAAA,GAAM5F,EAAAA,CAAS6F,MAAAA,CAAO,CAAA,CAAA,GACzB7F,EAAAA,CAASuE,aAAAA,OACZT,CAAAA,CAAO4B,GAAAA,GAAM5B,CAAAA,CAAO4B,GAAAA,CAAII,GAAAA,EAAKC,CAAAA,GAAMzC,CAAAA,CAAYyC,CAAAA,EAAG/F,EAAAA,CAASqE,gBAAAA;WAC3DP,CAAAA,CAAO8B,GAAAA,GAAM9B,CAAAA,CAAO8B,GAAAA,CAAIE,GAAAA,EAAKC,CAAAA,GAAMzC,CAAAA,CAAYyC,CAAAA,EAAG/F,EAAAA,CAASqE,gBAAAA;YAExDP,CAAAA,CAAOQ,UAAAA,KACVR,CAAAA,CAAO4B,GAAAA,GAAM5B,CAAAA,CAAO4B,GAAAA,CAAII,GAAAA,EAAKC,CAAAA,GAAM1C,CAAAA,CAAU0C,CAAAA,EAAGjC,CAAAA,CAAOM,aAAAA;WACvDN,CAAAA,CAAO8B,GAAAA,GAAM9B,CAAAA,CAAO8B,GAAAA,CAAIE,GAAAA,EAAKC,CAAAA,GAAM1C,CAAAA,CAAU0C,CAAAA,EAAGjC,CAAAA,CAAOM,aAAAA;;IAAAA,CAAAA,MAE9CN,CAAAA,CAAOG,UAAAA,GAAa,CAAA,KAC9BH,CAAAA,CAAOC,KAAAA,IAAAA,QAAAA,CAkB8CW,CAAAA,EAAasB,CAAAA,EAAAA,CACnE;QAAA,KAAA,CACMC,CAAAA,qBADyBE,SAAAA,CAAUzB,CAAAA,CAAS0B,iBAAAA,GAAoBJ,CAAAA,IACnCtB,CAAAA,CAAS0B,iBAAAA,EAGtCzB,CAAAA,GAAW,GAAA,CAAKD,CAAAA,CAAS2B,WAAAA,CAFV3B,CAAAA,CAASG,MAAAA,GAASmB,CAAAA,GAE6CC,CAAAA;QAEpF,GAAA,CAAK,GAAA,CAAInB,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAIkB,CAAAA,GAActB,CAAAA,CAASG,MAAAA,EAAQC,CAAAA,GAClD,GAAA,CAAK,GAAA,CAAIwB,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAIN,CAAAA,EAAaM,CAAAA,GAChC3B,CAAAA,CAASG,CAAAA,GAAImB,CAAAA,GAAgBK,CAAAA,IAAK5B,CAAAA,CAASI,CAAAA,GAAIkB,CAAAA,GAAcM,CAAAA;QAI/D,MAAA,CAAO3B,CAAAA;IAAAA,CA/BS4B,EAAiBzC,CAAAA,CAAOC,KAAAA,EAAO/D,EAAAA,CAASkE,cAAAA,KACvDJ,CAAAA,CAAOG,UAAAA,GAAaH,CAAAA,CAAOC,KAAAA,CAAMyC,UAAAA,GAAaxG,EAAAA,CAASkF,QAAAA;IAGxD,MAAA,CAAOpB,CAAAA;AAAAA,CAAAA;SAyCQ2C,CAAAA,CAAezG,EAAAA,EAAoBE,CAAAA,EAAAA,CAClD;IAAA,MAAA,CAAIA,CAAAA,yBAAwByG,eAAAA,CAAgBC,oBAAAA,GACvB5G,EAAAA,CAAS6G,WAAAA,GAAcC,IAAAA,EAAMC,CAAAA,GACzCA,CAAAA,+BAA+BA,CAAAA,CAAOE,OAAAA,uBAAwBC,IAAAA,CAAKC,SAAAA;QAEtDrE,CAAAA,CAAYqE,SAAAA,GAAYrE,CAAAA,CAAYsE,OAAAA,GAGnDtE,CAAAA,CAAY0B,UAAAA;AAAAA,CAAAA;SAGJ6C,CAAAA,CAAiBrH,EAAAA,EAAoBsH,CAAAA,EAAAA,CACpD;IAAA,KAAA,CAAMC,CAAAA,GAAOD,CAAAA,CACXtG,QAAAA,GACAwG,eAAAA,CAAgBxH,EAAAA,EAChB4D,MAAAA,EAAQ6D,CAAAA,KAAWA,CAAAA,CAAKC,SAAAA;;IAE1B,GAAA,EAAK,KAAA,CAAME,EAAAA,IAAOL,CAAAA,CAAM,CACvB;QAAA,KAAA,CAAMM,CAAAA,GAAUD,EAAAA,CAAIE,OAAAA,IACdC,CAAAA,GAAUH,EAAAA,CAAII,aAAAA,GAAgBC,GAAAA,IAAO,CAAA;QAG3C,EAAA,EAAgB,CAAA,aAAZJ,CAAAA,EAAuB,MAAO,CAAA,CAAEjE;YAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;QAAAA,CAAAA;QAU1D,EAAA,EAAgB,CAAA,gBAAZoD,CAAAA,EAA0B,CAC7B;YAAA,EAAA,EAAe,CAAA,cAAXE,CAAAA,EAAuB,MAAO,CAAA,CAAEnE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;YAAAA,CAAAA;YAC1D,EAAA,EAAe,CAAA,gBAAXsD,CAAAA,EAAyB,MAAO,CAAA,CAAEnE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;YAAAA,CAAAA;YAC5D,EAAA,EAAe,CAAA,YAAXsD,CAAAA,EAAqB,MAAO,CAAA,CAAEnE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAcoC,UAAAA;gBAAYtB,IAAAA,EAAM,CAAA;YAAA,CAAA;YAC1E,EAAA,EAAe,CAAA,aAAXkE,CAAAA,EAAsB,MAAO,CAAA,CAAEnE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAcoC,UAAAA;gBAAYtB,IAAAA,EAAM,CAAA;YAAA,CAAA;YAC3E,EAAA,EAAIkE,CAAAA,CAAOG,UAAAA,CAAW,CAAA,WAAY,MAAO,CAAA,CAAEtE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;YAAAA,CAAAA;YACjE,EAAA,EAAIsD,CAAAA,CAAOG,UAAAA,CAAW,CAAA,YAAa,MAAO,CAAA,CAAEtE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;YAAAA,CAAAA;QAAAA,CAInE;QAAA,EAAA,EAAgB,CAAA,YAAZoD,CAAAA,EAAsB,CACzB;YAAA,KAAA,CAAMM,CAAAA,GAAaC,CAAAA,CAAcpI,EAAAA;YACjC,MAAmB,CAAA,CAAA,cAAfmI,CAAAA,GAAkC,CAAEvE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAcwC,UAAAA;gBAAY1B,IAAAA,EAAM,EAAA;YAAA,CAAA,GAC7D,CAAA,iBAAfsE,CAAAA,IACe,CAAA,WAAfA,CAAAA,GADqC,CAAEvE;gBAAAA,MAAAA,EAAQb,CAAAA,CAAciC,WAAAA;gBAAanB,IAAAA,EAAM,EAAA;YAAA,CAAA,GAE7E,CAAED;gBAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;YAAAA,CAAAA;QAAAA,CAIhC;QAAA,EAAA,EAAgB,CAAA,WAAZoD,CAAAA,EAAqB,MAAO,CAAA,CAAEjE;YAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;QAAAA,CAAAA;QAExD,EAAA,EAAgB,CAAA,yBAAZoD,CAAAA,EAAmC,MAAO,CAAA,CAAEjE;YAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;QAAAA,CAAAA;IAAAA,CAGvE;IAAA,MAAO,CAAA,CAAEb;QAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;IAAAA,CAAAA;AAAAA,CAAAA;SAGhB2D,CAAAA,CAAcpI,CAAAA,EAAAA,CAC7B;IAAA,GAAA,EAAK,KAAA,CAAMqI,CAAAA,IAAWrI,CAAAA,CAAS6G,WAAAA,GAC9B,EAAA,EAAMwB,CAAAA,oCACN,CAAA;QAAA,GAAA,EAAK,KAAA,CAAME,EAAAA,IAAWF,CAAAA,CAAQxB,WAAAA,GAC7B,EAAA,EAAM0B,EAAAA,oCACN,MAAA,CAAOA,EAAAA,CAAQH,aAAAA;IAAAA,CAGjB;IAAA,MAAA,CAAA,IAAA;AAAA,CC7KD;AAAA,KAAA,CAAM5H,CAAAA,GJhBiC,CAAA,0BIsBjCiI,CAAAA,GAAoD,CACzDC;IAAAA,MAAAA,EAAQ7F,CAAAA,CAAc8F,QAAAA;AAAAA,CAAAA;MA2EVC,CAAAA;mBAA2BlI,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACvBxB,aAAAA,GAAgBsB,CAAAA,EAAAA,IAAAA,CAEhBqI,YAAAA,GAAe,CAACxJ;+BAAayJ,MAAAA;+BAAqBC,SAAAA;QAAAA,CAAAA,EAAAA,IAAAA,CAElDnI,aAAAA,GAAgB,CAACvB;+BAAayJ,MAAAA;+BAAqBjI,QAAAA;QAAAA,CAAAA,EAAAA,IAAAA,CAEnDmI,gBAAAA,GAAmB,CAAC;YAAA,CAAA;QAAA,CAAA,EAAA,IAAA,CAEpBC,iBAAAA,GAAoB,CAAC;YAAA,CAAA;QAAA,CAAA,EAAA,IAAA,CAK7BC,QAAAA,GAAyC,IAAA,EAAA,IAAA,CACzCC,yBAAAA,GAA4B,GAAA,CAAIC,GAAAA,EAAAA,IAAAA,CAChCC,QAAAA,GAAyC,IAAA,EAAA,IAAA,CACzCC,eAAAA,GAA4Cb,CAAAA,EAAAA,IAAAA,CAC5Cc,sBAAAA,GAAwC,IAAA,EAAA,IAAA,CACxCC,mBAAAA,GAA4D,CAAA;QAAA,CAAA,EAAA,IAAA,CAC5DC,sBAAAA,GAA0D,CAAA;QAAA,CAAA,EAAA,IAAA,CAC1DC,2BAAAA,GAAmE,CAAA;QAAA,CAAA;IAAA,CAGpEC;IAAAA,OAAAA,CAAQ1B,CAAAA,EAAa2B,CAAAA,EAAAA,CAO3B;QAAA,MANY,CAAA,CAAA,qBAAR3B,CAAAA,KACHhJ,IAAAA,CAAKiK,QAAAA,GAAWU,CAAAA,GAEL,CAAA,qBAAR3B,CAAAA,KACHhJ,IAAAA,CAAKoK,QAAAA,GAAWO,CAAAA,GAAAA,IAAAA;IAAAA,CAgCXC;IAAAA,iBAAAA,CAAkBC,CAAAA,EAAAA,CAExB;QAAA,MAAA,CADA7K,IAAAA,CAAKqK,eAAAA,GAAAA,CAAAA,CAAAA,CAAAA;QAAAA,CAAAA,EAAuBb,CAAAA,EAA4BqB,CAAAA,GAAAA,IAAAA;IAAAA,CASlDC;IAAAA,OAAAA,CAAQ7I,CAAAA,EAAwB/B,CAAAA,EAAAA,CACtC;QAAA,EAAA,GAAKF,IAAAA,CAAKiK,QAAAA,EAAU,CACnB;YAAA,EAAA,GAAKjK,IAAAA,CAAK+K,UAAAA,IAAc,MAAA,CAAA,IAAA;YACxB,KAAA,CAAA,GAAA,CAAUvE,KAAAA,EAAAA,CAAAA,EAAUjF,CAAAA,CAAAA,yDAAAA;QAAAA,CAErB;QAAA,EAAA,GAAKvB,IAAAA,CAAKiK,QAAAA,CAASe,SAAAA,EAAW,CAC7B;YAAA,EAAA,GAAKhL,IAAAA,CAAK+K,UAAAA,IAAc,MAAA,CAAA,IAAA;YACxB,KAAA,CAAA,GAAA,CAAUvE,KAAAA,EAAAA,CAAAA,EAAUjF,CAAAA,CAAAA,wBAAAA;QAAAA,CASrB;QAAA,MAAA,CANIrB,CAAAA,wBAA8B2J,MAAAA,GACjC7J,IAAAA,CAAKiL,eAAAA,CAAgBhJ,CAAAA,IACX/B,CAAAA,wBAA8B4J,SAAAA,IACxC9J,IAAAA,CAAKkL,kBAAAA,CAAmBjJ,CAAAA,GAAAA,IAAAA;IAAAA,CAOlBgJ;IAAAA,eAAAA,CAAgBhJ,CAAAA,EAAAA,CACvB;QAAA,KAAA,CAAMC,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA;SAEPA,CAAAA,CAAQC,IAAAA,CAAKgJ,WAAAA,IAAe,CAAA,CAAA,EACpC9I,OAAAA,EAAS+I,CAAAA,EAASC,CAAAA,GAAAA,CAC1B;YAAA,EAAA,GAAKD,CAAAA,CAAQ5I,UAAAA,KAAe4I,CAAAA,CAAQ5I,UAAAA,CAAWjB,CAAAA,GAAO,MAAA;YAEtD,KAAA,CAAM+J,CAAAA,GAAaF,CAAAA,CAAQ5I,UAAAA,CAAWjB,CAAAA,GAChCgK,CAAAA,GAAaD,CAAAA,CAAWC,UAAAA,IAAc,CAAA,EACtChE,CAAAA,GAAa+D,CAAAA,CAAW/D,UAAAA,IAAc,CAAA,EACtCiE,CAAAA,GAAQF,CAAAA,CAAWE,KAAAA,EACnBC,CAAAA,GAASH,CAAAA,CAAWtG,UAAAA,EACpBH,CAAAA,GAAS,GAAA,CAAI6G,UAAAA,CAAWF,CAAAA,GAAQC,CAAAA,GAEhCE,CAAAA,GAAYzJ,CAAAA,CAAQC,IAAAA,CAAKyJ,OAAAA,CAASR,CAAAA,CAAQS,MAAAA,GAG1CC,CAAAA,qBAAqBC,MAAAA,CADVJ,CAAAA,CAAUK,GAAAA,GAAM9J,CAAAA,CAAQ+J,SAAAA,CAAUN,CAAAA,CAAUK,GAAAA,IAAO9J,CAAAA,CAAQ+J,SAAAA,oBAChCV,CAAAA,EAAYhE,CAAAA;YAExDvH,IAAAA,CAAKiK,QAAAA,CAAUkC,gBAAAA,CAAiBtH,CAAAA,EAAQ2G,CAAAA,EAAOC,CAAAA,EAAQK,CAAAA,EAAQR,CAAAA,CAAW7G,IAAAA,EAAM6G,CAAAA,CAAW3G,MAAAA,GAE3F1C,CAAAA,CAAQkJ,WAAAA,CAAYE,CAAAA,IAASxG,CAAAA;QAAAA,CAAAA;IAAAA,CAWvBqG;IAAAA,kBAAAA,CAAmBjJ,CAAAA,EAAAA,CAC1B;QAAA,KAAA,CAAMC,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA;SACPA,CAAAA,CAAQC,IAAAA,CAAKgJ,WAAAA,IAAe,CAAA,CAAA,EAGpC9I,OAAAA,EAAS+I,CAAAA,GAAAA,CAAAA;YAAAA,GAAAA,CCvNaO,CAAAA;YDwNzBP,CAAAA,CAAQ5I,UAAAA,IAAe4I,CAAAA,CAAQ5I,UAAAA,CAAWjB,CAAAA,MCxNjBoK,CAAAA,GD8NJzJ,CAAAA,CAAQC,IAAAA,CAAKyJ,OAAAA,CAASR,CAAAA,CAAQS,MAAAA,GC7N3CrJ,UAAAA,IAAemJ,CAAAA,CAAUnJ,UAAAA,CAAV,uBAAA,IACVmJ,CAAAA,CAAUnJ,UAAAA,CAAV,uBAAA,CACC4J,QAAAA,ID6NlBpM,IAAAA,CAAKkK,yBAAAA,CAA0BmC,GAAAA,CAHTpK,CAAAA,CAAQ2J,OAAAA,CAAQR,CAAAA,CAAQS,MAAAA,GADhC5J,CAAAA,CAAQ2J,OAAAA,CAFJR,CAAAA,CAAQ5I,UAAAA,CAAWjB,CAAAA,EAEIsK,MAAAA;QAAAA,CAAAA;IAAAA,CAUrC7J;IAAAA,IAAAA,CAAKsK,CAAAA,EAAAA,CACX;QAAA,EAAA,GAAKtM,IAAAA,CAAK+K,UAAAA,IAAc,MAAA,CAAA,IAAA;QAGxB,GAAA,EAAK,KAAuBc,EAAhBU,EAAAA,EAAgBV,CAAAA,KAAAA,IAAAA,CAAgB3B,yBAAAA,CAA2B,CACtE;YAAA,GAAA,EAAK,KAAA,CAAMpC,CAAAA,IAAUyE,EAAAA,CAAe3E,WAAAA,GAC/BE,CAAAA,8BACHA,CAAAA,CAAO0E,IAAAA,CAAKD,EAAAA,EAAgBV,CAAAA;YAG9BU,EAAAA,CAAeE,OAAAA;QAAAA,CAGhB;QAAA,MAAA,CAAA,IAAA;IAAA,CAQM5J;IAAAA,QAAAA,CAASZ,CAAAA,EAAwB/B,CAAAA,EAAAA,CAMvC;QAAA,MAAA,CALIA,CAAAA,wBAA8B0B,QAAAA,GACjC5B,IAAAA,CAAK0M,kBAAAA,CAAmBzK,CAAAA,IACd/B,CAAAA,wBAA8B2J,MAAAA,IACxC7J,IAAAA,CAAK2M,gBAAAA,CAAiB1K,CAAAA,GAAAA,IAAAA;IAAAA,CAMhByK;IAAAA,kBAAAA,CAAmBzK,CAAAA,EAAAA,CAC1B;QAAA,KAAA,CAAME,CAAAA,GAAOF,CAAAA,CAAQC,OAAAA,CAAQC,IAAAA,EACvBqC,CAAAA,GAAUxE,IAAAA,CAAKoK,QAAAA,EACfS,CAAAA,GAAU7K,IAAAA,CAAKqK,eAAAA,EAEfkC,CAAAA,GAAiBvM,IAAAA,CAAK8B,QAAAA,CAAS8K,YAAAA,IAC/BC,CAAAA,GAAsB7M,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,GAAUyJ,WAAAA,GAAcC,OAAAA,CAAQR,CAAAA;QAE1EvM,IAAAA,CAAKsK,sBAAAA,GAAyBiC,CAAAA,EAC9BvM,IAAAA,CAAKuK,mBAAAA,GAAsB,CAAA;QAAA,CAAA,EAC3BvK,IAAAA,CAAKwK,sBAAAA,GAAyB,CAAA;QAAA,CAAA,EAC9BxK,IAAAA,CAAKyK,2BAAAA,GAA8B,CAAA;QAAA,CAAA;QAEnC,GAAA,EAAK,KAAA,CAAM1J,EAAAA,IAAAA,IAAAA,CAAiBe,QAAAA,CAASuB,OAAAA,GAAU2J,aAAAA,GAAiB,CAG/D;YAAA,EAAA,EAAgC,CAAA,aAA5B7D,CAAAA,CAAcpI,EAAAA,GAAyB,QAAA;YAE3C,KAAA,CAAME,CAAAA,GAAQgB,CAAAA,CAAQgL,gBAAAA,CAAiBlM,EAAAA,GACjC0D,CAAAA,GAAO+C,CAAAA,CAAezG,EAAAA,EAAUE,CAAAA,GAChC0D,CAAAA,GACLkG,CAAAA,CAAQpB,MAAAA,KAAW7F,CAAAA,CAAcsJ,MAAAA,GAC9B9E,CAAAA,CAAiBrH,EAAAA,EAAUf,IAAAA,CAAK8B,QAAAA,IAChC,CAAE6C;gBAAAA,MAAAA,EAAQb,CAAAA,CAAc0B,IAAAA;YAAAA,CAAAA,EACtB2H,CAAAA,GAAmB5I,CAAAA,CAAgBxD,EAAAA,EAAUyD,CAAAA,EAASC,CAAAA,EAAME,CAAAA,GAAAA,CAC5DG,CAAAA,KAAAA,EAAEA,CAAAA,GAAFE,UAAAA,EAASA,CAAAA,EAAAA,CAAAA,GAAemI,CAAAA,EAExBtB,CAAAA,GAAS9K,EAAAA,CAASqM,SAAAA;YACxB,EAAA,GAAKvB,CAAAA,EAAQ,KAAA,CAAA,GAAA,CAAUrF,KAAAA,IAASjF,CAAAA,CAAAA,8BAAAA;YAChC,KAAA,CAAM8L,CAAAA,GAAcrN,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,GAAUyJ,WAAAA,GAAcC,OAAAA,CAAQlB,CAAAA,GAG5D7C,CAAAA,GAAM,CAAC/H;gBAAAA,CAAAA;gBAAOwD,CAAAA;gBAAME,CAAAA,CAAOA,MAAAA;gBAAQK,CAAAA;gBAAYqI,CAAAA;YAAAA,CAAAA,CAAaC,IAAAA,CAAK,CAAA;YAEvE,GAAA,CAAIC,CAAAA,GAAavN,IAAAA,CAAKuK,mBAAAA,CAAoBvB,CAAAA,GACtCwE,CAAAA,GAAiBxN,IAAAA,CAAKwK,sBAAAA,CAAuBxB,CAAAA,GAC7CyE,CAAAA,GAAsBzN,IAAAA,CAAKyK,2BAAAA,CAA4BzB,CAAAA;YAGtDuE,CAAAA,IAAeC,CAAAA,KACnBC,CAAAA,GAAsBzN,IAAAA,CAAKyK,2BAAAA,CAA4BzB,CAAAA,IAAO,CAAA,CAAA,EAC9DwE,CAAAA,GAAiBxN,IAAAA,CAAKwK,sBAAAA,CAAuBxB,CAAAA,IAAO,CAAA,CAAA,EACpDuE,CAAAA,GAAavN,IAAAA,CAAKuK,mBAAAA,CAAoBvB,CAAAA,IAAO,CAC5C6C;gBAAAA,MAAAA,EAAQgB,CAAAA;gBACRa,MAAAA,sBAAsBC,eAAAA,CAAgB1M,CAAAA;gBACtCsK,UAAAA,EAAY,CAAA;gBACZhE,UAAAA,EAAY,CAAA;gBACZvC,UAAAA,EAAY/D,CAAAA,yBAAwByG,eAAAA,CAAgBkG,YAAAA,GAAe5I,CAAAA,GAAAA,IAAAA,CAAa6I,CAAAA;gBAChFrL,UAAAA,EAAY,CACXsL;qBAACvM,CAAAA,GAAO,CACPsK;wBAAAA,MAAAA,EAAQwB,CAAAA;wBACR9B,UAAAA,EAAY,CAAA;wBACZhE,UAAAA,EAAY,CAAA;wBACZ9C,IAAAA,EAAMA,CAAAA;wBACNE,MAAAA,EAAQA,CAAAA,CAAOA,MAAAA,KAAWb,CAAAA,CAAc0B,IAAAA,GAAOb,CAAAA,CAAOA,MAAAA,GAAAA,IAAAA,CAASkJ,CAAAA;wBAC/D7I,UAAAA,EAAYA,CAAAA;wBACZwG,KAAAA,EAAO,CAAA;oBAAA,CAAA;gBAAA,CAAA;YAAA,CAAA;YAOX,KAAA,CAAMuC,EAAAA,GAAc9L,CAAAA,CAAQ+L,iBAAAA,CAAkBjN,EAAAA;YAC9CgN,EAAAA,CAAY5I,aAAAA,GAAgBgI,CAAAA,CAAiBhI,aAAAA,EAC7C4I,EAAAA,CAAY1I,UAAAA,GAAa8H,CAAAA,CAAiB9H,UAAAA,EAC1C0I,EAAAA,CAAYxC,UAAAA,GAAagC,CAAAA,CAAWhG,UAAAA,EAChCwG,EAAAA,CAAYtH,GAAAA,IAAO0G,CAAAA,CAAiB1G,GAAAA,KAAKsH,EAAAA,CAAYtH,GAAAA,GAAM0G,CAAAA,CAAiB1G,GAAAA,GAC5EsH,EAAAA,CAAYpH,GAAAA,IAAOwG,CAAAA,CAAiBxG,GAAAA,KAAKoH,EAAAA,CAAYpH,GAAAA,GAAMwG,CAAAA,CAAiBxG,GAAAA,GAChF1E,CAAAA,CAAQ0B,gBAAAA,CAAiB0I,GAAAA,CAAItL,EAAAA,EAAUoB,CAAAA,CAAKQ,SAAAA,CAAWiD,MAAAA,GACvDzD,CAAAA,CAAKQ,SAAAA,CAAWsL,IAAAA,CAAKF,EAAAA,GACrBN,CAAAA,CAAoBQ,IAAAA,CAAKF,EAAAA,GAGzBP,CAAAA,CAAeS,IAAAA,CAAK,GAAA,CAAIvC,UAAAA,CAAW5G,CAAAA,CAAM+G,MAAAA,EAAQ/G,CAAAA,CAAMyG,UAAAA,EAAYzG,CAAAA,CAAMyC,UAAAA,IACzEgG,CAAAA,CAAWhG,UAAAA,IAAczC,CAAAA,CAAMyC,UAAAA,EAC/BgG,CAAAA,CAAW/K,UAAAA,CAAW0L,uBAAAA,CAAwB1C,KAAAA,IAASzK,EAAAA,CAASkF,QAAAA;QAAAA,CAAAA;IAAAA,CAK1D0G;IAAAA,gBAAAA,CAAiB1K,CAAAA,EAAAA,CACxB;QAAA,KAAA,CAAMuC,CAAAA,GAAUxE,IAAAA,CAAKoK,QAAAA;QAErB,GAAA,CAAK,KAAA,CAAMpB,CAAAA,IAAAA,IAAAA,CAAYuB,mBAAAA,CAAqB,CAC3C;YAAA,KAAA,CAAMgD,CAAAA,GAAavN,IAAAA,CAAKuK,mBAAAA,CAAoBvB,CAAAA,GACtCwE,CAAAA,GAAiBxN,IAAAA,CAAKwK,sBAAAA,CAAuBxB,CAAAA,GAC7C6C,CAAAA,GAAS7L,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,GAAUyJ,WAAAA,GAAcS,CAAAA,CAAW/K,UAAAA,CAAWjB,CAAAA,EAAMsK,MAAAA,GAC3EsC,CAAAA,GAAmBlM,CAAAA,CAAQkM,gBAAAA,CAAiBzK,GAAAA,CAAImI,CAAAA,KAAW,CAAA,CAAA,EAAA,CAE3DL,CAAAA,KAAAA,EAAEA,CAAAA,GAAFxG,UAAAA,EAASA,CAAAA,GAATP,IAAAA,EAAqBA,CAAAA,EAAAA,CAAAA,GAAS8I,CAAAA,CAAW/K,UAAAA,CAAWjB,CAAAA,GACpDkE,CAAAA,qBAAuB2I,MAAAA,CAAOZ,CAAAA,GAC9B9H,CAAAA,GAAWlB,CAAAA,CAAQ6J,gBAAAA,CAAiB5I,CAAAA,EAAU+F,CAAAA,EAAOxG,CAAAA,EAAYP,CAAAA,GACjE6J,CAAAA,qBAA6BC,GAAAA,CAAI7I,CAAAA;YAEvC6H,CAAAA,CAAW/K,UAAAA,CAAWjB,CAAAA,EAAMgG,UAAAA,GAAa7B,CAAAA,CAAS6B,UAAAA,EAElDiG,CAAAA,CAAe5H,MAAAA,GAAS,CAAA,EACxB4H,CAAAA,CAAeS,IAAAA,CAAKK,CAAAA,GACpBH,CAAAA,CAAiBF,IAAAA,CAAKK,CAAAA,GACtBrM,CAAAA,CAAQkM,gBAAAA,CAAiB9B,GAAAA,CAAIR,CAAAA,EAAQsC,CAAAA;QAAAA,CAAAA;IAAAA,CAKhC/K;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,GAAA,CAAIuM,CAAAA,GAA2B,CAAA;QAG/B,GAAA,CAAK,KAAA,CAAMxF,CAAAA,IAAAA,IAAAA,CAAYuB,mBAAAA,CAAqB,CAC3C;YAAA,KAAA,CAAMgD,CAAAA,GAAavN,IAAAA,CAAKuK,mBAAAA,CAAoBvB,CAAAA,GAEtCyF,CAAAA,GAAkBxM,CAAAA,CAAQyM,wBAAAA,CAAyBhL,GAAAA,CADlC1D,IAAAA,CAAKwK,sBAAAA,CAAuBxB,CAAAA,EAAK,CAAA,IAGlDyE,CAAAA,GAAsBzN,IAAAA,CAAKyK,2BAAAA,CAA4BzB,CAAAA;YAC7D,GAAA,EAAK,KAAA,CAAM+E,EAAAA,IAAeN,CAAAA,CACzBM,EAAAA,CAAYR,UAAAA,GAAakB,CAAAA;YAG1B,KAAA,CAAME,CAAAA,GAAqB1M,CAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKgJ,WAAAA,CAAasD,CAAAA,GACvDG,CAAAA,GAAuBD,CAAAA,CAAmBpD,UAAAA,IAAc,CAAA;YAE9DhL,MAAAA,CAAOC,MAAAA,CAAOmO,CAAAA,EAAoBpB,CAAAA,GAClCoB,CAAAA,CAAmBpD,UAAAA,GAAaiD,CAAAA,EACDG,CAAAA,CAAmBnM,UAAAA,CAAYjB,CAAAA,EACvCgK,UAAAA,GAAaqD,CAAAA,EAEpCJ,CAAAA,sBAAwCtH,SAAAA,CAAUqG,CAAAA,CAAWhG,UAAAA;QAAAA,CAI9D;QAAA,KAAA,CAAMgF,EAAAA,GAAiBvM,IAAAA,CAAKsK,sBAAAA,EACtBuC,CAAAA,GAAsB5K,CAAAA,CAAQ4M,cAAAA,CAAenL,GAAAA,CAAI6I,EAAAA,GACjDuC,CAAAA,GAAoB7M,CAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKyJ,OAAAA,CAASiB,CAAAA;QAKxD,MAAA,CAJAiC,CAAAA,CAAkBvH,UAAAA,GAAaiH,CAAAA,EAC/BM,CAAAA,CAAkBtM,UAAAA,GAAa,CAAEsL;aAACvM,CAAAA,GAAO,CAAE6K;gBAAAA,QAAAA,GAAU,CAAA;YAAA,CAAA;QAAA,CAAA,EACrDG,EAAAA,CAAeE,OAAAA,IAAAA,IAAAA;IAAAA,CAAAA;;AAtTJ9C,CAAAA,CAWWrI,cAAAA,GAAiBC,CAAAA,EAX5BoI,CAAAA,CAYW/F,aAAAA,GAAgBA,CAAAA;AEnGxC,KAAA,CAAMrC,CAAAA,GNV0B,CAAA;MMY1BwN,CAAAA;IACLC,KAAAA,CAAMlK,CAAAA,EAAAA,CACL;QAAA,MAAA,CAAOA,CAAAA,CAAMc,MAAAA,IAAU,EAAA,IAAmB,EAAA,KAAbd,CAAAA,CAAM,CAAA,KAA0B,EAAA,KAAbA,CAAAA,CAAM,CAAA,KAA2B,EAAA,KAAdA,CAAAA,CAAM,EAAA,KAA4B,EAAA,KAAdA,CAAAA,CAAM,EAAA;IAAA,CAE9FmK;IAAAA,OAAAA,CAAQnK,CAAAA,EAAAA,CAEP;QAAA,KAAA,CAAMoK,CAAAA,qBAAmBC,UAAAA,CAAWrK,CAAAA,CAAMsK,KAAAA,CAAM,CAAA,EAAG,CAAA,IAC7CC,CAAAA,qBAAmBF,UAAAA,CAAWrK,CAAAA,CAAMsK,KAAAA,CAAM,CAAA,EAAG,EAAA;QACnD,EAAA,EAAa,CAAA,UAATF,CAAAA,IAA4B,CAAA,UAATG,CAAAA,EAAiB,MAAA,CAAA,IAAA;QAExC,KAAA,CAAMC,CAAAA,GAAO,GAAA,CAAIC,QAAAA,CAASzK,CAAAA,CAAM+G,MAAAA,EAAQ/G,CAAAA,CAAMyG,UAAAA;QAG9C,GAAA,CAAIiE,CAAAA,GAAS,EAAA;QACb,GAAA,GAAOA,CAAAA,GAASF,CAAAA,CAAK/H,UAAAA,EAAY,CAChC;YAAA,KAAA,CAAMkI,CAAAA,qBAAsBN,UAAAA,CAC3B,GAAA,CAAIzD,UAAAA,CAAW,CACd4D;gBAAAA,CAAAA,CAAKI,QAAAA,CAASF,CAAAA;gBACdF,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,CAAA;gBACvBF,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,CAAA;gBACvBF,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,CAAA;YAAA,CAAA,IAGnBG,CAAAA,GAAkBL,CAAAA,CAAKM,SAAAA,CAAUJ,CAAAA,GAAS,CAAA,GAAG,CAAA;YACnD,EAAA,EAAgB,CAAA,UAAZC,CAAAA,EAGH,MAAO,CAAA,CAF0C;AAAA,qBAAA,GAAnCH,CAAAA,CAAKO,QAAAA,CAASL,CAAAA,GAAS,EAAA,GAAI,CAAA;AACS,qBAAA,GAAnCF,CAAAA,CAAKO,QAAAA,CAASL,CAAAA,GAAS,EAAA,GAAI,CAAA;YAAA,CAAA;YAAA,EAAA,EAEpB,CAAA,UAAZC,CAAAA,EAAoB,CAC9B;gBAAA,KAAA,CAAMK,CAAAA,GAAKR,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,CAAA,GAC5BO,CAAAA,GAAKT,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,EAAA,GAC5BQ,CAAAA,GAAKV,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,EAAA;gBAIlC,MAAO,CAAA,CAFO;AAAA,qBAAA,KAAY,EAAA,GAALO,CAAAA,KAAc,CAAA,GAAKD,CAAAA;AACzB,qBAAA,KAAY,EAAA,GAFhBR,CAAAA,CAAKI,QAAAA,CAASF,CAAAA,GAAS,EAAA,MAEC,EAAA,GAAOQ,CAAAA,IAAM,CAAA,IAAY,GAAA,GAALD,CAAAA,KAAc,CAAA;gBAAA,CAAA;YAAA,CAGtEP;YAAAA,CAAAA,IAAU,CAAA,GAAIG,CAAAA,GAAmBA,CAAAA,GAAkB,CAAA;QAAA,CAGpD;QAAA,MAAA,CAAA,IAAA;IAAA,CAEDM;IAAAA,WAAAA,CAAYC,CAAAA,EAAAA,CACX;QAAA,MAAA,CAAA,CAAA;IAAA,CAAA;;MA+CWC,CAAAA;mBAAoB1O,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CAChBxB,aAAAA,GAAgBsB,CAAAA,EAAAA,IAAAA,CAEhBqI,YAAAA,GAAe,CAACxJ;+BAAagQ,OAAAA;QAAAA,CAAAA;IAAAA,CAIvBtC;WAAAA,QAAAA,GAAAA,CACrBuC;yBAAWC,cAAAA,CAAe,CAAA,aAAc,GAAA,CAAIvB,CAAAA;IAAAA,CAItCjE;IAAAA,OAAAA,CAAQ7I,EAAAA,EAAAA,CAOd;QAAA,MAAA,EANoBA,EAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA,EACzClO,OAAAA,EAASmO,CAAAA,GAAAA,CAChBA;YAAAA,CAAAA,CAAWhO,UAAAA,IAAcgO,CAAAA,CAAWhO,UAAAA,CAAWjB,CAAAA,MAClDiP,CAAAA,CAAW1E,MAAAA,GAAU0E,CAAAA,CAAWhO,UAAAA,CAAWjB,CAAAA,EAA6BuK,MAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAQpE9J;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,MAAA,CAAA,IAAA;IAAA,CAIMmB;IAAAA,KAAAA,CAAMnB,EAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,CAAAA,GAAUD,EAAAA,CAAQC,OAAAA;QAmBxB,MAAA,CAjBAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAoN,YAAAA,GACApO,OAAAA,EAASqO,CAAAA,GAAAA,CACT;YAAA,EAAA,EAA8B,CAAA,gBAA1BA,CAAAA,CAAQC,WAAAA,IAAgC,CAC3C;gBAAA,KAAA,CAAMC,CAAAA,GAAa3O,EAAAA,CAAQ4O,aAAAA,CAAcnN,GAAAA,CAAIgN,CAAAA;iBACzBxO,CAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA,EACjClO,OAAAA,EAASmO,CAAAA,GAAAA,CAChBA;oBAAAA,CAAAA,CAAW1E,MAAAA,KAAW8E,CAAAA,KACzBJ,CAAAA,CAAWhO,UAAAA,GAAagO,CAAAA,CAAWhO,UAAAA,IAAc,CAAA;oBAAA,CAAA,EACjDgO,CAAAA,CAAWhO,UAAAA,CAAWjB,CAAAA,IAAQ,CAAEuK;wBAAAA,MAAAA,EAAQ0E,CAAAA,CAAW1E,MAAAA;oBAAAA,CAAAA,EAAAA,MAAAA,CAC5C0E,CAAAA,CAAW1E,MAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AA3CZqE,CAAAA,CAIW7O,cAAAA,GAAiBC,CAAAA;ACxGzC,KAAA,CAAMA,CAAAA,GPDoC,CAAA;AAAA,GAAA,COG/BuP,CAAAA,EAGPC,CAAAA,EACAC,CAAAA,ECPOC,CAAAA;SDSKC,CAAAA,CAAeC,CAAAA,EAAkBC,CAAAA,EAAAA,CAChD;IAAA,KAAA,CAAMvF,CAAAA,GAAS,GAAA,CAAIiF,CAAAA,CAAcO,aAAAA;IACjC,GAAA,CAAA,CAIC;QAAA,EAAA,EAHAxF,CAAAA,CAAOyF,IAAAA,CAAKF,CAAAA,EAA8BA,CAAAA,CAAKxL,MAAAA,GAE1BuL,CAAAA,CAAQI,sBAAAA,CAAuB1F,CAAAA,MAC/BiF,CAAAA,CAAcU,eAAAA,EAClC,KAAA,CAAA,GAAA,CAAUhL,KAAAA,EAAAA,CAAAA,EAAUjF,CAAAA,CAAAA,wBAAAA;QAGrB,KAAA,CAAMkQ,CAAAA,GAAY,GAAA,CAAIX,CAAAA,CAAcY,IAAAA;QAGpC,EAAA,GAFeP,CAAAA,CAAQQ,kBAAAA,CAAmB9F,CAAAA,EAAQ4F,CAAAA,EAEtCG,EAAAA,MAA0B,CAAA,KAAlBH,CAAAA,CAAUI,GAAAA,EAC7B,KAAA,CAAA,GAAA,CAAUrL,KAAAA,EAAAA,CAAAA,EAAUjF,CAAAA,CAAAA,mBAAAA;QAGrB,MAAA,CAAOkQ,CAAAA;IAAAA,CAfR,QAAA,CAiBCX;QAAAA,CAAAA,CAAcgB,OAAAA,CAAQjG,CAAAA;IAAAA,CAAAA;AAAAA,CAAAA;SAIRkG,CAAAA,CAAYZ,CAAAA,EAAkBa,CAAAA,EAAAA,CAC7C;IAAA,KAAA,CACMC,CAAAA,GAAwB,CAAA,GADbD,CAAAA,CAAKE,SAAAA;IAGtB,GAAA,CAAIL,CAAAA,EACAM,CAAAA;IAEJ,EAAA,EAAIH,CAAAA,CAAKI,UAAAA,MAAgB,KAAA,EAAO,CAC/B;QAAA,KAAA,CAAM7K,CAAAA,GAAa0K,CAAAA,GAAaI,WAAAA,CAAYlL,iBAAAA;QAC5C0K,CAAAA,GAAMf,CAAAA,CAAcwB,OAAAA,CAAQ/K,CAAAA,GAC5B4J,CAAAA,CAAQoB,uBAAAA,CAAwBP,CAAAA,EAAMzK,CAAAA,EAAYsK,CAAAA,GAClDM,CAAAA,GAAU,GAAA,CAAIE,WAAAA,CAAYvB,CAAAA,CAAc0B,OAAAA,CAAQ3G,MAAAA,EAAQgG,CAAAA,EAAKI,CAAAA,EAAY7C,KAAAA;IAAAA,CAAAA,MACnE,CACN;QAAA,KAAA,CAAM7H,CAAAA,GAAa0K,CAAAA,GAAaQ,WAAAA,CAAYtL,iBAAAA;QAC5C0K,CAAAA,GAAMf,CAAAA,CAAcwB,OAAAA,CAAQ/K,CAAAA,GAC5B4J,CAAAA,CAAQuB,uBAAAA,CAAwBV,CAAAA,EAAMzK,CAAAA,EAAYsK,CAAAA,GAClDM,CAAAA,GAAU,GAAA,CAAIM,WAAAA,CAAY3B,CAAAA,CAAc6B,OAAAA,CAAQ9G,MAAAA,EAAQgG,CAAAA,EAAKI,CAAAA,EAAY7C,KAAAA;IAAAA,CAK1E;IAAA,MAAA,CAFA0B,CAAAA,CAAc8B,KAAAA,CAAMf,CAAAA,GAEbM,CAAAA;AAAAA,CAAAA;SAGQU,CAAAA,CACf1B,CAAAA,EACAa,CAAAA,EACA9O,CAAAA,EACA6K,CAAAA,EAAAA,CAEA;IAAA,KAAA,CAAM+E,CAAAA,GAAW9B,CAAAA,CAAUjD,CAAAA,CAAY5I,aAAAA,GACjC4N,CAAAA,GAAYhC,CAAAA,CAAgBhD,CAAAA,CAAY5I,aAAAA,GACxC6N,CAAAA,GAAgB9P,CAAAA,CAAU+P,cAAAA,IAE1BC,CAAAA,GADYlB,CAAAA,CAAKI,UAAAA,KACOY,CAAAA,EACxBzL,CAAAA,GAAqB2L,CAAAA,GAAYH,CAAAA,CAAU5L,iBAAAA,EAE3C0K,CAAAA,GAAMf,CAAAA,CAAcwB,OAAAA,CAAQ/K,CAAAA;IAClC4J,CAAAA,CAAQgC,iCAAAA,CAAkCnB,CAAAA,EAAM9O,CAAAA,EAAW4P,CAAAA,EAAUvL,CAAAA,EAAYsK,CAAAA;IACjF,KAAA,CAAM/M,CAAAA,GAAoB,GAAA,CAAIiO,CAAAA,CAAUjC,CAAAA,CAAcsC,OAAAA,CAAQvH,MAAAA,EAAQgG,CAAAA,EAAKqB,CAAAA,EAAW9D,KAAAA;IAGtF,MAAA,CAFA0B,CAAAA,CAAc8B,KAAAA,CAAMf,CAAAA,GAEb/M,CAAAA;AAAAA,CAAAA;AAAAA,GAAAA,CCxEIlB,CAAAA,EAKPyP,CAAAA;CALL,QAAA,CAAYzP,CAAAA,EAAAA,CACXA;IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,GAAAA,CAAAA,IAAAA,CAAAA,cACAA,CAAAA,CAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CAFD,CAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAKZ,QAAA,CAAKyP,CAAAA,EAAAA,CACJA;IAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,WACAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,SACAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,QACAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,YACAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA;AAAAA,CALD,EAAKA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA;AAQL,KAAA,CAAMC,CAAAA,GAA4B,CACjCxF;KAACuF,CAAAA,CAAcE,QAAAA,GAAW,EAAA;KACzBF,CAAAA,CAAcG,MAAAA,GAAS,EAAA;KACvBH,CAAAA,CAAcI,KAAAA,GAAQ,CAAA;KACtBJ,CAAAA,CAAcK,SAAAA,GAAY,EAAA;KAC1BL,CAAAA,CAAcM,OAAAA,GAAU,EAAA;AAAA,CAAA,EAkBpBnK,CAAAA,GAA0C,CAC/CoK;IAAAA,WAAAA,EAAa,CAAA;IACbC,WAAAA,EAAa,CAAA;IACbpK,MAAAA,EAAQ7F,CAAAA,CAAckQ,WAAAA;IACtBC,gBAAAA,EAAkBT,CAAAA;IAClBU,kBAAAA,EAAoB,CAAA;AAAA,CAAA;SAYLC,EAAAA,CAAeC,CAAAA,EAAiBC,CAAAA,GAA2B3K,CAAAA,EAAAA,CAC1E;IAAA,KAAA,CAAMqB,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;IAAAA,CAAAA,EAAerB,CAAAA,EAA4B2K,CAAAA;IACjDtJ,CAAAA,CAAQkJ,gBAAAA,GAAAA,CAAAA,CAAAA,CAAAA;IAAAA,CAAAA,EAAwBT,CAAAA,EAA8Ba,CAAAA,CAASJ,gBAAAA;IAEvE,KAAA,CAAMvP,CAAAA,GAAU,GAAA,CAAIyM,CAAAA,CAAcmD,OAAAA,EAC5BC,CAAAA,GAAU,GAAA,CAAIpD,CAAAA,CAAcqD,WAAAA,EAC5BtC,CAAAA,GAAO,GAAA,CAAIf,CAAAA,CAAcS,IAAAA,EAEzB6C,CAAAA,GAA0C,CAAA;IAAA,CAAA,EAC1CC,CAAAA,GAAc,GAAA,CAAIvD,CAAAA,CAAcwD,cAAAA;IAEtC,GAAA,EAAK,KAAA,CAAM7T,EAAAA,IAAYsT,CAAAA,CAAK9S,aAAAA,GAAiB,CAC5C;QAAA,KAAA,CAAM8B,CAAAA,GAAYgR,CAAAA,CAAKvT,YAAAA,CAAaC,EAAAA,GAC9B8T,CAAAA,GAAgBC,EAAAA,CAAiB/T,EAAAA,GACjCgU,CAAAA,GAAsBC,EAAAA,CAC3BR,CAAAA,EACAnR,CAAAA,CAAUkC,gBAAAA,IACV4M,CAAAA,EACAf,CAAAA,CAAcyD,CAAAA,GACdxR,CAAAA,CAAU+C,QAAAA,IACV/C,CAAAA,CAAU+B,cAAAA,IACV/B,CAAAA,CAAU6B,QAAAA;QAGX,EAAA,EAAA,EAAqB,KAAjB6P,CAAAA,EAAoB,KAAA,CAAA,GAAA,CAAUpO,KAAAA,EAAAA,mBAAAA,EAA4B5F,EAAAA,CAAAA,YAAAA;QAG9D,EAAA,EADA2T,CAAAA,CAAa3T,EAAAA,IAAYgU,CAAAA,EACU,CAAA,UAA/B/J,CAAAA,CAAQmJ,kBAAAA,IAA8C,CAAA,cAAbpT,EAAAA,EAC5C4D,CAAAA,CAAQsQ,wBAAAA,CAAyB7D,CAAAA,CAAcyD,CAAAA,GAAgB7J,CAAAA,CAAQkJ,gBAAAA,CAAiBW,CAAAA;aAAAA,CAAAA;YAAAA,EAAAA,EACxC,CAAA,WAAA,MAAA,CAA/B7J,CAAAA,CAAQmJ,kBAAAA,EAezB,KAAA,CAAA,GAAA,CAAUxN,KAAAA,CAAM,CAAA;YAf0C,CAC1D;gBAAA,KAMAhC,CANA,CAAMwP,CAAAA,kBAAAA,EAAEA,CAAAA,EAAAA,CAAAA,GAAuBnJ,CAAAA,EACzBkK,CAAAA,GAAQC,IAAAA,CAAKrO,GAAAA,CAClBqN,CAAAA,CAAmBrN,GAAAA,CAAI,CAAA,IAAKqN,CAAAA,CAAmBvN,GAAAA,CAAI,CAAA,GACnDuN,CAAAA,CAAmBrN,GAAAA,CAAI,CAAA,IAAKqN,CAAAA,CAAmBvN,GAAAA,CAAI,CAAA,GACnDuN,CAAAA,CAAmBrN,GAAAA,CAAI,CAAA,IAAKqN,CAAAA,CAAmBvN,GAAAA,CAAI,CAAA;gBAEpDjC,CAAAA,CAAQyQ,gCAAAA,CACPhE,CAAAA,CAAcyD,CAAAA,GACd7J,CAAAA,CAAQkJ,gBAAAA,CAAiBW,CAAAA,GACzBxR,CAAAA,CAAU+B,cAAAA,IACV+O,CAAAA,CAAmBvN,GAAAA,EACnBsO,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA;IAAAA,CAOH;IAAA,KAAA,CAAM5C,CAAAA,GAAU+B,CAAAA,CAAKgB,UAAAA;IACrB,EAAA,GAAK/C,CAAAA,EAAS,KAAA,CAAA,GAAA,CAAU3L,KAAAA,CAAM,CAAA;IAE9B6N,CAAAA,CAAQc,cAAAA,CAAenD,CAAAA,EAAMG,CAAAA,CAAQlM,QAAAA,KAAa,CAAA,EAAGkM,CAAAA,CAAQpN,QAAAA,KAE7DP,CAAAA,CAAQ4Q,eAAAA,CAAgBvK,CAAAA,CAAQgJ,WAAAA,EAAahJ,CAAAA,CAAQ+I,WAAAA,GACrDpP,CAAAA,CAAQ6Q,yBAAAA,EAA0B,CAAA,GAG9BxK,CAAAA,CAAQpB,MAAAA,KAAW7F,CAAAA,CAAc0R,UAAAA,IAAcpB,CAAAA,CAAKqB,WAAAA,GAAc3P,MAAAA,GAAS,CAAA,GAC9EpB,CAAAA,CAAQgR,iBAAAA,CAAkBvE,CAAAA,CAAcwE,wBAAAA,IAExCjR,CAAAA,CAAQgR,iBAAAA,CAAkBvE,CAAAA,CAAcyE,yBAAAA;IAGzC,KAAA,CAAMnO,CAAAA,GAAa/C,CAAAA,CAAQmR,uBAAAA,CAAwB3D,CAAAA,EAAMwC,CAAAA;IACzD,EAAA,EAAIjN,CAAAA,IAAc,CAAA,EAAG,KAAA,CAAA,GAAA,CAAUf,KAAAA,CAAM,CAAA;IAErC,KAAA,CAAM4K,CAAAA,GAAO,GAAA,CAAI1F,UAAAA,CAAWnE,CAAAA;IAC5B,GAAA,CAAK,GAAA,CAAI1B,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAI0B,CAAAA,IAAc1B,GAAAA,CACjCuL,CAAAA,CAAKvL,GAAAA,IAAK2O,CAAAA,CAAYoB,QAAAA,CAAS/P,GAAAA;IAGhC,KAAA,CAAMgQ,CAAAA,GAAkB3B,CAAAA,CAAKvT,YAAAA,CAAa,CAAA,WAAasF,QAAAA,IACjD6P,CAAAA,GAActR,CAAAA,CAAQuR,wBAAAA,IACtB9D,CAAAA,GAAiD,CAAA,GAApCzN,CAAAA,CAAQwR,uBAAAA;IAE3B,EAAA,EAAI9B,CAAAA,CAAKqB,WAAAA,GAAc3P,MAAAA,GAAS,CAAA,IAAKkQ,CAAAA,KAAgBD,CAAAA,EACpD,KAAA,CAAA,GAAA,CAAUrP,KAAAA,CACT,CAAA;IAUF,MAAA,CALAyK,CAAAA,CAAca,OAAAA,CAAQ0C,CAAAA,GACtBvD,CAAAA,CAAca,OAAAA,CAAQE,CAAAA,GACtBf,CAAAA,CAAca,OAAAA,CAAQuC,CAAAA,GACtBpD,CAAAA,CAAca,OAAAA,CAAQtN,CAAAA,GAEf,CAAEsR;QAAAA,WAAAA,EAAAA,CAAAA;QAAa7D,UAAAA,EAAAA,CAAAA;QAAYb,IAAAA,EAAAA,CAAAA;QAAMmD,YAAAA,EAAAA,CAAAA;IAAAA,CAAAA;AAAAA,CAGzC;SAASI,EAAAA,CAAiB/T,CAAAA,EAAAA,CACzB;IAAA,MAAiB,CAAA,CAAA,cAAbA,CAAAA,GACIyS,CAAAA,CAAcE,QAAAA,GACE,CAAA,YAAb3S,CAAAA,GACHyS,CAAAA,CAAcG,MAAAA,GACX5S,CAAAA,CAASqI,UAAAA,CAAW,CAAA,WACvBoK,CAAAA,CAAcI,KAAAA,GACX7S,CAAAA,CAASqI,UAAAA,CAAW,CAAA,cACvBoK,CAAAA,CAAcK,SAAAA,GAEfL,CAAAA,CAAcM,OAAAA;AAAAA,CAGtB;SAASkB,EAAAA,CACRR,CAAAA,EACAlP,CAAAA,EACA6M,CAAAA,EACA9O,CAAAA,EACAsI,CAAAA,EACAyK,CAAAA,EACAnR,CAAAA,EAAAA,CAEA;IAAA,MAAA,CAAQK,CAAAA;QACP,IAAA,gBAAchB,aAAAA,CAAc+R,aAAAA;YAC3B,MAAA,CAAO7B,CAAAA,CAAQ8B,iBAAAA,CAAkBnE,CAAAA,EAAM9O,CAAAA,EAAWsI,CAAAA,EAAOyK,CAAAA,EAAUnR,CAAAA;QACpE,IAAA,gBAAcX,aAAAA,CAAcJ,IAAAA;YAC3B,MAAA,CAAOsQ,CAAAA,CAAQ+B,gBAAAA,CAAiBpE,CAAAA,EAAM9O,CAAAA,EAAWsI,CAAAA,EAAOyK,CAAAA,EAAUnR,CAAAA;QACnE,IAAA,gBAAcX,aAAAA,CAAckS,cAAAA;YAC3B,MAAA,CAAOhC,CAAAA,CAAQiC,kBAAAA,CAAmBtE,CAAAA,EAAM9O,CAAAA,EAAWsI,CAAAA,EAAOyK,CAAAA,EAAUnR,CAAAA;QACrE,IAAA,gBAAcX,aAAAA,CAAcH,KAAAA;YAC3B,MAAA,CAAOqQ,CAAAA,CAAQkC,iBAAAA,CAAkBvE,CAAAA,EAAM9O,CAAAA,EAAWsI,CAAAA,EAAOyK,CAAAA,EAAUnR,CAAAA;QACpE,IAAA,gBAAcX,aAAAA,CAAcqS,YAAAA;YAC3B,MAAA,CAAOnC,CAAAA,CAAQoC,kBAAAA,CAAmBzE,CAAAA,EAAM9O,CAAAA,EAAWsI,CAAAA,EAAOyK,CAAAA,EAAUnR,CAAAA;QACrE,IAAA,gBAAcX,aAAAA,CAAcF,KAAAA;YAC3B,MAAA,CAAOoQ,CAAAA,CAAQqC,iBAAAA,CAAkB1E,CAAAA,EAAM9O,CAAAA,EAAWsI,CAAAA,EAAOyK,CAAAA,EAAUnR,CAAAA;;YAEnE,KAAA,CAAA,GAAA,CAAU0B,KAAAA,EAAAA,4BAAAA,EAAqCrB,CAAAA,CAAAA,EAAAA;;AAAAA,CCtKlD;AAAA,KAAA,CAAM5D,EAAAA,GTfoC,CAAA;MSmG7BoV,EAAAA;mBAA6BlV,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACzBxB,aAAAA,GAAgBsB,EAAAA,EAAAA,IAAAA,CAEhBqI,YAAAA,GAAe,CAACxJ;+BAAa0J,SAAAA;QAAAA,CAAAA,EAAAA,IAAAA,CAE7BnI,aAAAA,GAAgB,CAACvB;+BAAawB,QAAAA;QAAAA,CAAAA,EAAAA,IAAAA,CAE9BmI,gBAAAA,GAAmB,CAAC;YAAA,CAAA;QAAA,CAAA,EAAA,IAAA,CAEpBC,iBAAAA,GAAoB,CAAC;YAAA,CAAA;QAAA,CAAA,EAAA,IAAA,CAU7B4M,cAAAA,GAAuC,IAAA,EAAA,IAAA,CACvCC,cAAAA,GAAuC,IAAA,EAAA,IAAA,CACvCxM,eAAAA,GAAkC,CAAA;QAAA,CAAA;IAAA,CAGnCK;IAAAA,OAAAA,CAAQ1B,CAAAA,EAAa2B,CAAAA,EAAAA,CAS3B;QAAA,MARY,CAAA,CAAA,qBAAR3B,CAAAA,KACHhJ,IAAAA,CAAK4W,cAAAA,GAAiBjM,CAAAA,EF/CxBmG,CAAAA,GEgDoB9Q,IAAAA,CAAK4W,cAAAA,EF9CzB7F,CAAAA,GAAkB,CACjBjD;4BAAU3J,aAAAA,CAAcF,KAAAA,GAAQ0B,YAAAA;4BACtBxB,aAAAA,CAAcqS,YAAAA,GAAe/D,WAAAA;4BAC7BtO,aAAAA,CAAckS,cAAAA,GAAiBhE,WAAAA;4BAC/BlO,aAAAA,CAAc+R,aAAAA,GAAgBxK,UAAAA;4BAC9BvH,aAAAA,CAAcH,KAAAA,GAAQ8S,UAAAA;4BACtB3S,aAAAA,CAAcJ,IAAAA,GAAOgT,SAAAA;QAAAA,CAAAA,EAGhC/F,CAAAA,GAAY,CACXlD;4BAAU3J,aAAAA,CAAcF,KAAAA,GAAQ6M,CAAAA,CAAckG,UAAAA;4BACpC7S,aAAAA,CAAcqS,YAAAA,GAAe1F,CAAAA,CAAcmG,SAAAA;4BAC3C9S,aAAAA,CAAckS,cAAAA,GAAiBvF,CAAAA,CAAcoG,SAAAA;4BAC7C/S,aAAAA,CAAc+R,aAAAA,GAAgBpF,CAAAA,CAAcqG,QAAAA;4BAC5ChT,aAAAA,CAAcH,KAAAA,GAAQ8M,CAAAA,CAAcsG,QAAAA;4BACpCjT,aAAAA,CAAcJ,IAAAA,GAAO+M,CAAAA,CAAcuG,OAAAA;QAAAA,CAAAA,GEiCjC,CAAA,qBAARrO,CAAAA,KACHhJ,IAAAA,CAAK6W,cAAAA,GAAiBlM,CAAAA,EDlFxBsG,CAAAA,GCmFoBjR,IAAAA,CAAK6W,cAAAA,GAAAA,IAAAA;IAAAA,CAkBlBjM;IAAAA,iBAAAA,CAAkBC,CAAAA,EAAAA,CAExB;QAAA,MAAA,CADA7K,IAAAA,CAAKqK,eAAAA,GAAkBQ,CAAAA,EAAAA,IAAAA;IAAAA,CAKjBC;IAAAA,OAAAA,CAAQ7I,CAAAA,EAAAA,CACd;QAAA,EAAA,GAAKjC,IAAAA,CAAK4W,cAAAA,EACT,KAAA,CAAA,GAAA,CAAUpQ,KAAAA,EAAAA,CAAAA,EAAUjF,EAAAA,CAAAA,yDAAAA;QAGrB,KAAA,CAAM+V,CAAAA,GAAStX,IAAAA,CAAK8B,QAAAA,CAASyV,SAAAA,IACvBrV,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAClBsV,CAAAA,GAA4C,GAAA,CAAIrN,GAAAA;QAEtD,GAAA,CAAA,CACC;YAAA,KAAA,CAAMsN,CAAAA,GAAWvV,CAAAA,CAAQC,IAAAA,CAAKuV,MAAAA,IAAU,CAAA,CAAA;YACxC,GAAA,EAAK,KAAA,CAAMC,CAAAA,IAAWF,CAAAA,CACrB,GAAA,EAAK,KAAA,CAAMG,EAAAA,IAAWD,CAAAA,CAAQE,UAAAA,CAAY,CACzC;gBAAA,EAAA,GAAKD,EAAAA,CAAQpV,UAAAA,KAAeoV,EAAAA,CAAQpV,UAAAA,CAAWjB,EAAAA,GAAO,QAAA;gBAEtD,KAAA,CAAMuW,CAAAA,GAAWF,EAAAA,CAAQpV,UAAAA,CAAWjB,EAAAA;gBACpC,GAEA,EAFK4P,CAAAA,EAASM,CAAAA,IAAa+F,CAAAA,CAAY9T,GAAAA,CAAIoU,CAAAA,CAASvK,UAAAA,KAAe,CAAA,CAAA;gBAEnE,EAAA,GAAKkE,CAAAA,KAAcN,CAAAA,EAAS,CAC3B;oBAAA,KAAA,CAAM4G,CAAAA,GAAgB7V,CAAAA,CAAQC,IAAAA,CAAKgJ,WAAAA,CAAa2M,CAAAA,CAASvK,UAAAA,GACnD5B,CAAAA,GAAYzJ,CAAAA,CAAQC,IAAAA,CAAKyJ,OAAAA,CAASmM,CAAAA,CAAclM,MAAAA,GAQhDyC,CAAAA,qBAA6BvC,MAAAA,CANlBJ,CAAAA,CAAUK,GAAAA,GACxB9J,CAAAA,CAAQ+J,SAAAA,CAAUN,CAAAA,CAAUK,GAAAA,IAC5B9J,CAAAA,CAAQ+J,SAAAA,oBAEQ8L,CAAAA,CAAcxM,UAAAA,IAAc,CAAA,EAC5BwM,CAAAA,CAAcxQ,UAAAA;oBAGjC4J,CAAAA,GAAU,GAAA,CAAA,IAAA,CAASyF,cAAAA,CAAeoB,OAAAA,EAClCvG,CAAAA,GAAYP,CAAAA,CAAeC,CAAAA,EAAS7C,CAAAA,GACpCkJ,CAAAA,CAAYnL,GAAAA,CAAIyL,CAAAA,CAASvK,UAAAA,EAAY,CAAC4D;wBAAAA,CAAAA;wBAASM,CAAAA;oBAAAA,CAAAA,GAC/C6F,CAAAA,CAAOW,KAAAA,EAAAA,CAAAA,EAAU1W,EAAAA,CAAAA,eAAAA,EAAsB+M,CAAAA,CAAe/G,UAAAA,CAAAA,OAAAA;gBAAAA,CAIvD;gBAAA,GAAA,CAAK,KAAA,CAAM3G,EAAAA,IAAYgX,EAAAA,CAAQlX,UAAAA,CAAY,CAC1C;oBAAA,KAAA,CAAMqN,CAAAA,GAAc9L,CAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKQ,SAAAA,CAAWiV,EAAAA,CAAQlX,UAAAA,CAAWE,EAAAA,IACjEsX,CAAAA,GAAiB/G,CAAAA,CAAQgH,sBAAAA,CAAuB1G,CAAAA,EAAWqG,CAAAA,CAASpX,UAAAA,CAAWE,EAAAA,IAC/EwX,CAAAA,GAAiBvF,CAAAA,CAAgB1B,CAAAA,EAASM,CAAAA,EAAWyG,CAAAA,EAAgBnK,CAAAA;oBAC3E9L,CAAAA,CAAQU,SAAAA,CAAUiV,EAAAA,CAAQlX,UAAAA,CAAWE,EAAAA,GAAWyX,QAAAA,CAASD,CAAAA;gBAAAA,CAAAA;gBAAAA,IAAAA,CAIlCvK,CAAAA,KAApB+J,EAAAA,CAAQzF,OAAAA,IACXlQ,CAAAA,CAAQU,SAAAA,CAAUiV,EAAAA,CAAQzF,OAAAA,EAASkG,QAAAA,CAAStG,CAAAA,CAAYZ,CAAAA,EAASM,CAAAA;YAAAA,CAAAA;QAAAA,CArCrE,QAAA,CA0CC;YAAA,GAAA,EAAK,KAAgBA,EAATN,CAAAA,EAASM,CAAAA,KAAc6G,KAAAA,CAAMC,IAAAA,CAAKf,CAAAA,CAAYgB,MAAAA,IACzDxY,IAAAA,CAAK4W,cAAAA,CAAe9E,OAAAA,CAAQX,CAAAA,GAC5BnR,IAAAA,CAAK4W,cAAAA,CAAe9E,OAAAA,CAAQL,CAAAA;QAAAA,CAI9B;QAAA,MAAA,CAAA,IAAA;IAAA,CAIMzP;IAAAA,IAAAA,CAAKsK,CAAAA,EAAAA,CACX;QAAA,MAAA,CAAA,IAAA;IAAA,CAIMzJ;IAAAA,QAAAA,CAASZ,GAAAA,EAAwBwW,EAAAA,EAAAA,CACvC;QAAA,EAAA,GAAKzY,IAAAA,CAAK6W,cAAAA,EACT,KAAA,CAAA,GAAA,CAAUrQ,KAAAA,EAAAA,CAAAA,EAAUjF,EAAAA,CAAAA,yDAAAA;QAGrB,KAAA,CAAM+V,EAAAA,GAAStX,IAAAA,CAAK8B,QAAAA,CAASyV,SAAAA;QAC7BD,EAAAA,CAAOW,KAAAA,EAAAA,CAAAA,EAAU1W,EAAAA,CAAAA,uBAAAA,EAA8BmX,IAAAA,CAAKC,SAAAA,CAAU3Y,IAAAA,CAAKqK,eAAAA;QAEnE,KAAA,CAAMuO,EAAAA,GAiGR,QAAA,CAA6BvQ,GAAAA,EAAAA,CAC5B;YAAA,KAAA,CAAMiP,CAAAA,GAASjP,GAAAA,CAAIkP,SAAAA,IACbsB,CAAAA,GAAW,GAAA,CAAIC,GAAAA,EACfC,CAAAA,GAAW,GAAA,CAAID,GAAAA;YAGrB,GAAA,EAAK,KAAA,CAAM9G,CAAAA,IAAQ3J,GAAAA,CAAIhF,OAAAA,GAAU2V,UAAAA,GAChC,GAAA,EAAK,KAAA,CAAM9E,GAAAA,IAAQlC,CAAAA,CAAKiH,cAAAA,GAClB/E,GAAAA,CAAKgB,UAAAA,KAGChB,GAAAA,CAAKlM,OAAAA,uBAAwBC,IAAAA,CAAKC,SAAAA,IAC5C6Q,CAAAA,CAAShW,GAAAA,CAAImR,GAAAA,GACboD,CAAAA,CAAO4B,IAAAA,EAAAA,CAAAA,EAAS3X,EAAAA,CAAAA,wDAAAA,MAEhBsX,CAAAA,CAAS9V,GAAAA,CAAImR,GAAAA,KANb6E,CAAAA,CAAShW,GAAAA,CAAImR,GAAAA,GACboD,CAAAA,CAAO4B,IAAAA,EAAAA,CAAAA,EAAS3X,EAAAA,CAAAA,sDAAAA;YAWnB,KAAA,CAAMoB,CAAAA,GAAY0F,GAAAA,CAAIhF,OAAAA,GAAU2J,aAAAA,IAC1BmM,CAAAA,GAAkB,GAAA,CAAIhP,GAAAA;YAC5B,GAAA,CAAK,GAAA,CAAItE,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAIlD,CAAAA,CAAUiD,MAAAA,EAAQC,GAAAA,GAAKsT,CAAAA,CAAgB9M,GAAAA,CAAI1J,CAAAA,CAAUkD,GAAAA,GAAIA,GAAAA;YAI7E,KAAA,CAAMuT,CAAAA,GAAoB,GAAA,CAAIjP,GAAAA,EACxBkP,CAAAA,GAAmB,GAAA,CAAIP,GAAAA,EACvBQ,CAAAA,GAAgB,GAAA,CAAInP,GAAAA;YAC1B,GAAA,EAAK,KAAA,CAAM+J,EAAAA,IAAQoE,KAAAA,CAAMC,IAAAA,CAAKM,CAAAA,EAAW,CACxC;gBAAA,GAAA,CAAIU,CAAAA,GAAUC,EAAAA,CAActF,EAAAA,EAAMiF,CAAAA;gBAGlC,EAAA,EAAIE,CAAAA,CAAiBI,GAAAA,CAAIF,CAAAA,GACxBD,CAAAA,CAAcjN,GAAAA,CAAI6H,EAAAA,EAAMqF,CAAAA;qBADzB,CASA;oBAAA,EAAA,EAAIH,CAAAA,CAAkBK,GAAAA,CAAIvF,EAAAA,CAAKgB,UAAAA,KAAgB,CAC9C;wBAAA,KAAA,CAAM/C,CAAAA,GAAU+B,EAAAA,CAAKgB,UAAAA,IACfwE,CAAAA,GAAavH,CAAAA,CAAQwH,KAAAA;wBAC3BR,CAAAA,CAAgB9M,GAAAA,CAAIqN,CAAAA,EAAYrR,GAAAA,CAAIhF,OAAAA,GAAU2J,aAAAA,GAAgBpH,MAAAA,GAAS,CAAA,GACvEsO,EAAAA,CAAK1H,IAAAA,CAAK2F,CAAAA,EAASuH,CAAAA;oBAAAA,CAEpB;oBAAA,GAAA,EAAK,KAAA,CAAMxW,EAAAA,IAAagR,EAAAA,CAAKhT,cAAAA,GAC5B,EAAA,EAAIkY,CAAAA,CAAkBK,GAAAA,CAAIvW,EAAAA,GAAY,CACrC;wBAAA,KAAA,CAAM0W,CAAAA,GAAe1W,EAAAA,CAAUyW,KAAAA;wBAC/BR,CAAAA,CAAgB9M,GAAAA,CAAIuN,CAAAA,EAAcvR,GAAAA,CAAIhF,OAAAA,GAAU2J,aAAAA,GAAgBpH,MAAAA,GAAS,CAAA,GACzEsO,EAAAA,CAAK1H,IAAAA,CAAKtJ,EAAAA,EAAW0W,CAAAA;oBAAAA,CAKvBL;oBAAAA,CAAAA,GAAUC,EAAAA,CAActF,EAAAA,EAAMiF,CAAAA,GAG9BE,CAAAA,CAAiBtW,GAAAA,CAAIwW,CAAAA,GACrBD,CAAAA,CAAcjN,GAAAA,CAAI6H,EAAAA,EAAMqF,CAAAA,GACxBH,CAAAA,CAAkB/M,GAAAA,CAAI6H,EAAAA,CAAKgB,UAAAA,IAAeqE,CAAAA;oBAC1C,GAAA,EAAK,KAAA,CAAMrW,GAAAA,IAAagR,EAAAA,CAAKhT,cAAAA,GAC5BkY,CAAAA,CAAkB/M,GAAAA,CAAInJ,GAAAA,EAAWqW,CAAAA;gBAAAA,CAAAA;YAAAA,CAKnC;YAAA,GAAA,EAAK,KAAA,CAAMxY,GAAAA,IAAYuX,KAAAA,CAAMC,IAAAA,CAAKa,CAAAA,CAAkBS,IAAAA,IAAS,CAC5D;gBAAA,KAAA,CAAM1Z,CAAAA,GAAc,GAAA,CAAI2Y,GAAAA,CAAI/X,GAAAA,CAAS6G,WAAAA,GAAcf,GAAAA,EAAK7D,CAAAA,GAASA,CAAAA,CAAK9C,YAAAA;;gBACtE,EAAA,EAAyB,CAAA,KAArBC,CAAAA,CAAY2Z,IAAAA,KAAe3Z,CAAAA,CAAYsZ,GAAAA,oBAAiB3P,SAAAA,MAAe3J,CAAAA,CAAYsZ,GAAAA,oBAAiBM,IAAAA,GACvG,KAAA,CAAA,GAAA,CAAUvT,KAAAA,EAAAA,CAAAA,EAAUjF,EAAAA,CAAAA,yEAAAA;YAAAA,CAKtB;YAAA,GAAA,EAAK,KAAA,CAAM2S,GAAAA,IAAQoE,KAAAA,CAAMC,IAAAA,CAAKM,CAAAA,EAAW,CACxC;gBAAA,KAAA,CAAMU,CAAAA,GAAUD,CAAAA,CAAc5V,GAAAA,CAAIwQ,GAAAA,GAC5B/B,CAAAA,GAAU+B,GAAAA,CAAKgB,UAAAA;gBACrB,EAAA,EACCkE,CAAAA,CAAkB1V,GAAAA,CAAIyO,CAAAA,MAAaoH,CAAAA,IACnCrF,GAAAA,CAAKhT,cAAAA,GAAiB2G,IAAAA,EAAMmS,CAAAA,GAASZ,CAAAA,CAAkB1V,GAAAA,CAAIsW,CAAAA,MAAUT,CAAAA;mBAErE,KAAA,CAAA,GAAA,CAAU/S,KAAAA,EAAAA,CAAAA,EAAUjF,EAAAA,CAAAA,oDAAAA;YAAAA,CAKtB;YAAA,GAAA,EAAK,KAAA,CAAM2S,GAAAA,IAAQoE,KAAAA,CAAMC,IAAAA,CAAKQ,CAAAA,EAAW,CACxC;gBAAA,KAAA,CAAM5G,CAAAA,GAAU+B,GAAAA,CAAKgB,UAAAA;gBACrB,EAAA,EAAIkE,CAAAA,CAAkBK,GAAAA,CAAItH,CAAAA,KAAY+B,GAAAA,CAAKhT,cAAAA,GAAiB2G,IAAAA,EAAMmS,CAAAA,GAASZ,CAAAA,CAAkBK,GAAAA,CAAIO,CAAAA;mBAChG,KAAA,CAAA,GAAA,CAAUxT,KAAAA,EAAAA,CAAAA,EAAUjF,EAAAA,CAAAA,sEAAAA;YAAAA,CAItB;YAAA,MAAA,CAAO+X,CAAAA;QAAAA,CAlMmBW,CAAoBja,IAAAA,CAAK8B,QAAAA,GAC5CoY,EAAAA,GAAuB,GAAA,CAAI/P,GAAAA;QAEjC,GAAA,CAAI6J,EAAAA,GAAoC,CAAA;QACQ,CAAA,WAA5ChU,IAAAA,CAAKqK,eAAAA,CAAgB2J,kBAAAA,KAC4B,CAAA,KAAhDhU,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,GAAU8W,UAAAA,GAAavU,MAAAA,GACxC0R,EAAAA,CAAO4B,IAAAA,EAAAA,CAAAA,EAAS3X,EAAAA,CAAAA,qDAAAA,KAEhByS,EAAAA,gBAA4BhU,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,GAAU8W,UAAAA,GAAaE,GAAAA;QAInE,GAAA,EAAK,KAAA,CAAMnG,EAAAA,IAAQoE,KAAAA,CAAMC,IAAAA,CAAKK,EAAAA,CAAiBiB,IAAAA,IAAS,CACvD;YAAA,KAAA,CAAMS,CAAAA,GAAW1B,EAAAA,CAAiBlV,GAAAA,CAAIwQ,EAAAA;YACtC,EAAA,GAAKoG,CAAAA,EAAU,KAAA,CAAA,GAAA,CAAU9T,KAAAA,CAAM,CAAA;YAG/B,EAAA,EAAI0T,EAAAA,CAAqBT,GAAAA,CAAIa,CAAAA,GAAW,CACvCJ;gBAAAA,EAAAA,CAAqB7N,GAAAA,CAAIiO,CAAAA,EAAUJ,EAAAA,CAAqBxW,GAAAA,CAAI4W,CAAAA;gBAC5D,QAAA;YAAA,CAGD;YAAA,KAAA,CAAMnI,CAAAA,GAAU+B,EAAAA,CAAKgB,UAAAA,IACfqF,CAAAA,GAAetY,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKQ,SAAAA,EAGpC6X,CAAAA,GAAcvG,EAAAA,CAAeC,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA;YAAAA,CAAAA,EAAWlU,IAAAA,CAAKqK,eAAAA,EAAAA,CAAiB2J;gBAAAA,kBAAAA,EAAAA,EAAAA;YAAAA,CAAAA;YACpEkG,EAAAA,CAAqB7N,GAAAA,CAAIiO,CAAAA,EAAUE,CAAAA;YAGnC,KAAA,CAAMC,CAAAA,GAAaxY,GAAAA,CAAQ+L,iBAAAA,CAAkBmE,CAAAA;YAC7CsI,CAAAA,CAAWjP,KAAAA,GAAQgP,CAAAA,CAAYvI,UAAAA,EAC/BhQ,GAAAA,CAAQ0B,gBAAAA,CAAiB0I,GAAAA,CAAI8F,CAAAA,EAASoI,CAAAA,CAAa3U,MAAAA,GACnD2U,CAAAA,CAAatM,IAAAA,CAAKwM,CAAAA;YAGlB,GAAA,EAAK,KAAA,CAAM7Z,EAAAA,IAAYsT,EAAAA,CAAK9S,aAAAA,GAAiB,CAC5C;gBAAA,KAAA,CAAM8B,CAAAA,GAAYgR,EAAAA,CAAKvT,YAAAA,CAAaC,EAAAA,GAC9B8Z,CAAAA,GAAezY,GAAAA,CAAQ+L,iBAAAA,CAAkB9K,CAAAA;gBAC/CwX,CAAAA,CAAalP,KAAAA,GAAQgP,CAAAA,CAAY1E,WAAAA,EACjC7T,GAAAA,CAAQ0B,gBAAAA,CAAiB0I,GAAAA,CAAInJ,CAAAA,EAAWqX,CAAAA,CAAa3U,MAAAA,GACrD2U,CAAAA,CAAatM,IAAAA,CAAKyM,CAAAA;YAAAA,CAInB;YAAA,KAAA,CAAM7O,CAAAA,GAASqI,EAAAA,CAAKvT,YAAAA,CAAa,CAAA,WAAayM,SAAAA,MAAepN,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,GAAUyJ,WAAAA,GAAc,CAAA;YAC9F7K,GAAAA,CAAQkM,gBAAAA,CAAiBsL,GAAAA,CAAI5N,CAAAA,KAAS5J,GAAAA,CAAQkM,gBAAAA,CAAiB9B,GAAAA,CAAIR,CAAAA,EAAQ,CAAA,CAAA,GAChF5J,GAAAA,CAAQkM,gBAAAA,CAAiBzK,GAAAA,CAAImI,CAAAA,EAASoC,IAAAA,CAAKuM,CAAAA,CAAYpJ,IAAAA;QAAAA,CAUxD;QAAA,MAAA,CAPAkG,EAAAA,CAAOW,KAAAA,EAAAA,CAAAA,EAAU1W,EAAAA,CAAAA,aAAAA,EAAoBqX,EAAAA,CAAiBkB,IAAAA,CAAAA,YAAAA,IAEtD7X,GAAAA,CAAQ0Y,aAAAA,CAAcpZ,EAAAA,IAAQ,CAC7BqX;YAAAA,gBAAAA,EAAAA,EAAAA;YACAsB,oBAAAA,EAAAA,EAAAA;QAAAA,CAAAA,EAAAA,IAAAA;IAAAA,CAOK9W;IAAAA,KAAAA,CAAMnB,GAAAA,EAAAA,CACZ;QAAA,KAAA,CAAM2Y,CAAAA,GAAmC3Y,GAAAA,CAAQ0Y,aAAAA,CAAcpZ,EAAAA;QAE/D,GAAA,EAAK,KAAA,CAAMyQ,CAAAA,IAAAA,IAAAA,CAAalQ,QAAAA,CAASuB,OAAAA,GAAU2V,UAAAA,GAAc,CACxD;YAAA,KAAA,CAAMrB,CAAAA,GAAU1V,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKuV,MAAAA,CAAQzV,GAAAA,CAAQ4Y,YAAAA,CAAanX,GAAAA,CAAIsO,CAAAA;YACtE,GAAA,CAAK,GAAA,CAAInM,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAImM,CAAAA,CAAKiH,cAAAA,GAAiBrT,MAAAA,EAAQC,CAAAA,GAAK,CACtD;gBAAA,KAAA,CAAMqO,CAAAA,GAAOlC,CAAAA,CAAKiH,cAAAA,GAAiBpT,CAAAA,GAC7B+R,CAAAA,GAAUD,CAAAA,CAAQE,UAAAA,CAAWhS,CAAAA,GAE7ByU,CAAAA,GAAWM,CAAAA,CAAahC,gBAAAA,CAAiBlV,GAAAA,CAAIwQ,CAAAA;gBACnD,EAAA,GAAKoG,CAAAA,EAAU,QAAA;gBAEf,KAAA,CAAME,CAAAA,GAAcI,CAAAA,CAAaV,oBAAAA,CAAqBxW,GAAAA,CAAI4W,CAAAA;gBAC1D1C,CAAAA,CAAQpV,UAAAA,GAAaoV,CAAAA,CAAQpV,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAC3CoV,CAAAA,CAAQpV,UAAAA,CAAWjB,EAAAA,IAAQ,CAC1BgM;oBAAAA,UAAAA,EAAYtL,GAAAA,CAAQyM,wBAAAA,CAAyBhL,GAAAA,CAAI8W,CAAAA,CAAYpJ,IAAAA;oBAC7D1Q,UAAAA,EAAY8Z,CAAAA,CAAYjG,YAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAM3B;QAAA,EAAA,GAAKqG,CAAAA,CAAahC,gBAAAA,CAAiBkB,IAAAA,EAAM,CACxC;YAAA,KAAA,CAAM3X,CAAAA,GAAOF,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA;YAC7BA,CAAAA,CAAK2Y,cAAAA,IAAkB3Y,CAAAA,CAAK2Y,cAAAA,IAAkB,CAAA,CAAA,EAAInW,MAAAA,EAAQoW,CAAAA,GAASA,CAAAA,KAASxZ,EAAAA;eAC5EY,CAAAA,CAAK6Y,kBAAAA,IAAsB7Y,CAAAA,CAAK6Y,kBAAAA,IAAsB,CAAA,CAAA,EAAIrW,MAAAA,EAAQoW,CAAAA,GAASA,CAAAA,KAASxZ,EAAAA;;QAAAA,CAGrF;QAAA,MAAA,CAAA,IAAA;IAAA,CAAA;;SA4GOiY,EAAAA,CAActF,CAAAA,EAAiB+G,CAAAA,EAAAA,CACvC;IAAA,KAAA,CAAMC,CAAAA,GAAe,CAAA,CAAA,EACf/I,CAAAA,GAAU+B,CAAAA,CAAKgB,UAAAA;IAErBgG,CAAAA,CAAajN,IAAAA,CAAKgN,CAAAA,CAASvX,GAAAA,CAAIyO,CAAAA;IAC/B,GAAA,EAAK,KAAA,CAAMjP,EAAAA,IAAagR,CAAAA,CAAKhT,cAAAA,GAC5Bga,CAAAA,CAAajN,IAAAA,CAAKgN,CAAAA,CAASvX,GAAAA,CAAIR,EAAAA;IAGhC,MAAA,CAAOgY,CAAAA,CAAaC,IAAAA,GAAO7N,IAAAA,CAAK,CAAA;AAAA,CA/UpBqJ;AAAAA,EAAAA,CAWWrV,cAAAA,GAAiBC,EAAAA,EAX5BoV,EAAAA,CAiBW/S,aAAAA,GAAgBA,CAAAA;MCnG3BwX,EAAAA;IAoBFrb,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GVrC4B,CAAA,sBUsCjCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,QACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAaC,IAAAA;QAAAA,CAAAA;IAAAA,CAGxBC;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtD+a;YAAAA,KAAAA,EAAO,CAAC;AAAA,iBAAA;AAAG,iBAAA;AAAG,iBAAA;YAAA,CAAA;YACdC,SAAAA,EAAW,CAAA;YACXC,IAAAA,EAAMH,EAAAA,CAAMI,IAAAA,CAAKC,KAAAA;YACjB1G,KAAAA,EAAO,IAAA;YACP2G,cAAAA,EAAgB,CAAA;YAChBC,cAAAA,EAAgB3G,IAAAA,CAAK4G,EAAAA,GAAK,CAAA;QAAA,CAAA;IAAA,CASrBC;IAAAA,QAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYnY,GAAAA,CAAI,CAAA;IAAA,CAIVoY;IAAAA,QAAAA,CAAST,CAAAA,EAAAA,CACf;QAAA,MAAA,CAAA,IAAA,CAAYhP,GAAAA,CAAI,CAAA,QAASgP,CAAAA;IAAAA,CAInBU;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,kBAAkBE,WAAAA,CAAYjc,IAAAA,CAAK6b,QAAAA;IAAAA,CAI7BK;IAAAA,WAAAA,CAAYC,CAAAA,EAAAA,CAClB;QAAA,KAAA,CAAMd,CAAAA,GAAQrb,IAAAA,CAAK6b,QAAAA,GAAWzM,KAAAA;QAE9B,MAAA,kBADWgN,WAAAA,CAAYD,CAAAA,EAAKd,CAAAA,GAAAA,IAAAA,CAChBS,QAAAA,CAAST,CAAAA;IAAAA,CAWfgB;IAAAA,YAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY3Y,GAAAA,CAAI,CAAA;IAAA,CAOV4Y;IAAAA,YAAAA,CAAahB,CAAAA,EAAAA,CACnB;QAAA,MAAA,CAAA,IAAA,CAAYjP,GAAAA,CAAI,CAAA,YAAaiP,CAAAA;IAAAA,CAQvBiB;IAAAA,OAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY7Y,GAAAA,CAAI,CAAA;IAAA,CAIV8Y;IAAAA,OAAAA,CAAQjB,CAAAA,EAAAA,CACd;QAAA,MAAA,CAAA,IAAA,CAAYlP,GAAAA,CAAI,CAAA,OAAQkP,CAAAA;IAAAA,CAYlBkB;IAAAA,QAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY/Y,GAAAA,CAAI,CAAA;IAAA,CAQVgZ;IAAAA,QAAAA,CAAS3H,CAAAA,EAAAA,CACf;QAAA,MAAA,CAAA,IAAA,CAAY1I,GAAAA,CAAI,CAAA,QAAS0I,CAAAA;IAAAA,CAWnB4H;IAAAA,iBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYjZ,GAAAA,CAAI,CAAA;IAAA,CAOVkZ;IAAAA,iBAAAA,CAAkBC,CAAAA,EAAAA,CACxB;QAAA,MAAA,CAAA,IAAA,CAAYxQ,GAAAA,CAAI,CAAA,iBAAkBwQ,CAAAA;IAAAA,CAO5BC;IAAAA,iBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYpZ,GAAAA,CAAI,CAAA;IAAA,CAOVqZ;IAAAA,iBAAAA,CAAkBF,CAAAA,EAAAA,CACxB;QAAA,MAAA,CAAA,IAAA,CAAYxQ,GAAAA,CAAI,CAAA,iBAAkBwQ,CAAAA;IAAAA,CAAAA;;AAxJvBzB,EAAAA,CACE9Z,cAAAA,GVjBoB,CAAA,sBUgBtB8Z,EAAAA,CAUEI,IAAAA,GAA0C,CACvDC;IAAAA,KAAAA,EAAO,CAAA;IACPuB,IAAAA,EAAM,CAAA;IACNC,WAAAA,EAAa,CAAA;AAAA,CAAA;AC7Bf,KAAA,CAAM1b,EAAAA,GXA6B,CAAA;MWqDtB2b,EAAAA;mBAAuBzb,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACnBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzB4b;IAAAA,WAAAA,CAAYpC,CAAAA,GAAO,CAAA,GAAA,CACzB;QAAA,MAAA,CAAA,GAAA,CAAWK,EAAAA,CAAMpb,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA,IAAYgZ,CAAAA;IAAAA,CAIrC/Y;IAAAA,IAAAA,CAAKC,GAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,GAAAA,CAAQC,OAAAA;QAExB,EAAA,GAAKA,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,KAAeN,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,GAAO,MAAA,CAAA,IAAA;QAEhE,KAAA,CAEM6b,EAAAA,IAFUlb,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,EACd6b,MAAAA,IAAW,CAAA,CAAA,EACZvW,GAAAA,EAAKwW,CAAAA,GAAAA,CAAAA;YAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA;YAC7B,KAAA,CAAMC,CAAAA,GAAQtd,IAAAA,CAAKmd,WAAAA,GACjBI,OAAAA,CAAQF,CAAAA,CAAStC,IAAAA,IAAQ,CAAA,GACzByB,OAAAA,CAAQa,CAAAA,CAAS9B,IAAAA;YAanB,MAAA,CAAA,IAAA,CAXuB1N,CAAAA,KAAnBwP,CAAAA,CAAShC,KAAAA,IAAqBiC,CAAAA,CAAMxB,QAAAA,CAASuB,CAAAA,CAAShC,KAAAA,GAAAA,IAAAA,CAC/BxN,CAAAA,KAAvBwP,CAAAA,CAAS/B,SAAAA,IAAyBgC,CAAAA,CAAMhB,YAAAA,CAAae,CAAAA,CAAS/B,SAAAA,GAAAA,IAAAA,CAC3CzN,CAAAA,KAAnBwP,CAAAA,CAAStI,KAAAA,IAAqBuI,CAAAA,CAAMZ,QAAAA,CAASW,CAAAA,CAAStI,KAAAA,GAAAA,IAAAA,CAEpBlH,CAAAA,MAAAA,IAAAA,KAAAA,CAAAA,GAAlCwP,CAAAA,CAASG,IAAAA,IAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAM9B,cAAAA,KAClB4B,CAAAA,CAAMV,iBAAAA,CAAkBS,CAAAA,CAASG,IAAAA,CAAK9B,cAAAA,GAAAA,IAAAA,CAED7N,CAAAA,MAAAA,IAAAA,KAAAA,CAAAA,GAAlCwP,CAAAA,CAASG,IAAAA,IAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAM7B,cAAAA,KAClB2B,CAAAA,CAAMP,iBAAAA,CAAkBM,CAAAA,CAASG,IAAAA,CAAK7B,cAAAA,GAGhC2B,CAAAA;QAAAA,CAAAA;QASR,MAAA,CANApb,GAAAA,CAAQC,IAAAA,CAAKC,KAAAA,CAAOC,OAAAA,EAASC,CAAAA,EAASC,CAAAA,GAAAA,CAChCD;YAAAA,CAAAA,CAAQE,UAAAA,IAAeF,CAAAA,CAAQE,UAAAA,CAAWjB,EAAAA,KAE/CU,GAAAA,CAAQG,KAAAA,CAAMG,CAAAA,EAAWK,YAAAA,CAAarB,EAAAA,EAAM6b,EAAAA,CADvB9a,CAAAA,CAAQE,UAAAA,CAAWjB,EAAAA,EACwB+b,KAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAO3Dla;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAExB,EAAA,EAA6B,CAAA,KAAzBlC,IAAAA,CAAKiD,UAAAA,CAAW6W,IAAAA,EAAY,MAAA,CAAA,IAAA;QAEhC,KAAA,CAAM2D,EAAAA,GAAY,CAAA,CAAA,EACZC,CAAAA,GAAgB,GAAA,CAAIvT,GAAAA;QAE1B,GAAA,EAAK,KAAA,CAAMwT,GAAAA,IAAAA,IAAAA,CAAiB1a,UAAAA,CAAY,CACvC;YAAA,KAAA,CAAMqa,CAAAA,GAAQK,GAAAA,EACRN,CAAAA,GAAW,CAAE9B;gBAAAA,IAAAA,EAAM+B,CAAAA,CAAMf,OAAAA;YAAAA,CAAAA;4BAEhBqB,EAAAA,CAAGN,CAAAA,CAAMzB,QAAAA,IAAY,CAAC;AAAA,iBAAA;AAAG,iBAAA;AAAG,iBAAA;YAAA,CAAA,MAAKwB,CAAAA,CAAShC,KAAAA,GAAQiC,CAAAA,CAAMzB,QAAAA,KAC1C,CAAA,KAAzByB,CAAAA,CAAMjB,YAAAA,OAAsBgB,CAAAA,CAAS/B,SAAAA,GAAYgC,CAAAA,CAAMjB,YAAAA,KACnC,IAAA,IAApBiB,CAAAA,CAAMb,QAAAA,OAAoBY,CAAAA,CAAStI,KAAAA,GAAQuI,CAAAA,CAAMb,QAAAA,KAEjDa,CAAAA,CAAMzU,OAAAA,OAAWwU,CAAAA,CAAStC,IAAAA,GAAOuC,CAAAA,CAAMzU,OAAAA,KAEvCyU,CAAAA,CAAMf,OAAAA,OAAcnB,EAAAA,CAAMI,IAAAA,CAAKwB,IAAAA,KAClCK,CAAAA,CAASG,IAAAA,GAAO,CACf9B;gBAAAA,cAAAA,EAAgB4B,CAAAA,CAAMX,iBAAAA;gBACtBhB,cAAAA,EAAgB2B,CAAAA,CAAMR,iBAAAA;YAAAA,CAAAA,GAIxBW,EAAAA,CAAUxP,IAAAA,CAAKoP,CAAAA,GACfK,CAAAA,CAAcrR,GAAAA,CAAIiR,CAAAA,EAAOG,EAAAA,CAAU7X,MAAAA,GAAS,CAAA;QAAA,CAmB7C;QAAA,MAAA,CAhBA5F,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAC,SAAAA,GACAjB,OAAAA,EAASkB,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAM+Z,CAAAA,GAAQ/Z,CAAAA,CAAKC,YAAAA,CAAoBjC,EAAAA;YACvC,EAAA,EAAI+b,CAAAA,EAAO,CACV;gBAAA,KAAA,CAAM/a,CAAAA,GAAYN,CAAAA,CAAQwB,YAAAA,CAAaC,GAAAA,CAAIH,CAAAA,GACrCjB,CAAAA,GAAUJ,CAAAA,CAAQC,IAAAA,CAAKC,KAAAA,CAAOG,CAAAA;gBACpCD,CAAAA,CAAQE,UAAAA,GAAaF,CAAAA,CAAQE,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAC3CF,CAAAA,CAAQE,UAAAA,CAAWjB,EAAAA,IAAQ,CAAE+b;oBAAAA,KAAAA,EAAOI,CAAAA,CAAcha,GAAAA,CAAI4Z,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAIzDpb,CAAAA,CAAQC,IAAAA,CAAKK,UAAAA,GAAaN,CAAAA,CAAQC,IAAAA,CAAKK,UAAAA,IAAc,CAAA;QAAA,CAAA,EACrDN,CAAAA,CAAQC,IAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,IAAQ,CAAE6b;YAAAA,MAAAA,EAAQK,EAAAA;QAAAA,CAAAA,EAAAA,IAAAA;IAAAA,CAAAA;;AAzF/BP,EAAAA,CAEW5b,cAAAA,GAAiBC,EAAAA;AClCzC,KAAoByc,CAApB,CAAMH,CAAAA,CAAAA,EAAEA,EAAAA,GAAFC,CAAAA,EAAKA,EAAAA,GAALC,CAAAA,EAAQA,EAAAA,EAAAA,CAAAA;MAODE,EAAAA;IAMFle,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GZlCgC,CAAA,0BYmCrCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,YACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtD6d;YAAAA,eAAAA,EAAiB,CAAA;YACjBC,gBAAAA,EAAkB,IAAA;YAClBC,oBAAAA,EAAsB,GAAA,mBAAgBre,IAAAA,CAAKue,KAAAA,EAAO,CAAA;YAElDC,wBAAAA,EAA0B,CAAA;YAC1BC,yBAAAA,EAA2B,IAAA;YAC3BC,6BAAAA,EAA+B,GAAA,mBAAgB1e,IAAAA,CAAKue,KAAAA,EAAO,CAAA;YAE3DI,oBAAAA,EAAsB,CAAA;YACtBC,sBAAAA,EAAwB,IAAA;YACxBC,0BAAAA,EAA4B,GAAA,mBAAgB7e,IAAAA,CAAKue,KAAAA,EAAO,CAAA;QAAA,CAAA;IAAA,CASnDO;IAAAA,kBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYpb,GAAAA,CAAI,CAAA;IAAA,CAIVqb;IAAAA,kBAAAA,CAAmBC,CAAAA,EAAAA,CACzB;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,kBAAmB2S,CAAAA;IAAAA,CAQ7BC;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYC,MAAAA,CAAO,CAAA;IAAA,CAObC;IAAAA,uBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYD,MAAAA,CAAO,CAAA,qBAAsBlf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,yBAA0B,IAAA;IAAA,CAIzEE;IAAAA,mBAAAA,CAAoB1O,CAAAA,EAAAA,CAC1B;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,mBAAoB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA;QAAAA,CAAAA;IAAAA,CAQtD0B;IAAAA,2BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY7b,GAAAA,CAAI,CAAA;IAAA,CAIV8b;IAAAA,2BAAAA,CAA4BR,CAAAA,EAAAA,CAClC;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,2BAA4B2S,CAAAA;IAAAA,CAOtCS;IAAAA,4BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYP,MAAAA,CAAO,CAAA;IAAA,CAObQ;IAAAA,gCAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYR,MAAAA,CAAO,CAAA,8BAA+Blf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,kCAAmC,IAAA;IAAA,CAI3FS;IAAAA,4BAAAA,CAA6BjP,CAAAA,EAAAA,CACnC;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,4BAA6B3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUxB,EAAAA;QAAAA,CAAAA;IAAAA,CAQ/D8B;IAAAA,uBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYlc,GAAAA,CAAI,CAAA;IAAA,CAIVmc;IAAAA,uBAAAA,CAAwBC,CAAAA,EAAAA,CAC9B;QAAA,MAAA,CAAA,IAAA,CAAYzT,GAAAA,CAAI,CAAA,uBAAwByT,CAAAA;IAAAA,CAMlCC;IAAAA,yBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYb,MAAAA,CAAO,CAAA;IAAA,CAObc;IAAAA,6BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYd,MAAAA,CAAO,CAAA,2BAA4Blf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,+BAAgC,IAAA;IAAA,CAIrFe;IAAAA,yBAAAA,CAA0BvP,CAAAA,EAAAA,CAChC;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,yBAA0B3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA,GAAIC,EAAAA,GAAIC,EAAAA;QAAAA,CAAAA;IAAAA,CAAAA;;AAlI/DE,EAAAA,CACE3c,cAAAA,GZ5BwB,CAAA;AaDvC,KAAA,CAAMC,EAAAA,GbCiC,CAAA;Ma2C1B2e,EAAAA;mBAA2Bze,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACvBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzB4e;IAAAA,eAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWlC,EAAAA,CAAUje,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI7BC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAElBke,CAAAA,GAAcle,GAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA;QA2C7C,MAAA,EA5CqBrO,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAElChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAMif,CAAAA,GAAYxgB,IAAAA,CAAKmgB,eAAAA;gBACvBle,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAMif,CAAAA;gBAEpD,KAAA,CAAMC,CAAAA,GAAeH,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAa5C,EAAA,EAAA,IAAA,CATqCsM,CAAAA,KAAjC4S,CAAAA,CAAatC,eAAAA,IAChBqC,CAAAA,CAAUzB,kBAAAA,CAAmB0B,CAAAA,CAAatC,eAAAA,GAAAA,IAAAA,CAEGtQ,CAAAA,KAA1C4S,CAAAA,CAAajC,wBAAAA,IAChBgC,CAAAA,CAAUhB,2BAAAA,CAA4BiB,CAAAA,CAAajC,wBAAAA,GAAAA,IAAAA,CAKd3Q,CAAAA,KAAlC4S,CAAAA,CAAarC,gBAAAA,EAAgC,CAChD;oBAAA,KAAA,CAAMsC,CAAAA,GAAiBD,CAAAA,CAAarC,gBAAAA;oBAEpCoC,CAAAA,CAAUpB,mBAAAA,CADMnd,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeH,CAAAA,CAAUrB,uBAAAA,IAA4BuB,CAAAA;gBAAAA,CAE9D;gBAAA,EAAA,EAAA,IAAA,CAA+C7S,CAAAA,KAA3C4S,CAAAA,CAAahC,yBAAAA,EAAyC,CACzD;oBAAA,KAAA,CAAMiC,CAAAA,GAAiBD,CAAAA,CAAahC,yBAAAA;oBAEpC+B,CAAAA,CAAUb,4BAAAA,CADM1d,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeH,CAAAA,CAAUd,gCAAAA,IAAqCgB,CAAAA;gBAAAA,CAEvE;gBAAA,EAAA,EAAA,IAAA,CAA4C7S,CAAAA,KAAxC4S,CAAAA,CAAa7B,sBAAAA,EAAsC,CACtD;oBAAA,KAAA,CAAM8B,CAAAA,GAAiBD,CAAAA,CAAa7B,sBAAAA;oBAEpC4B,CAAAA,CAAUP,yBAAAA,CADMhe,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeH,CAAAA,CAAUR,6BAAAA,IAAkCU,CAAAA,GAAAA,IAAAA,CACtC7S,CAAAA,KAAzB6S,CAAAA,CAAeZ,KAAAA,IAClBU,CAAAA,CAAUX,uBAAAA,CAAwBa,CAAAA,CAAeZ,KAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAU/C1c;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QA0CxB,MAAA,CAxCAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAML,CAAAA,GAAYK,CAAAA,CAASrd,YAAAA,CAAwBjC,EAAAA;YACnD,EAAA,EAAIif,CAAAA,EAAW,CACd;gBAAA,KAAA,CAAMD,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA;gBAInD,KAAA,CAAMie,CAAAA,GAAgBH,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CACpD4c;oBAAAA,eAAAA,EAAiBqC,CAAAA,CAAU1B,kBAAAA;oBAC3BN,wBAAAA,EAA0BgC,CAAAA,CAAUjB,2BAAAA;gBAAAA,CAAAA;gBAKrC,EAAA,EAAIiB,CAAAA,CAAUvB,mBAAAA,IAAuB,CACpC;oBAAA,KAAA,CAAMvO,CAAAA,GAAU8P,CAAAA,CAAUvB,mBAAAA,IACpB8B,CAAAA,GAAcP,CAAAA,CAAUrB,uBAAAA;oBAC9BsB,CAAAA,CAAarC,gBAAAA,GAAmBnc,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAEvE;gBAAA,EAAA,EAAIP,CAAAA,CAAUf,4BAAAA,IAAgC,CAC7C;oBAAA,KAAA,CAAM/O,CAAAA,GAAU8P,CAAAA,CAAUf,4BAAAA,IACpBsB,CAAAA,GAAcP,CAAAA,CAAUd,gCAAAA;oBAC9Be,CAAAA,CAAahC,yBAAAA,GAA4Bxc,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAEhF;gBAAA,EAAA,EAAIP,CAAAA,CAAUT,yBAAAA,IAA6B,CAC1C;oBAAA,KAAA,CAAMrP,CAAAA,GAAU8P,CAAAA,CAAUT,yBAAAA,IACpBgB,CAAAA,GAAcP,CAAAA,CAAUR,6BAAAA;oBAC9BS,CAAAA,CAAa7B,sBAAAA,GAAyB3c,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA,GAChC,CAAA,KAAxCP,CAAAA,CAAUZ,uBAAAA,OACba,CAAAA,CAAa7B,sBAAAA,CAAuBkB,KAAAA,GAAQU,CAAAA,CAAUZ,uBAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAjGhDM,EAAAA,CAEW5e,cAAAA,GAAiBC,EAAAA;MCrC5B0f,EAAAA;IAMFlhB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GddwC,CAAA,kCce7CD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,mBACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CAAE4gB;YAAAA,gBAAAA,EAAkB,CAAA;QAAA,CAAA;IAAA,CAQrEC;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYzd,GAAAA,CAAI,CAAA;IAAA,CAIV0d;IAAAA,mBAAAA,CAAoBC,CAAAA,EAAAA,CAC1B;QAAA,MAAA,CAAA,IAAA,CAAYhV,GAAAA,CAAI,CAAA,mBAAoBgV,CAAAA;IAAAA,CAAAA;;AA3BzBJ,EAAAA,CACE3f,cAAAA,GdRgC,CAAA;AeF/C,KAAA,CAAMC,EAAAA,GfEyC,CAAA;Me6ClC+f,EAAAA;mBAAkC7f,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CAC9BxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBggB;IAAAA,sBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWN,EAAAA,CAAiBjhB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIpCC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CAkBX;QAAA,MAAA,EAjBgBA,CAAAA,CAAQC,OAAAA,CACKC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAClChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAM2f,CAAAA,GAAmBlhB,IAAAA,CAAKuhB,sBAAAA;gBAC9Btf,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAM2f,CAAAA;gBAEpD,KAAA,CAAMM,CAAAA,GAAsBlB,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAAAA,IAAAA,CAINsM,CAAAA,KAAzC2T,CAAAA,CAAoBN,gBAAAA,IACvBA,CAAAA,CAAiBE,mBAAAA,CAAoBI,CAAAA,CAAoBN,gBAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAStD9d;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAoBxB,MAAA,CAlBAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAMK,CAAAA,GAAmBL,CAAAA,CAASrd,YAAAA,CAA+BjC,EAAAA;YACjE,EAAA,EAAI2f,CAAAA,EAAkB,CACrB;gBAAA,KAAA,CAAMX,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,CAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAInD8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CAC9B2f;oBAAAA,gBAAAA,EAAkBA,CAAAA,CAAiBC,mBAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAhD5BG,EAAAA,CAEWhgB,cAAAA,GAAiBC,EAAAA;MCzC5BkgB,EAAAA;IAMF1hB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GhBZ0B,CAAA,oBgBa/BD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,MACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CAAEohB;YAAAA,GAAAA,EAAK,CAAA;QAAA,CAAA;IAAA,CAQxDC;IAAAA,MAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYje,GAAAA,CAAI,CAAA;IAAA,CAIVke;IAAAA,MAAAA,CAAOF,CAAAA,EAAAA,CACb;QAAA,MAAA,CAAA,IAAA,CAAYrV,GAAAA,CAAI,CAAA,MAAOqV,CAAAA;IAAAA,CAAAA;;AA3BZD,EAAAA,CACEngB,cAAAA,GhBNkB,CAAA;AiBHjC,KAAA,CAAMC,EAAAA,GjBG2B,CAAA;MiBgCpBsgB,EAAAA;mBAAqBpgB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACjBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBugB;IAAAA,SAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWL,EAAAA,CAAIzhB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIvBC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CAkBX;QAAA,MAAA,EAjBgBA,CAAAA,CAAQC,OAAAA,CACKC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAClChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAMmgB,CAAAA,GAAM1hB,IAAAA,CAAK8hB,SAAAA;gBACjB7f,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAMmgB,CAAAA;gBAEpD,KAAA,CAAMK,CAAAA,GAASzB,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAAAA,IAAAA,CAInBsM,CAAAA,KAAfkU,CAAAA,CAAOL,GAAAA,IACVA,CAAAA,CAAIE,MAAAA,CAAOG,CAAAA,CAAOL,GAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CASfte;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAoBxB,MAAA,CAlBAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAMa,CAAAA,GAAMb,CAAAA,CAASrd,YAAAA,CAAkBjC,EAAAA;YACvC,EAAA,EAAImgB,CAAAA,EAAK,CACR;gBAAA,KAAA,CAAMnB,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,CAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAInD8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CAC9BmgB;oBAAAA,GAAAA,EAAKA,CAAAA,CAAIC,MAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAhDFE,EAAAA,CAEWvgB,cAAAA,GAAiBC,EAAAA;ACjBzC,KAAuByc,CAAvB,CAAA,CAAA,CAAA,EAAQH,EAAAA,GAAAA,CAAAA,EAAGC,EAAAA,GAAAA,CAAAA,EAAGC,EAAAA,GAARiE,CAAAA,EAAWA,EAAAA,EAAAA,CAAAA;MAOJC,EAAAA;IAMFliB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GlB9B8C,CAAA,sCkB+BnDD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,wBACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtD4hB;YAAAA,aAAAA,EAAe,CAAC;AAAA,iBAAA;AAAK,iBAAA;AAAK,iBAAA;AAAK,iBAAA;YAAA,CAAA;YAC/BC,cAAAA,EAAgB,IAAA;YAChBC,kBAAAA,EAAoB,GAAA,mBAAgBpiB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;YAChD8D,cAAAA,EAAgB,CAAC;AAAA,iBAAA;AAAK,iBAAA;AAAK,iBAAA;YAAA,CAAA;YAC3BC,gBAAAA,EAAkB,CAAA;YAClBC,yBAAAA,EAA2B,IAAA;YAC3BC,6BAAAA,EAA+B,GAAA,mBAAgBxiB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;QAAA,CAAA;IAAA,CAStDkE;IAAAA,gBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY/e,GAAAA,CAAI,CAAA;IAAA,CAIVgf;IAAAA,gBAAAA,CAAiB1D,CAAAA,EAAAA,CACvB;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,gBAAiB2S,CAAAA;IAAAA,CAI3B2D;IAAAA,aAAAA,GAAAA,CACN;QAAA,MAAA,kBAAkB1G,WAAAA,CAAYjc,IAAAA,CAAKyiB,gBAAAA;IAAAA,CAI7BG;IAAAA,aAAAA,CAAczG,CAAAA,EAAAA,CACpB;QAAA,KAAA,CAAM6C,CAAAA,GAAShf,IAAAA,CAAKyiB,gBAAAA,GAAmBrT,KAAAA;QACvC,MAAA,CAAA,IAAA,CAAYsT,gBAAAA,kBAA4BtG,WAAAA,CAAYD,CAAAA,EAAK6C,CAAAA;IAAAA,CAOnD6D;IAAAA,iBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY3D,MAAAA,CAAO,CAAA;IAAA,CAOb4D;IAAAA,qBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY5D,MAAAA,CAAO,CAAA,mBAAoBlf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,uBAAwB,IAAA;IAAA,CAIrE6D;IAAAA,iBAAAA,CAAkBrS,CAAAA,EAAAA,CACxB;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,iBAAkB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA,GAAIC,EAAAA,GAAIC,EAAAA,GAAIiE,EAAAA;QAAAA,CAAAA;IAAAA,CAQhEgB;IAAAA,iBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYtf,GAAAA,CAAI,CAAA;IAAA,CAIVuf;IAAAA,iBAAAA,CAAkBjE,CAAAA,EAAAA,CACxB;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,iBAAkB2S,CAAAA;IAAAA,CAQ5BkE;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYxf,GAAAA,CAAI,CAAA;IAAA,CAIVyf;IAAAA,mBAAAA,CAAoBnE,CAAAA,EAAAA,CAC1B;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,mBAAoB2S,CAAAA;IAAAA,CAQ9BoE;IAAAA,4BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYlE,MAAAA,CAAO,CAAA;IAAA,CAObmE;IAAAA,gCAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYnE,MAAAA,CAAO,CAAA,8BAA+Blf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,kCAAmC,IAAA;IAAA,CAI3FoE;IAAAA,4BAAAA,CAA6B5S,CAAAA,EAAAA,CACnC;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,4BAA6B3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA,GAAIC,EAAAA,GAAIC,EAAAA,GAAIiE,EAAAA;QAAAA,CAAAA;IAAAA,CAAAA;;AArHtEC,EAAAA,CACE3gB,cAAAA,GlBxBsC,CAAA;AmBJrD,KAAA,CAAMC,EAAAA,GnBI+C,CAAA;MmBwCxCgiB,EAAAA;mBAAuC9hB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACnCxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBiiB;IAAAA,2BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWvB,EAAAA,CAAsBjiB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIzCC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAElBke,CAAAA,GAAcle,GAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA;QAqC7C,MAAA,EAtCqBrO,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAElChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAMkiB,CAAAA,GAAYzjB,IAAAA,CAAKwjB,2BAAAA;gBACvBvhB,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAMkiB,CAAAA;gBAEpD,KAAA,CAAMC,CAAAA,GAAepD,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAgB5C,EAAA,EAAA,IAAA,CAZmCsM,CAAAA,KAA/B6V,CAAAA,CAAaxB,aAAAA,IAChBuB,CAAAA,CAAUf,gBAAAA,CAAiBgB,CAAAA,CAAaxB,aAAAA,GAAAA,IAAAA,CAELrU,CAAAA,KAAhC6V,CAAAA,CAAarB,cAAAA,IAChBoB,CAAAA,CAAUR,iBAAAA,CAAkBS,CAAAA,CAAarB,cAAAA,GAAAA,IAAAA,CAEJxU,CAAAA,KAAlC6V,CAAAA,CAAapB,gBAAAA,IAChBmB,CAAAA,CAAUN,mBAAAA,CAAoBO,CAAAA,CAAapB,gBAAAA,GAAAA,IAAAA,CAKRzU,CAAAA,KAAhC6V,CAAAA,CAAavB,cAAAA,EAA8B,CAC9C;oBAAA,KAAA,CAAMzB,CAAAA,GAAiBgD,CAAAA,CAAavB,cAAAA;oBAEpCsB,CAAAA,CAAUV,iBAAAA,CADM9gB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAe8C,CAAAA,CAAUX,qBAAAA,IAA0BpC,CAAAA;gBAAAA,CAE5D;gBAAA,EAAA,EAAA,IAAA,CAA+C7S,CAAAA,KAA3C6V,CAAAA,CAAanB,yBAAAA,EAAyC,CACzD;oBAAA,KAAA,CAAM7B,CAAAA,GAAiBgD,CAAAA,CAAanB,yBAAAA;oBAEpCkB,CAAAA,CAAUH,4BAAAA,CADMrhB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAe8C,CAAAA,CAAUJ,gCAAAA,IAAqC3C,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CASnEtd;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAmCxB,MAAA,CAjCAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAM4C,CAAAA,GAAY5C,CAAAA,CAASrd,YAAAA,CAAoCjC,EAAAA;YAC/D,EAAA,EAAIkiB,CAAAA,EAAW,CACd;gBAAA,KAAA,CAAMlD,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA;gBAInD,KAAA,CAAMkhB,CAAAA,GAAgBpD,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CACpD2gB;oBAAAA,aAAAA,EAAeuB,CAAAA,CAAUhB,gBAAAA;oBACzBJ,cAAAA,EAAgBoB,CAAAA,CAAUT,iBAAAA;oBAC1BV,gBAAAA,EAAkBmB,CAAAA,CAAUP,mBAAAA;gBAAAA,CAAAA;gBAK7B,EAAA,EAAIO,CAAAA,CAAUZ,iBAAAA,IAAqB,CAClC;oBAAA,KAAA,CAAMnS,CAAAA,GAAU+S,CAAAA,CAAUZ,iBAAAA,IACpB9B,CAAAA,GAAc0C,CAAAA,CAAUX,qBAAAA;oBAC9BY,CAAAA,CAAavB,cAAAA,GAAiBlgB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAErE;gBAAA,EAAA,EAAI0C,CAAAA,CAAUL,4BAAAA,IAAgC,CAC7C;oBAAA,KAAA,CAAM1S,CAAAA,GAAU+S,CAAAA,CAAUL,4BAAAA,IACpBrC,CAAAA,GAAc0C,CAAAA,CAAUJ,gCAAAA;oBAC9BK,CAAAA,CAAanB,yBAAAA,GAA4BtgB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AArFxEwC,EAAAA,CAEWjiB,cAAAA,GAAiBC,EAAAA;AC5BzC,KAAuByc,CAAvB,CAAA,CAAA,CAAA,EAAQH,EAAAA,GAAAA,CAAAA,EAAGC,EAAAA,GAAAA,CAAAA,EAAGC,EAAAA,GAAAA,CAAAA,EAAGiE,EAAAA,EAAAA,CAAAA;MAOJ2B,EAAAA;IAMF5jB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GpB3B4B,CAAA,sBoB4BjCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,QACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtDsjB;YAAAA,gBAAAA,EAAkB,CAAC;AAAA,iBAAA;AAAK,iBAAA;AAAK,iBAAA;YAAA,CAAA;YAC7BC,iBAAAA,EAAmB,IAAA;YACnBC,qBAAAA,EAAuB,GAAA,mBAAgB9jB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;YACnDwF,oBAAAA,EAAsB,CAAA;YACtBC,qBAAAA,EAAuB,IAAA;YACvBC,yBAAAA,EAA2B,GAAA,mBAAgBjkB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;QAAA,CAAA;IAAA,CASlD2F;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYxgB,GAAAA,CAAI,CAAA;IAAA,CAIVygB;IAAAA,gBAAAA,GAAAA,CACN;QAAA,MAAA,kBAAkBlI,WAAAA,CAAYjc,IAAAA,CAAKkkB,mBAAAA;IAAAA,CAI7BE;IAAAA,mBAAAA,CAAoBpF,CAAAA,EAAAA,CAC1B;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,mBAAoB2S,CAAAA;IAAAA,CAI9BqF;IAAAA,gBAAAA,CAAiBlI,CAAAA,EAAAA,CACvB;QAAA,KAAA,CAAM6C,CAAAA,GAAShf,IAAAA,CAAKkkB,mBAAAA,GAAsB9U,KAAAA;QAC1C,MAAA,CAAA,IAAA,CAAY/C,GAAAA,CAAI,CAAA,oCAA+B+P,WAAAA,CAAYD,CAAAA,EAAK6C,CAAAA;IAAAA,CAM1DsF;IAAAA,oBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYpF,MAAAA,CAAO,CAAA;IAAA,CAObqF;IAAAA,wBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYrF,MAAAA,CAAO,CAAA,sBAAuBlf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,0BAA2B,IAAA;IAAA,CAI3EsF;IAAAA,oBAAAA,CAAqB9T,CAAAA,EAAAA,CAC3B;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,oBAAqB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA,GAAIC,EAAAA,GAAIC,EAAAA;QAAAA,CAAAA;IAAAA,CAQ/D0G;IAAAA,uBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY/gB,GAAAA,CAAI,CAAA;IAAA,CAIVghB;IAAAA,uBAAAA,CAAwB1F,CAAAA,EAAAA,CAC9B;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,uBAAwB2S,CAAAA;IAAAA,CAOlC2F;IAAAA,wBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYzF,MAAAA,CAAO,CAAA;IAAA,CAOb0F;IAAAA,4BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY1F,MAAAA,CAAO,CAAA,0BAA2Blf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,8BAA+B,IAAA;IAAA,CAOnF2F;IAAAA,wBAAAA,CAAyBnU,CAAAA,EAAAA,CAC/B;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,wBAAyB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAU0C,EAAAA;QAAAA,CAAAA;IAAAA,CAAAA;;AAvGtD2B,EAAAA,CACEriB,cAAAA,GpBrBoB,CAAA;AqBLnC,KAAA,CAAMC,EAAAA,GrBK6B,CAAA;MqByCtBujB,EAAAA;mBAAuBrjB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACnBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBwjB;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWpB,EAAAA,CAAM3jB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIzBC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAElBke,CAAAA,GAAcle,GAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA;QAkC7C,MAAA,EAnCqBrO,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAElChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAMyjB,CAAAA,GAAQhlB,IAAAA,CAAK+kB,WAAAA;gBACnB9iB,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAMyjB,CAAAA;gBAEpD,KAAA,CAAMC,CAAAA,GAAW3E,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAaxC,EAAA,EAAA,IAAA,CATkCsM,CAAAA,KAA9BoX,CAAAA,CAASrB,gBAAAA,IACZoB,CAAAA,CAAMZ,mBAAAA,CAAoBa,CAAAA,CAASrB,gBAAAA,GAAAA,IAAAA,CAEE/V,CAAAA,KAAlCoX,CAAAA,CAASlB,oBAAAA,IACZiB,CAAAA,CAAMN,uBAAAA,CAAwBO,CAAAA,CAASlB,oBAAAA,GAAAA,IAAAA,CAKLlW,CAAAA,KAA/BoX,CAAAA,CAASpB,iBAAAA,EAAiC,CAC7C;oBAAA,KAAA,CAAMnD,CAAAA,GAAiBuE,CAAAA,CAASpB,iBAAAA;oBAEhCmB,CAAAA,CAAMR,oBAAAA,CADUviB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeqE,CAAAA,CAAMT,wBAAAA,IAA6B7D,CAAAA;gBAAAA,CAE3D;gBAAA,EAAA,EAAA,IAAA,CAAuC7S,CAAAA,KAAnCoX,CAAAA,CAASjB,qBAAAA,EAAqC,CACjD;oBAAA,KAAA,CAAMtD,CAAAA,GAAiBuE,CAAAA,CAASjB,qBAAAA;oBAEhCgB,CAAAA,CAAMH,wBAAAA,CADU5iB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeqE,CAAAA,CAAMJ,4BAAAA,IAAiClE,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAS3Dtd;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAkCxB,MAAA,CAhCAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAMmE,CAAAA,GAAQnE,CAAAA,CAASrd,YAAAA,CAAoBjC,EAAAA;YAC3C,EAAA,EAAIyjB,CAAAA,EAAO,CACV;gBAAA,KAAA,CAAMzE,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA;gBAInD,KAAA,CAAMyiB,CAAAA,GAAY3E,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CAChDqiB;oBAAAA,gBAAAA,EAAkBoB,CAAAA,CAAMd,mBAAAA;oBACxBH,oBAAAA,EAAsBiB,CAAAA,CAAMP,uBAAAA;gBAAAA,CAAAA;gBAK7B,EAAA,EAAIO,CAAAA,CAAMV,oBAAAA,IAAwB,CACjC;oBAAA,KAAA,CAAM5T,CAAAA,GAAUsU,CAAAA,CAAMV,oBAAAA,IAChBvD,CAAAA,GAAciE,CAAAA,CAAMT,wBAAAA;oBAC1BU,CAAAA,CAASpB,iBAAAA,GAAoB5hB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAEpE;gBAAA,EAAA,EAAIiE,CAAAA,CAAML,wBAAAA,IAA4B,CACrC;oBAAA,KAAA,CAAMjU,CAAAA,GAAUsU,CAAAA,CAAML,wBAAAA,IAChB5D,CAAAA,GAAciE,CAAAA,CAAMJ,4BAAAA;oBAC1BK,CAAAA,CAASjB,qBAAAA,GAAwB/hB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAjFhE+D,EAAAA,CAEWxjB,cAAAA,GAAiBC,EAAAA;AC9BzC,KAAuByc,CAAvB,CAAA,CAAA,CAAA,EAAQH,EAAAA,GAAAA,CAAAA,EAAGC,EAAAA,GAAAA,CAAAA,EAAGC,EAAAA,GAAAA,CAAAA,EAAGiE,EAAAA,EAAAA,CAAAA;MAOJkD,EAAAA;IAMFnlB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GtB1B+B,CAAA,yBsB2BpCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,WACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtD+hB;YAAAA,cAAAA,EAAgB,CAAA;YAChB8C,eAAAA,EAAiB,IAAA;YACjBC,mBAAAA,EAAqB,GAAA,mBAAgBplB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;YACjD8G,mBAAAA,EAAqB,CAAC;AAAA,iBAAA;AAAK,iBAAA;AAAK,iBAAA;YAAA,CAAA;YAChCC,oBAAAA,EAAsB,IAAA;YACtBC,wBAAAA,EAA0B,GAAA,mBAAgBvlB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;QAAA,CAAA;IAAA,CASjDyE;IAAAA,iBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYtf,GAAAA,CAAI,CAAA;IAAA,CAIVuf;IAAAA,iBAAAA,CAAkBjE,CAAAA,EAAAA,CACxB;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,iBAAkB2S,CAAAA;IAAAA,CAI5BwG;IAAAA,sBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY9hB,GAAAA,CAAI,CAAA;IAAA,CAIV+hB;IAAAA,sBAAAA,CAAuBzG,CAAAA,EAAAA,CAC7B;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,sBAAuB2S,CAAAA;IAAAA,CAIjC0G;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,kBAAkBzJ,WAAAA,CAAYjc,IAAAA,CAAKwlB,sBAAAA;IAAAA,CAI7BG;IAAAA,mBAAAA,CAAoBxJ,CAAAA,EAAAA,CAC1B;QAAA,KAAA,CAAM6C,CAAAA,GAAShf,IAAAA,CAAKwlB,sBAAAA,GAAyBpW,KAAAA;QAC7C,MAAA,CAAA,IAAA,CAAY/C,GAAAA,CAAI,CAAA,uCAAkC+P,WAAAA,CAAYD,CAAAA,EAAK6C,CAAAA;IAAAA,CAW7D4G;IAAAA,kBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY1G,MAAAA,CAAO,CAAA;IAAA,CAOb2G;IAAAA,sBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY3G,MAAAA,CAAO,CAAA,oBAAqBlf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,wBAAyB,IAAA;IAAA,CAIvE4G;IAAAA,kBAAAA,CAAmBpV,CAAAA,EAAAA,CACzB;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,kBAAmB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAU0C,EAAAA;QAAAA,CAAAA;IAAAA,CAUrD+D;IAAAA,uBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY7G,MAAAA,CAAO,CAAA;IAAA,CAOb8G;IAAAA,2BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY9G,MAAAA,CAAO,CAAA,yBAA0Blf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,6BAA8B,IAAA;IAAA,CAIjF+G;IAAAA,uBAAAA,CAAwBvV,CAAAA,EAAAA,CAC9B;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,uBAAwB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA,GAAIC,EAAAA,GAAIC,EAAAA;QAAAA,CAAAA;IAAAA,CAAAA;;AAxG7DmH,EAAAA,CACE5jB,cAAAA,GtBpBuB,CAAA;AuBNtC,KAAA,CAAMC,EAAAA,GvBMgC,CAAA;MuBoCzB2kB,EAAAA;mBAA0BzkB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACtBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzB4kB;IAAAA,cAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWjB,EAAAA,CAASllB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI5BC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAElBke,CAAAA,GAAcle,GAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA;QAkC7C,MAAA,EAnCqBrO,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAElChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAM6kB,CAAAA,GAAWpmB,IAAAA,CAAKmmB,cAAAA;gBACtBlkB,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAM6kB,CAAAA;gBAEpD,KAAA,CAAMC,CAAAA,GAAc/F,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAa3C,EAAA,EAAA,IAAA,CATmCsM,CAAAA,KAA/BwY,CAAAA,CAAYhE,cAAAA,IACf+D,CAAAA,CAASnD,iBAAAA,CAAkBoD,CAAAA,CAAYhE,cAAAA,GAAAA,IAAAA,CAEAxU,CAAAA,KAApCwY,CAAAA,CAAYhB,mBAAAA,IACfe,CAAAA,CAASX,sBAAAA,CAAuBY,CAAAA,CAAYhB,mBAAAA,GAAAA,IAAAA,CAKTxX,CAAAA,KAAhCwY,CAAAA,CAAYlB,eAAAA,EAA+B,CAC9C;oBAAA,KAAA,CAAMzE,CAAAA,GAAiB2F,CAAAA,CAAYlB,eAAAA;oBAEnCiB,CAAAA,CAASN,kBAAAA,CADO7jB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeyF,CAAAA,CAASP,sBAAAA,IAA2BnF,CAAAA;gBAAAA,CAE5D;gBAAA,EAAA,EAAA,IAAA,CAAyC7S,CAAAA,KAArCwY,CAAAA,CAAYf,oBAAAA,EAAoC,CACnD;oBAAA,KAAA,CAAM5E,CAAAA,GAAiB2F,CAAAA,CAAYf,oBAAAA;oBAEnCc,CAAAA,CAASH,uBAAAA,CADOhkB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeyF,CAAAA,CAASJ,2BAAAA,IAAgCtF,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAS7Dtd;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAsCxB,MAAA,CApCAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAMuF,CAAAA,GAAWvF,CAAAA,CAASrd,YAAAA,CAAuBjC,EAAAA;YACjD,EAAA,EAAI6kB,CAAAA,EAAU,CACb;gBAAA,KAAA,CAAM7F,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA;gBAInD,KAAA,CAAM6jB,CAAAA,GAAe/F,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CAAA;gBAAA,CAAA;gBAWpD,EAAA,EATqC,CAAA,KAAjC6kB,CAAAA,CAASpD,iBAAAA,OACZqD,CAAAA,CAAYhE,cAAAA,GAAiB+D,CAAAA,CAASpD,iBAAAA,qBAExBpF,EAAAA,CAAGwI,CAAAA,CAASZ,sBAAAA,IAA0B,CAAC;AAAA,qBAAA;AAAG,qBAAA;AAAG,qBAAA;gBAAA,CAAA,MAC3Da,CAAAA,CAAYhB,mBAAAA,GAAsBe,CAAAA,CAASZ,sBAAAA,KAKxCY,CAAAA,CAASR,kBAAAA,IAAsB,CAClC;oBAAA,KAAA,CAAMlV,CAAAA,GAAU0V,CAAAA,CAASR,kBAAAA,IACnB7E,CAAAA,GAAcqF,CAAAA,CAASP,sBAAAA;oBAC7BQ,CAAAA,CAAYlB,eAAAA,GAAkBljB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAErE;gBAAA,EAAA,EAAIqF,CAAAA,CAASL,uBAAAA,IAA2B,CACvC;oBAAA,KAAA,CAAMrV,CAAAA,GAAU0V,CAAAA,CAASL,uBAAAA,IACnBhF,CAAAA,GAAcqF,CAAAA,CAASJ,2BAAAA;oBAC7BK,CAAAA,CAAYf,oBAAAA,GAAuBrjB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AArFlEmF,EAAAA,CAEW5kB,cAAAA,GAAiBC,EAAAA;AC/BzC,KAAcyc,CAAd,CAAA,CAAA,CAAA,EAAQH,EAAAA,EAAAA,CAAAA;MAOKyI,EAAAA;IAMFvmB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GxBpBmC,CAAA,6BwBqBxCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,eACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtDimB;YAAAA,kBAAAA,EAAoB,CAAA;YACpBC,mBAAAA,EAAqB,IAAA;YACrBC,uBAAAA,EAAyB,GAAA,mBAAgBzmB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;QAAA,CAAA;IAAA,CAShDmI;IAAAA,qBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYhjB,GAAAA,CAAI,CAAA;IAAA,CAIVijB;IAAAA,qBAAAA,CAAsB3H,CAAAA,EAAAA,CAC5B;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,qBAAsB2S,CAAAA;IAAAA,CAShC4H;IAAAA,sBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY1H,MAAAA,CAAO,CAAA;IAAA,CAOb2H;IAAAA,0BAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY3H,MAAAA,CAAO,CAAA,wBAAyBlf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,4BAA6B,IAAA;IAAA,CAI/E4H;IAAAA,sBAAAA,CAAuBpW,CAAAA,EAAAA,CAC7B;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,sBAAuB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUzB,EAAAA;QAAAA,CAAAA;IAAAA,CAAAA;;AAtDpDyI,EAAAA,CACEhlB,cAAAA,GxBd2B,CAAA;AyBP1C,KAAA,CAAMC,EAAAA,GzBOoC,CAAA;MyBkC7BwlB,EAAAA;mBAA8BtlB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CAC1BxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBylB;IAAAA,kBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWV,EAAAA,CAAatmB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIhCC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAElBke,CAAAA,GAAcle,GAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA;QAyB7C,MAAA,EA1BqBrO,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAElChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAM0lB,CAAAA,GAAejnB,IAAAA,CAAKgnB,kBAAAA;gBAC1B/kB,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAM0lB,CAAAA;gBAEpD,KAAA,CAAMC,CAAAA,GAAkB5G,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAU/C,EAAA,EAAA,IAAA,CAN2CsM,CAAAA,KAAvCqZ,CAAAA,CAAgBX,kBAAAA,IACnBU,CAAAA,CAAaN,qBAAAA,CAAsBO,CAAAA,CAAgBX,kBAAAA,GAAAA,IAAAA,CAKR1Y,CAAAA,KAAxCqZ,CAAAA,CAAgBV,mBAAAA,EAAmC,CACtD;oBAAA,KAAA,CAAM9F,CAAAA,GAAiBwG,CAAAA,CAAgBV,mBAAAA;oBAEvCS,CAAAA,CAAaH,sBAAAA,CADG7kB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAesG,CAAAA,CAAaJ,0BAAAA,IAA+BnG,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAShEtd;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QA4BxB,MAAA,CA1BAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAMoG,CAAAA,GAAepG,CAAAA,CAASrd,YAAAA,CAA2BjC,EAAAA;YACzD,EAAA,EAAI0lB,CAAAA,EAAc,CACjB;gBAAA,KAAA,CAAM1G,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA;gBAInD,KAAA,CAAM0kB,CAAAA,GAAmB5G,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CACvDglB;oBAAAA,kBAAAA,EAAoBU,CAAAA,CAAaP,qBAAAA;gBAAAA,CAAAA;gBAKlC,EAAA,EAAIO,CAAAA,CAAaL,sBAAAA,IAA0B,CAC1C;oBAAA,KAAA,CAAMlW,CAAAA,GAAUuW,CAAAA,CAAaL,sBAAAA,IACvB7F,CAAAA,GAAckG,CAAAA,CAAaJ,0BAAAA;oBACjCK,CAAAA,CAAgBV,mBAAAA,GAAsBvkB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAlErEgG,EAAAA,CAEWzlB,cAAAA,GAAiBC,EAAAA;MCtC5B4lB,EAAAA;IAMFpnB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,G1BJ4B,CAAA,sB0BKjCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,QACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAAAA;;AATtBiJ,EAAAA,CACE7lB,cAAAA,G1BEoB,CAAA;A2BRnC,KAAA,CAAMC,EAAAA,G3BQ6B,CAAA;M2BgCtB6lB,EAAAA;mBAAuB3lB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACnBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzB8lB;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWF,EAAAA,CAAMnnB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAIzBC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CAQX;QAAA,MAAA,EAPqBA,CAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAC1Che,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAC9BD;YAAAA,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,KACpDU,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAMvB,IAAAA,CAAKqnB,WAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAQrDjkB;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,CAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAcxB,MAAA,CAZAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,EAAA,EAAIA,CAAAA,CAASrd,YAAAA,CAAoBjC,EAAAA,GAAO,CACvC;gBAAA,KAAA,CAAMgf,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,CAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA,EACnD8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CAAA;gBAAA,CAAA;YAAA,CAAA;QAAA,CAAA,GAAA,IAAA;IAAA,CAAA;;AAjCvB6lB,EAAAA,CAEW9lB,cAAAA,GAAiBC,EAAAA;MChC5B+lB,EAAAA;IAMFvnB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,G5BP+B,CAAA,yB4BQpCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,UACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAAC;YAAA,CAAA;QAAA,CAAA;IAAA,CAGXG;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CAAEugB;YAAAA,QAAAA,EAAU,IAAA;YAAM0G,QAAAA,EAAU,CAAA,CAAA;QAAA,CAAA;IAAA,CAI7EC;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYtI,MAAAA,CAAO,CAAA;IAAA,CAIbuI;IAAAA,WAAAA,CAAY5G,CAAAA,EAAAA,CAClB;QAAA,MAAA,CAAA,IAAA,CAAYxB,MAAAA,CAAO,CAAA,WAAYwB,CAAAA;IAAAA,CAIzB6G;IAAAA,UAAAA,CAAWC,CAAAA,EAAAA,CACjB;QAAA,MAAA,CAAA,IAAA,CAAYC,MAAAA,CAAO,CAAA,WAAYD,CAAAA;IAAAA,CAIzBE;IAAAA,aAAAA,CAAcF,CAAAA,EAAAA,CACpB;QAAA,MAAA,CAAA,IAAA,CAAYG,SAAAA,CAAU,CAAA,WAAYH,CAAAA;IAAAA,CAI5BI;IAAAA,YAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYC,QAAAA,CAAS,CAAA;IAAA,CAAA;;AAtCVV,EAAAA,CACEhmB,cAAAA,G5BDuB,CAAA;M6BDzB2mB,EAAAA;IAMFloB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,G7BN+B,CAAA,yB6BOpCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,cACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa0J,SAAAA;QAAAA,CAAAA;IAAAA,CAGxBxJ;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CAAE4nB;YAAAA,QAAAA,EAAU,CAAA,CAAA;QAAA,CAAA;IAAA,CAI7DC;IAAAA,UAAAA,CAAWC,CAAAA,EAAAA,CACjB;QAAA,MAAA,CAAA,IAAA,CAAYR,MAAAA,CAAO,CAAA,WAAYQ,CAAAA;IAAAA,CAIzBC;IAAAA,aAAAA,CAAcD,CAAAA,EAAAA,CACpB;QAAA,MAAA,CAAA,IAAA,CAAYN,SAAAA,CAAU,CAAA,WAAYM,CAAAA;IAAAA,CAI5BE;IAAAA,YAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYN,QAAAA,CAAS,CAAA;IAAA,CAAA;;AA5BVC,EAAAA,CACE3mB,cAAAA,G7BAuB,CAAA;M8BNzBinB,EAAAA;IAMFxoB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,G9BD+B,CAAA,yB8BEpCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,UACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAAC;YAAA,CAAA;QAAA,CAAA;IAAA,CAAA;;AATTooB,EAAAA,CACEjnB,cAAAA,G9BKuB,CAAA;A+BRtC,KAAA,CAAMC,EAAAA,G/BQgC,CAAA;M+B6EzBinB,EAAAA;mBAA0B/mB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACtBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBknB;IAAAA,iBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWR,EAAAA,CAAYjoB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI/B2mB;IAAAA,aAAAA,CAAc3N,CAAAA,GAAO,CAAA,GAAA,CAC3B;QAAA,MAAA,CAAA,GAAA,CAAWwN,EAAAA,CAAQvoB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA,IAAYgZ,CAAAA;IAAAA,CAIvC4N;IAAAA,aAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWrB,EAAAA,CAAQtnB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI3BgmB;IAAAA,YAAAA,GAAAA,CACN;QAAA,MAAA,CAAOzP,KAAAA,CAAMC,IAAAA,CAAKvY,IAAAA,CAAKiD,UAAAA,EAAY0B,MAAAA,EAAQ3B,CAAAA,GAASA,CAAAA,YAAgBulB,EAAAA;;IAAAA,CAI9DvmB;IAAAA,IAAAA,CAAKC,GAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,GAAAA,CAAQC,OAAAA;QAExB,EAAA,GAAKA,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,KAAeN,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,GAAO,MAAA,CAAA,IAAA;QAGhE,KAAA,CAEMgmB,CAAAA,IAFkBrlB,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,EACZgmB,QAAAA,IAAY,CAAA,CAAA,EACnB1gB,GAAAA,EAAK+hB,CAAAA,GAAe5oB,IAAAA,CAAK0oB,aAAAA,GAAgBnL,OAAAA,CAAQqL,CAAAA,CAAW7N,IAAAA,IAAQ,CAAA;;QAkCjG,MAAA,EA/BiB7Y,GAAAA,CAAQC,IAAAA,CAAKuV,MAAAA,IAAU,CAAA,CAAA,EAC/BrV,OAAAA,EAASsV,GAAAA,EAASkR,EAAAA,GAAAA,CAC1B;YAAA,KAAA,CAAM7W,CAAAA,GAAO/P,GAAAA,CAAQyV,MAAAA,CAAOmR,EAAAA;aACXlR,GAAAA,CAAQE,UAAAA,IAAc,CAAA,CAAA,EAE9BxV,OAAAA,EAASuV,CAAAA,EAASkR,CAAAA,GAAAA,CAC1B;gBAAA,EAAA,GAAKlR,CAAAA,CAAQpV,UAAAA,KAAeoV,CAAAA,CAAQpV,UAAAA,CAAWjB,EAAAA,GAC9C,MAAA;gBAGD,KAAA,CAAMwnB,CAAAA,GAAc/oB,IAAAA,CAAKyoB,iBAAAA,IAEnBO,CAAAA,GAAiBpR,CAAAA,CAAQpV,UAAAA,CAAWjB,EAAAA;gBAC1C,GAAA,EAAK,KAAA,CAAM0nB,GAAAA,IAAcD,CAAAA,CAAed,QAAAA,CAAU,CACjD;oBAAA,KAAA,CAAME,CAAAA,GAAUpoB,IAAAA,CAAK2oB,aAAAA;oBAAAA,IAAAA,CAEO9a,CAAAA,KAAxBob,GAAAA,CAAWpI,QAAAA,IACduH,CAAAA,CAAQX,WAAAA,CAAYxlB,GAAAA,CAAQoe,SAAAA,CAAU4I,GAAAA,CAAWpI,QAAAA;oBAGlD,GAAA,EAAK,KAAA,CAAMqI,CAAAA,IAAgBD,GAAAA,CAAW1B,QAAAA,IAAY,CAAA,CAAA,CACjDa,CAAAA,CAAQV,UAAAA,CAAWH,CAAAA,CAAS2B,CAAAA;oBAG7BH,CAAAA,CAAYZ,UAAAA,CAAWC,CAAAA;gBAAAA,CAGxBpW;gBAAAA,CAAAA,CAAKiH,cAAAA,GAAiB6P,CAAAA,EAAWlmB,YAAAA,CAAarB,EAAAA,EAAMwnB,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAQhD3lB;IAAAA,KAAAA,CAAMnB,GAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,GAAAA,CAAQC,OAAAA,EAElBqlB,GAAAA,GAAWvnB,IAAAA,CAAK+nB,YAAAA;QACtB,EAAA,GAAKR,GAAAA,CAAS3hB,MAAAA,EAAQ,MAAA,CAAA,IAAA;QAGtB,KAAA,CAAMujB,EAAAA,GAAc,CAAA,CAAA,EACdC,CAAAA,GAAkB,GAAA,CAAIjf,GAAAA;QAC5B,GAAA,EAAK,KAAA,CAAMwd,GAAAA,IAAWJ,GAAAA,CACrB6B,CAAAA,CAAgB/c,GAAAA,CAAIsb,GAAAA,EAASwB,EAAAA,CAAYvjB,MAAAA,GACzCujB,EAAAA,CAAYlb,IAAAA,CAAKhM,GAAAA,CAAQonB,iBAAAA,CAAkB1B,GAAAA;QAI5C,GAAA,EAAK,KAAA,CAAM3V,GAAAA,IAAAA,IAAAA,CAAalQ,QAAAA,CAASuB,OAAAA,GAAU2V,UAAAA,GAAc,CACxD;YAAA,KAAA,CAAM6P,GAAAA,GAAY5mB,GAAAA,CAAQ4Y,YAAAA,CAAanX,GAAAA,CAAIsO,GAAAA;YAE3CA,GAAAA,CAAKiH,cAAAA,GAAiB5W,OAAAA,EAAS6R,GAAAA,EAAM4U,EAAAA,GAAAA,CACpC;gBAAA,KAAA,CAAMC,CAAAA,GAAc7U,GAAAA,CAAK1Q,YAAAA,CAA0BjC,EAAAA;gBACnD,EAAA,GAAKwnB,CAAAA,EAAa,MAAA;gBAElB,KAAA,CAAMnR,CAAAA,GAAU3V,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKuV,MAAAA,CAAQmR,GAAAA,EAAWhR,UAAAA,CAAWiR,EAAAA,GAE7DQ,CAAAA,GAAcP,CAAAA,CAAYT,YAAAA,GAAezhB,GAAAA,EAAKuhB,CAAAA,GAAAA,CACnD;oBAAA,KAAA,CAAMa,CAAAA,GAAahnB,GAAAA,CAAQonB,iBAAAA,CAAkBjB,CAAAA,GAEvCvH,CAAAA,GAAWuH,CAAAA,CAAQZ,WAAAA;oBAOzB,MAAA,CANI3G,CAAAA,KACHoI,CAAAA,CAAWpI,QAAAA,GAAW5e,GAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,IAGpDoI,CAAAA,CAAW1B,QAAAA,GAAWa,CAAAA,CAAQL,YAAAA,GAAelhB,GAAAA,EAAK8gB,CAAAA,GAAYyB,CAAAA,CAAgB1lB,GAAAA,CAAIikB,CAAAA;uBAE3EsB,CAAAA;gBAAAA,CAAAA;gBAGRrR,CAAAA,CAAQpV,UAAAA,GAAaoV,CAAAA,CAAQpV,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAC3CoV,CAAAA,CAAQpV,UAAAA,CAAWjB,EAAAA,IAAQ,CAAE2mB;oBAAAA,QAAAA,EAAUoB,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAOzC;QAAA,MAAA,CAHApnB,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,GAAaN,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,IAAc,CAAA;QAAA,CAAA,EACrDN,GAAAA,CAAQC,IAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,IAAQ,CAAEgmB;YAAAA,QAAAA,EAAU4B,EAAAA;QAAAA,CAAAA,EAAAA,IAAAA;IAAAA,CAAAA;;AAlHjCX,EAAAA,CAEWlnB,cAAAA,GAAiBC,EAAAA;ACxEzC,KAAcyc,CAAd,CAAA,CAAA,CAAA,EAAQF,EAAAA,EAAAA,CAAAA;MAOKyL,EAAAA;IAMFxpB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GhCtB6B,CAAA,uBgCuBlCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,SACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAa8d,QAAAA;QAAAA,CAAAA;IAAAA,CAGxB5d;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtDkpB;YAAAA,eAAAA,EAAiB,CAAA;YACjBC,gBAAAA,EAAkB,IAAA;YAClBC,oBAAAA,EAAsB,GAAA,mBAAgB1pB,IAAAA,CAAKue,KAAAA,EAAO,CAAA;YAClDoL,mBAAAA,EAAqBC,QAAAA;YACrBC,gBAAAA,EAAkB,CAAC;AAAA,iBAAA;AAAK,iBAAA;AAAK,iBAAA;YAAA,CAAA;QAAA,CAAA;IAAA,CAaxBC;IAAAA,kBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYpmB,GAAAA,CAAI,CAAA;IAAA,CAQVqmB;IAAAA,kBAAAA,CAAmB/K,CAAAA,EAAAA,CACzB;QAAA,MAAA,CAAA,IAAA,CAAY3S,GAAAA,CAAI,CAAA,kBAAmB2S,CAAAA;IAAAA,CAO7BgL;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY9K,MAAAA,CAAO,CAAA;IAAA,CAOb+K;IAAAA,uBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY/K,MAAAA,CAAO,CAAA,qBAAsBlf,IAAAA,CAAKkf,MAAAA,CAAO,CAAA,yBAA0B,IAAA;IAAA,CAOzEgL;IAAAA,mBAAAA,CAAoBxZ,CAAAA,EAAAA,CAC1B;QAAA,MAAA,CAAA,IAAA,CAAY2O,MAAAA,CAAO,CAAA,mBAAoB3O,CAAAA,EAAS,CAAE4O;YAAAA,QAAAA,EAAUxB,EAAAA;QAAAA,CAAAA;IAAAA,CAWtDqM;IAAAA,sBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYzmB,GAAAA,CAAI,CAAA;IAAA,CAOV0mB;IAAAA,sBAAAA,CAAuBC,CAAAA,EAAAA,CAC7B;QAAA,MAAA,CAAA,IAAA,CAAYhe,GAAAA,CAAI,CAAA,sBAAuBge,CAAAA;IAAAA,CAOjCC;IAAAA,mBAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAY5mB,GAAAA,CAAI,CAAA;IAAA,CAOV6mB;IAAAA,mBAAAA,CAAoBlP,CAAAA,EAAAA,CAC1B;QAAA,MAAA,CAAA,IAAA,CAAYhP,GAAAA,CAAI,CAAA,mBAAoBgP,CAAAA;IAAAA,CAO9BmP;IAAAA,sBAAAA,GAAAA,CACN;QAAA,MAAA,kBAAkBvO,WAAAA,CAAYjc,IAAAA,CAAKsqB,mBAAAA;IAAAA,CAO7BG;IAAAA,sBAAAA,CAAuBtO,CAAAA,EAAAA,CAC7B;QAAA,KAAA,CAAM6C,CAAAA,GAAShf,IAAAA,CAAKsqB,mBAAAA,GAAsBlb,KAAAA;QAC1C,MAAA,CAAA,IAAA,CAAY/C,GAAAA,CAAI,CAAA,oCAA+B+P,WAAAA,CAAYD,CAAAA,EAAK6C,CAAAA;IAAAA,CAAAA;;AAtHrDuK,EAAAA,CACEjoB,cAAAA,GhChBqB,CAAA;AiCTpC,KAAA,CAAMC,EAAAA,GjCS8B,CAAA;MiCsDvBmpB,EAAAA;mBAAwBjpB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACpBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzBopB;IAAAA,YAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWpB,EAAAA,CAAOvpB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI1BC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA,EAElBke,CAAAA,GAAcle,GAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,IAAY,CAAA,CAAA;QA+B7C,MAAA,EAhCqBrO,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,IAAa,CAAA,CAAA,EAElChe,OAAAA,EAASie,CAAAA,EAAaC,CAAAA,GAAAA,CAClC;YAAA,EAAA,EAAID,CAAAA,CAAY9d,UAAAA,IAAc8d,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,GAAO,CAC3D;gBAAA,KAAA,CAAMqpB,CAAAA,GAAS5qB,IAAAA,CAAK2qB,YAAAA;gBACpB1oB,CAAAA,CAAQoe,SAAAA,CAAUE,CAAAA,EAAe3d,YAAAA,CAAarB,EAAAA,EAAMqpB,CAAAA;gBAEpD,KAAA,CAAMC,CAAAA,GAAYvK,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA;gBAgBzC,EAAA,EAAA,IAAA,CAZkCsM,CAAAA,KAA9Bgd,CAAAA,CAAUrB,eAAAA,IACboB,CAAAA,CAAOb,kBAAAA,CAAmBc,CAAAA,CAAUrB,eAAAA,GAAAA,IAAAA,CAEC3b,CAAAA,KAAlCgd,CAAAA,CAAUlB,mBAAAA,IACbiB,CAAAA,CAAOR,sBAAAA,CAAuBS,CAAAA,CAAUlB,mBAAAA,GAAAA,IAAAA,CAEN9b,CAAAA,KAA/Bgd,CAAAA,CAAUhB,gBAAAA,IACbe,CAAAA,CAAOL,mBAAAA,CAAoBM,CAAAA,CAAUhB,gBAAAA,GAAAA,IAAAA,CAKHhc,CAAAA,KAA/Bgd,CAAAA,CAAUpB,gBAAAA,EAAgC,CAC7C;oBAAA,KAAA,CAAM/I,CAAAA,GAAiBmK,CAAAA,CAAUpB,gBAAAA;oBAEjCmB,CAAAA,CAAOV,mBAAAA,CADSjoB,CAAAA,CAAQsO,QAAAA,CAAS6P,CAAAA,CAAYM,CAAAA,CAAerV,KAAAA,EAAOS,MAAAA,IAEnE7J,CAAAA,CAAQ0e,cAAAA,CAAeiK,CAAAA,CAAOX,uBAAAA,IAA4BvJ,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CASvDtd;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,GAAAA,GAAUD,CAAAA,CAAQC,OAAAA;QAoCxB,MAAA,CAlCAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAud,aAAAA,GACAve,OAAAA,EAASwe,CAAAA,GAAAA,CACT;YAAA,KAAA,CAAM+J,CAAAA,GAAS/J,CAAAA,CAASrd,YAAAA,CAAqBjC,EAAAA;YAC7C,EAAA,EAAIqpB,CAAAA,EAAQ,CACX;gBAAA,KAAA,CAAMrK,CAAAA,GAAgBte,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAImd,CAAAA,GAC7CP,CAAAA,GAAcpe,GAAAA,CAAQC,IAAAA,CAAKke,SAAAA,CAAWE,CAAAA;gBAC5CD,CAAAA,CAAY9d,UAAAA,GAAa8d,CAAAA,CAAY9d,UAAAA,IAAc,CAAA;gBAAA,CAAA;gBAInD,KAAA,CAAMqoB,CAAAA,GAAavK,CAAAA,CAAY9d,UAAAA,CAAWjB,EAAAA,IAAQ,CAAA;gBAAA,CAAA;gBAclD,EAAA,EAZIqpB,CAAAA,CAAOd,kBAAAA,KAAuB,CAAA,KACjCe,CAAAA,CAAUrB,eAAAA,GAAkBoB,CAAAA,CAAOd,kBAAAA,KAEhCgB,MAAAA,CAAOC,QAAAA,CAASH,CAAAA,CAAOT,sBAAAA,QAC1BU,CAAAA,CAAUlB,mBAAAA,GAAsBiB,CAAAA,CAAOT,sBAAAA,qBAEzBvM,EAAAA,CAAGgN,CAAAA,CAAON,mBAAAA,IAAuB,CAAC;AAAA,qBAAA;AAAG,qBAAA;AAAG,qBAAA;gBAAA,CAAA,MACtDO,CAAAA,CAAUhB,gBAAAA,GAAmBe,CAAAA,CAAON,mBAAAA,KAKjCM,CAAAA,CAAOZ,mBAAAA,IAAuB,CACjC;oBAAA,KAAA,CAAMtZ,CAAAA,GAAUka,CAAAA,CAAOZ,mBAAAA,IACjBjJ,CAAAA,GAAc6J,CAAAA,CAAOX,uBAAAA;oBAC3BY,CAAAA,CAAUpB,gBAAAA,GAAmBxnB,CAAAA,CAAQ+e,oBAAAA,CAAqBtQ,CAAAA,EAASqQ,CAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAhF5D2J,EAAAA,CAEWppB,cAAAA,GAAiBC,EAAAA;AClEzC,KAAA,CAAMA,EAAAA,GlCY+B,CAAA;MkC+BxBypB,EAAAA;mBAAyBvpB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACrBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIhCS;IAAAA,IAAAA,CAAKipB,CAAAA,EAAAA,CACJ;QAAA,MAAA,CAAA,IAAA;IAAA,CAID7nB;IAAAA,KAAAA,CAAM6nB,CAAAA,EAAAA,CACL;QAAA,MAAA,CAAA,IAAA;IAAA,CAAA;;AAXWD,EAAAA,CAEW1pB,cAAAA,GAAiBC,EAAAA;ACpCzC,KAAA,CAAMA,EAAAA,GnCI4B,CAAA;MmCE5B2pB,EAAAA;IACLlc,KAAAA,CAAMlK,CAAAA,EAAAA,CACL;QAAA,MAAA,CACc,GAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,GAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACO,EAAA,KAAbA,CAAAA,CAAM,CAAA,KACQ,EAAA,KAAdA,CAAAA,CAAM,EAAA,KACQ,EAAA,KAAdA,CAAAA,CAAM,EAAA;IAAA,CAGRmK;IAAAA,OAAAA,CAAQnK,CAAAA,EAAAA,CACP;QAAA,KAAA,CAAMqmB,CAAAA,kBAAoBrmB,CAAAA;QAC1B,MAAO,CAAA,CAACqmB;YAAAA,CAAAA,CAAUE,UAAAA;YAAYF,CAAAA,CAAUG,WAAAA;QAAAA,CAAAA;IAAAA,CAEzCrb;IAAAA,WAAAA,CAAYnL,CAAAA,EAAAA,CACX;QAAA,KAAA,CACMymB,CAAAA,kBADoBzmB,CAAAA,EACJ0mB,oBAAAA,CAAqB,CAAA;QAC3C,EAAA,EAAID,CAAAA,CAAIE,UAAAA,yBAAyBE,KAAAA,EAChC,MAAA,CAA8B,CAAA,KAAvBJ,CAAAA,CAAIK,OAAAA,CAAQhmB,MAAAA,IAAqD,EAAA,KAAT,EAAA,GAA3B2lB,CAAAA,CAAIK,OAAAA,CAAQ,CAAA,EAAGC,SAAAA,IAA0B,CAAA,GAAI,CAAA;QAAA,EAAA,EACvEN,CAAAA,CAAIE,UAAAA,yBAAyBK,KAAAA,EACvC,MAAA,CAA4C,CAAA,KAAT,EAAA,GAA3BP,CAAAA,CAAIK,OAAAA,CAAQ,CAAA,EAAGC,SAAAA,IAAyB,CAAA,GAAI,CAAA;QAErD,KAAA,CAAA,GAAA,CAAUrlB,KAAAA,EAAAA,6BAAAA,EAAsC+kB,CAAAA,CAAIE,UAAAA,CAAAA,EAAAA;IAAAA,CAErDM;IAAAA,gBAAAA,CAAiBjnB,CAAAA,EAAAA,CAChB;QAAA,KAAA,CAAMqmB,CAAAA,kBAAoBrmB,CAAAA,GACpBknB,CAAAA,GAAWhsB,IAAAA,CAAKiQ,WAAAA,CAAYnL,CAAAA,IAAS,CAAA;QAE3C,GAAA,CAAImnB,CAAAA,GAAoB,CAAA;QACxB,GAAA,CAAK,GAAA,CAAIpmB,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAIslB,CAAAA,CAAUe,MAAAA,CAAOtmB,MAAAA,EAAQC,GAAAA,GAAK,CACjD;YAAA,KAAA,CAAMsmB,CAAAA,GAAQhB,CAAAA,CAAUe,MAAAA,CAAOrmB,GAAAA;YAI9BomB,CAAAA,IADGE,CAAAA,CAAMC,sBAAAA,GACYD,CAAAA,CAAMC,sBAAAA,GAERpX,IAAAA,CAAKrO,GAAAA,CAAI,CAAA,EAAGqO,IAAAA,CAAKqX,KAAAA,CAAMlB,CAAAA,CAAUE,UAAAA,GAAarW,IAAAA,CAAKsX,GAAAA,CAAI,CAAA,EAAGzmB,GAAAA,MAG1C,CAAA,IAFfmP,IAAAA,CAAKrO,GAAAA,CAAI,CAAA,EAAGqO,IAAAA,CAAKqX,KAAAA,CAAMlB,CAAAA,CAAUG,WAAAA,GAActW,IAAAA,CAAKsX,GAAAA,CAAI,CAAA,EAAGzmB,GAAAA,MAExB,CAAA,KADrCmmB,CAAAA,GAAW,EAAA,GAAK,CAAA;QAAA,CAKpC;QAAA,MAAA,CAAOC,CAAAA;IAAAA,CAAAA;;MAyDIM,EAAAA;mBAAsB9qB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CAClBxB,aAAAA,GAAgBsB,EAAAA,EAAAA,IAAAA,CAEhBqI,YAAAA,GAAe,CAACxJ;+BAAagQ,OAAAA;QAAAA,CAAAA;IAAAA,CAIvBtC;WAAAA,QAAAA,GAAAA,CACrBuC;yBAAWC,cAAAA,CAAe,CAAA,aAAc,GAAA,CAAI4a,EAAAA;IAAAA,CAItCpgB;IAAAA,OAAAA,CAAQ7I,GAAAA,EAAAA,CAOd;QAAA,MAAA,CANAA,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,CAAUlO,OAAAA,EAASmO,CAAAA,GAAAA,CACnCA;YAAAA,CAAAA,CAAWhO,UAAAA,IAAcgO,CAAAA,CAAWhO,UAAAA,CAAWjB,EAAAA,MAElDiP,CAAAA,CAAW1E,MAAAA,GADO0E,CAAAA,CAAWhO,UAAAA,CAAWjB,EAAAA,EACVuK,MAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAQ1B9J;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,MAAA,CAAA,IAAA;IAAA,CAIMmB;IAAAA,KAAAA,CAAMnB,GAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMC,CAAAA,GAAUD,GAAAA,CAAQC,OAAAA;QAkBxB,MAAA,CAhBAlC,IAAAA,CAAK8B,QAAAA,CACHuB,OAAAA,GACAoN,YAAAA,GACApO,OAAAA,EAASqO,CAAAA,GAAAA,CACT;YAAA,EAAA,EAA8B,CAAA,gBAA1BA,CAAAA,CAAQC,WAAAA,IAAgC,CAC3C;gBAAA,KAAA,CAAMC,CAAAA,GAAa3O,GAAAA,CAAQ4O,aAAAA,CAAcnN,GAAAA,CAAIgN,CAAAA;gBAC7CxO,CAAAA,CAAQC,IAAAA,CAAKoO,QAAAA,CAAUlO,OAAAA,EAASmO,CAAAA,GAAAA,CAC3BA;oBAAAA,CAAAA,CAAW1E,MAAAA,KAAW8E,CAAAA,KACzBJ,CAAAA,CAAWhO,UAAAA,GAAagO,CAAAA,CAAWhO,UAAAA,IAAc,CAAA;oBAAA,CAAA,EACjDgO,CAAAA,CAAWhO,UAAAA,CAAWjB,EAAAA,IAAQ,CAAEuK;wBAAAA,MAAAA,EAAQ0E,CAAAA,CAAW1E,MAAAA;oBAAAA,CAAAA,EAAAA,MAAAA,CAC5C0E,CAAAA,CAAW1E,MAAAA;gBAAAA,CAAAA;YAAAA,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AA1CZygB,EAAAA,CAIWjrB,cAAAA,GAAiBC,EAAAA;MCjH5BirB,EAAAA;IAMFzsB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GpCN8B,CAAA,wBoCOnCD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,YACpBF,IAAAA,CAAKG,WAAAA,GAAc,CAACC;+BAAaqsB,YAAAA;QAAAA,CAAAA;IAAAA,CAGxBnsB;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAA4B,CACtDkP;YAAAA,MAAAA,EAAQ,CAAC;AAAA,iBAAA;AAAK,iBAAA;YAAA,CAAA;YACdkd,QAAAA,EAAU,CAAA;YACV5M,KAAAA,EAAO,CAAC;AAAA,iBAAA;AAAK,iBAAA;YAAA,CAAA;YACb6M,QAAAA,EAAU,IAAA;QAAA,CAAA;IAAA,CAILC;IAAAA,SAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYlpB,GAAAA,CAAI,CAAA;IAAA,CAEVmpB;IAAAA,SAAAA,CAAUrd,CAAAA,EAAAA,CAChB;QAAA,MAAA,CAAA,IAAA,CAAYnD,GAAAA,CAAI,CAAA,SAAUmD,CAAAA;IAAAA,CAGpBsd;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYppB,GAAAA,CAAI,CAAA;IAAA,CAEVqpB;IAAAA,WAAAA,CAAYL,CAAAA,EAAAA,CAClB;QAAA,MAAA,CAAA,IAAA,CAAYrgB,GAAAA,CAAI,CAAA,WAAYqgB,CAAAA;IAAAA,CAGtBM;IAAAA,QAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYtpB,GAAAA,CAAI,CAAA;IAAA,CAEVupB;IAAAA,QAAAA,CAASnN,CAAAA,EAAAA,CACf;QAAA,MAAA,CAAA,IAAA,CAAYzT,GAAAA,CAAI,CAAA,QAASyT,CAAAA;IAAAA,CAGnBoN;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYxpB,GAAAA,CAAI,CAAA;IAAA,CAEVypB;IAAAA,WAAAA,CAAYR,CAAAA,EAAAA,CAClB;QAAA,MAAA,CAAA,IAAA,CAAYtgB,GAAAA,CAAI,CAAA,WAAYsgB,CAAAA;IAAAA,CAAAA;;AA9CjBH,EAAAA,CACElrB,cAAAA,GpCAsB,CAAA;AqCbrC,KAAA,CAAMC,EAAAA,GrCa+B,CAAA;MqCgCxB6rB,EAAAA;mBAAyB3rB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACrBxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzB8rB;IAAAA,eAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWb,EAAAA,CAAUxsB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI7BC;IAAAA,IAAAA,CAAKC,CAAAA,EAAAA,CACX;QAAA,GAAA,EAAK,KAAoBye,EAAbK,CAAAA,EAAaL,CAAAA,KAAmBpI,KAAAA,CAAMC,IAAAA,CAAKtW,CAAAA,CAAQqrB,YAAAA,CAAaC,OAAAA,IAAY,CACvF;YAAA,EAAA,GAAK7M,CAAAA,CAAele,UAAAA,KAAeke,CAAAA,CAAele,UAAAA,CAAWjB,EAAAA,GAAO,QAAA;YAEpE,KAAA,CAAMisB,CAAAA,GAAYxtB,IAAAA,CAAKqtB,eAAAA,IACjBI,CAAAA,GAAe/M,CAAAA,CAAele,UAAAA,CAAWjB,EAAAA;YAAAA,IAAAA,CAEnBsM,CAAAA,KAAxB4f,CAAAA,CAAaje,MAAAA,IAAsBge,CAAAA,CAAUX,SAAAA,CAAUY,CAAAA,CAAaje,MAAAA,GAAAA,IAAAA,CAC1C3B,CAAAA,KAA1B4f,CAAAA,CAAaf,QAAAA,IAAwBc,CAAAA,CAAUT,WAAAA,CAAYU,CAAAA,CAAaf,QAAAA,GAAAA,IAAAA,CACjD7e,CAAAA,KAAvB4f,CAAAA,CAAa3N,KAAAA,IAAqB0N,CAAAA,CAAUP,QAAAA,CAASQ,CAAAA,CAAa3N,KAAAA,GAAAA,IAAAA,CACxCjS,CAAAA,KAA1B4f,CAAAA,CAAad,QAAAA,IAAwBa,CAAAA,CAAUL,WAAAA,CAAYM,CAAAA,CAAad,QAAAA,GAE5E5L,CAAAA,CAAYne,YAAAA,CAAarB,EAAAA,EAAMisB,CAAAA;QAAAA,CAEhC;QAAA,MAAA,CAAA,IAAA;IAAA,CAIMpqB;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAAA,CAAMyrB,CAAAA,GAAqBpV,KAAAA,CAAMC,IAAAA,CAAKtW,CAAAA,CAAQ0rB,iBAAAA,CAAkBJ,OAAAA;QAChE,GAAA,EAAK,KAAoB7M,EAAbK,GAAAA,EAAaL,CAAAA,KAAmBgN,CAAAA,CAAoB,CAC/D;YAAA,KAAA,CAAMF,CAAAA,GAAYzM,GAAAA,CAAYvd,YAAAA,CAAwBjC,EAAAA;YACtD,EAAA,GAAKisB,CAAAA,EAAW,QAAA;YAEhB9M,CAAAA,CAAele,UAAAA,GAAake,CAAAA,CAAele,UAAAA,IAAc,CAAA;YAAA,CAAA;YACzD,KAAA,CAAMirB,CAAAA,GAAe,CAAA;YAAA,CAAA,EAEf7P,CAAAA,mBAAeA,EAAAA;YAChBA,CAAAA,CAAG4P,CAAAA,CAAUZ,SAAAA,IAAa,CAAC;AAAA,iBAAA;AAAG,iBAAA;YAAA,CAAA,MAAKa,CAAAA,CAAaje,MAAAA,GAASge,CAAAA,CAAUZ,SAAAA,KACxC,CAAA,KAA5BY,CAAAA,CAAUV,WAAAA,OAAqBW,CAAAA,CAAaf,QAAAA,GAAWc,CAAAA,CAAUV,WAAAA,KAChElP,CAAAA,CAAG4P,CAAAA,CAAUR,QAAAA,IAAY,CAAC;AAAA,iBAAA;AAAG,iBAAA;YAAA,CAAA,MAAKS,CAAAA,CAAa3N,KAAAA,GAAQ0N,CAAAA,CAAUR,QAAAA,KACvC,IAAA,IAA3BQ,CAAAA,CAAUN,WAAAA,OAAuBO,CAAAA,CAAad,QAAAA,GAAWa,CAAAA,CAAUN,WAAAA,KAEvExM,CAAAA,CAAele,UAAAA,CAAWjB,EAAAA,IAAQksB,CAAAA;QAAAA,CAEnC;QAAA,MAAA,CAAA,IAAA;IAAA,CAAA;;AA7CWL,EAAAA,CAEW9rB,cAAAA,GAAiBC,EAAAA;AC3CzC,KAAA,CAAMqsB,EAAAA,GAAe,CACpBxtB;uBAAa2Z,IAAAA;uBACA8T,KAAAA;uBACAxtB,IAAAA;uBACAytB,IAAAA;uBACA5P,QAAAA;uBACA9N,OAAAA;uBACA2d,SAAAA;AAAAA,CAAAA;MAcDC,EAAAA;IAMFjuB,IAAAA,GAAAA,CACTC;QAAAA,IAAAA,CAAKC,aAAAA,GtClBwB,CAAA,kBsCmB7BD,IAAAA,CAAKE,YAAAA,GAAe,CAAA,SACpBF,IAAAA,CAAKG,WAAAA,GAAcytB,EAAAA;IAAAA,CAGVttB;IAAAA,WAAAA,GAAAA,CACT;QAAA,MAAA,CAAOC,MAAAA,CAAOC,MAAAA,CAAOC,KAAAA,CAAMH,WAAAA,IAAe,CAAE2B;YAAAA,OAAAA,EAAS,CAAA;YAAA,CAAA;YAAIgB,UAAAA,EAAY,CAAA;YAAA,CAAA;QAAA,CAAA;IAAA,CAY/DgrB;IAAAA,UAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,IAAA,CAAYvqB,GAAAA,CAAI,CAAA;IAAA,CAmBVwqB;IAAAA,UAAAA,CAAWjsB,CAAAA,EAAAA,CACjB;QAAA,MAAA,CAAA,IAAA,CAAYoK,GAAAA,CAAI,CAAA,UAAA,CAAA,CAAA,CAAA;QAAA,CAAA,EAAgBpK,CAAAA;IAAAA,CAgB1BksB;IAAAA,cAAAA,GAAAA,CACN;QAAA,MAAA,CAAO5tB,MAAAA,CAAOsZ,IAAAA,CAAK7Z,IAAAA,CAAK0D,GAAAA,CAAI,CAAA;IAAA,CActB0qB;IAAAA,WAAAA,CAAYrT,CAAAA,EAAAA,CAClB;QAAA,KAAA,CAAM9X,CAAAA,GAAajD,IAAAA,CAAK0D,GAAAA,CAAI,CAAA;QAC5B,MAAA,CAAOqX,CAAAA,IAAQ9X,CAAAA,GAAaA,CAAAA,CAAW8X,CAAAA,IAAQ,IAAA;IAAA,CAiBzCsT;IAAAA,WAAAA,CAAYtT,CAAAA,EAAcuT,CAAAA,EAAAA,CAChCtuB;QAAAA,IAAAA,CAAKuuB,cAAAA,CAAexT,CAAAA;QAEpB,KAAA,CAAM9X,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;QAAAA,CAAAA,EAAkBjD,IAAAA,CAAK0D,GAAAA,CAAI,CAAA;QAMjC,MAAA,CALI4qB,CAAAA,GACHrrB,CAAAA,CAAW8X,CAAAA,IAAQuT,CAAAA,GAAAA,MAAAA,CAEZrrB,CAAAA,CAAW8X,CAAAA,GAAAA,IAAAA,CAEP1O,GAAAA,CAAI,CAAA,aAAcpJ,CAAAA;IAAAA,CAUxBurB;IAAAA,QAAAA,GAAAA,CAGN;QAAA,MAAA,CAAA,CAAA,CAAA,CAASC;YAAAA,CAAAA,WAFOC,EAAAA,CAAS1uB,IAAAA,CAAK0D,GAAAA,CAAI,CAAA;QAAA,CAAA,EACfgrB,EAAAA,CAAS1uB,IAAAA,CAAK0D,GAAAA,CAAI,CAAA;IAAA,CAQ/BirB;IAAAA,UAAAA,CAAWC,CAAAA,EAAAA,CAIjB;QAAA,KAAA,CAAM3sB,CAAAA,IAHN2sB,CAAAA,GAASF,EAAAA,CAASE,CAAAA,GAGK,CAAA;QAKvB,MAAA,CAJI3sB,CAAAA,IAASjC,IAAAA,CAAKqM,GAAAA,CAAI,CAAA,UAAWpK,CAAAA,GAAAA,MAAAA,CAC1B2sB,CAAAA,CAAO,CAAA,YAAA,IAAA,CAGFviB,GAAAA,CAAI,CAAA,aAAcuiB,CAAAA;IAAAA,CAQvBL;IAAAA,cAAAA,CAAexT,CAAAA,EAAAA,CAEtB;QAAA,EAAA,IADeA,CAAAA,CAAK8T,KAAAA,CAAM,CAAA,IAAK,CAAA,KAAA,IAAA,CACVnrB,GAAAA,CAAI,CAAA,YACxB,KAAA,CAAA,GAAA,CAAU8C,KAAAA,EAAAA,4CAAAA,EAAwDuU,CAAAA,CAAAA,EAAAA;IAAAA,CAAAA;;SAK5D2T,EAAAA,CAAYI,CAAAA,EAAAA,CACpB;IAAA,MAAA,CAAOpW,IAAAA,CAAKqW,KAAAA,CAAMrW,IAAAA,CAAKC,SAAAA,CAAUmW,CAAAA;AAAAA,CAvJrBd;AAAAA,EAAAA,CAIE1sB,cAAAA,GtCfgB,CAAA;AuCF/B,KAAA,CAAMC,EAAAA,GvCEyB,CAAA;MuCkFlBytB,EAAAA;mBAAYvtB,CAAAA,CAAAA,CAAAA;QAAAA,KAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CACRxB,aAAAA,GAAgBsB,EAAAA;IAAAA,CAIzB0tB;IAAAA,YAAAA,GAAAA,CACN;QAAA,MAAA,CAAA,GAAA,CAAWjB,EAAAA,CAAOhuB,IAAAA,CAAK8B,QAAAA,CAASC,QAAAA;IAAAA,CAI1BmtB;IAAAA,WAAAA,GAAAA,CACN;QAAA,MAAA,CAAO5W,KAAAA,CAAMC,IAAAA,CAAKvY,IAAAA,CAAKiD,UAAAA;IAAAA,CAIjBjB;IAAAA,IAAAA,CAAKC,GAAAA,EAAAA,CAAAA;QAAAA,GAAAA,CAAAA,CAAAA;QACX,KAAA,CAAMktB,CAAAA,GAAAA,IAAAA,KAAAA,CAAAA,GAAeltB,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA,CAAKK,UAAAA,IAAAA,IAAAA,CAAAA,CAAAA,GAArB4sB,CAAAA,CAAkC7tB,EAAAA;QACvD,EAAA,GAAK4tB,CAAAA,KAAiBA,CAAAA,CAAaE,OAAAA,EAAS,MAAA,CAAA,IAAA;QAG5C,KAAA,CAAMltB,CAAAA,GAAOF,GAAAA,CAAQC,OAAAA,CAAQC,IAAAA,EACvBmtB,CAAAA,GAAOtvB,IAAAA,CAAK8B,QAAAA,CAASuB,OAAAA,IACrBgsB,CAAAA,GAAUF,CAAAA,CAAaE,OAAAA,CAAQxoB,GAAAA,EAAK0oB,CAAAA,GAAcvvB,IAAAA,CAAKivB,YAAAA,GAAeN,UAAAA,CAAWY,CAAAA;WAEjFC,CAAAA,GAAW,CAChB;YAAA,CAACrtB;gBAAAA,CAAAA,CAAKstB,KAAAA;YAAAA,CAAAA;YACNttB,CAAAA,CAAKutB,MAAAA;YACLvtB,CAAAA,CAAKC,KAAAA;YACLD,CAAAA,CAAKuV,MAAAA;YACLvV,CAAAA,CAAKke,SAAAA;YACLle,CAAAA,CAAKwtB,MAAAA;YACLxtB,CAAAA,CAAKytB,UAAAA;QAAAA,CAAAA,EAGAC,CAAAA,GAAgB,CACrB;YAAA,CAACP;gBAAAA,CAAAA;YAAAA,CAAAA;YACDA,CAAAA,CAAKnV,UAAAA;YACLmV,CAAAA,CAAKhsB,SAAAA;YACLgsB,CAAAA,CAAKtW,UAAAA;YACLsW,CAAAA,CAAK1O,aAAAA;YACL0O,CAAAA,CAAK7e,YAAAA;YACL6e,CAAAA,CAAKQ,cAAAA;QAAAA,CAAAA;QAIN,GAAA,CAAK,GAAA,CAAIjqB,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAI2pB,CAAAA,CAAS5pB,MAAAA,EAAQC,GAAAA,GAAK,CACzC;YAAA,KAAA,CAAMkqB,CAAAA,GAAOP,CAAAA,CAAS3pB,GAAAA,KAAM,CAAA,CAAA;YAC5B,GAAA,CAAK,GAAA,CAAIwB,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAI0oB,CAAAA,CAAKnqB,MAAAA,EAAQyB,CAAAA,GAAK,CACrC;gBAAA,KAAA,CAAM2oB,CAAAA,GAAMD,CAAAA,CAAK1oB,CAAAA;gBACb2oB,CAAAA,CAAIxtB,UAAAA,IAAcwtB,CAAAA,CAAIxtB,UAAAA,CAAWjB,EAAAA,KAEpCsuB,CAAAA,CAAchqB,GAAAA,EAAGwB,CAAAA,EAAGzE,YAAAA,CAAarB,EAAAA,EAAM8tB,CAAAA,CADxBW,CAAAA,CAAIxtB,UAAAA,CAAWjB,EAAAA,EACwB0uB,MAAAA;YAAAA,CAAAA;QAAAA,CAKzD;QAAA,MAAA,CAAA,IAAA;IAAA,CAIM7sB;IAAAA,KAAAA,CAAMnB,CAAAA,EAAAA,CACZ;QAAA,KAIA,CAJA,CAAME,CAAAA,IAAAA,EAAEA,CAAAA,EAAAA,CAAAA,GAASF,CAAAA,CAAQC,OAAAA,EAEnBguB,CAAAA,GAAa,CAAA,CAAA;QAEnB,GAAA,EAAK,KAAA,CAAMD,CAAAA,IAAAA,IAAAA,CAAehtB,UAAAA,CAA2B,CAEpDitB;YAAAA,CAAAA,CAAWjiB,IAAAA,CAAKgiB,CAAAA,CAAOzB,QAAAA;YAIvB,GAAA,EAAK,KAAA,CAAM1mB,CAAAA,IAAUmoB,CAAAA,CAAOroB,WAAAA,GAAe,CAC1C;gBAAA,GAAA,CAAIuoB,CAAAA;gBAEJ,MAAA,CAAQroB,CAAAA,CAAO5H,YAAAA;oBACd,IAAA,oBAAkB6Z,IAAAA;wBACjBoW,CAAAA,GAAYhuB,CAAAA,CAAKstB,KAAAA;wBACjB,KAAA;oBACD,IAAA,oBAAkB5B,KAAAA;wBACjBsC,CAAAA,GAAYhuB,CAAAA,CAAKutB,MAAAA,CAAQztB,CAAAA,CAAQmuB,aAAAA,CAAc1sB,GAAAA,CAAIoE,CAAAA;wBACnD,KAAA;oBACD,IAAA,oBAAkBzH,IAAAA;wBACjB8vB,CAAAA,GAAYhuB,CAAAA,CAAKC,KAAAA,CAAOH,CAAAA,CAAQwB,YAAAA,CAAaC,GAAAA,CAAIoE,CAAAA;wBACjD,KAAA;oBACD,IAAA,oBAAkBgmB,IAAAA;wBACjBqC,CAAAA,GAAYhuB,CAAAA,CAAKuV,MAAAA,CAAQzV,CAAAA,CAAQ4Y,YAAAA,CAAanX,GAAAA,CAAIoE,CAAAA;wBAClD,KAAA;oBACD,IAAA,oBAAkBoW,QAAAA;wBACjBiS,CAAAA,GAAYhuB,CAAAA,CAAKke,SAAAA,CAAWpe,CAAAA,CAAQ6e,gBAAAA,CAAiBpd,GAAAA,CAAIoE,CAAAA;wBACzD,KAAA;oBACD,IAAA,oBAAkBsI,OAAAA;wBACjB+f,CAAAA,GAAYhuB,CAAAA,CAAKwtB,MAAAA,CAAQ1tB,CAAAA,CAAQ4O,aAAAA,CAAcnN,GAAAA,CAAIoE,CAAAA;wBACnD,KAAA;oBACD,IAAA,oBAAkBimB,SAAAA;wBACjBoC,CAAAA,GAAYhuB,CAAAA,CAAKytB,UAAAA,CAAY3tB,CAAAA,CAAQouB,iBAAAA,CAAkB3sB,GAAAA,CAAIoE,CAAAA;wBAC3D,KAAA;;wBAEAqoB,CAAAA,GAAY,IAAA,EACZnwB,IAAAA,CAAK8B,QAAAA,CACHyV,SAAAA,GACA2B,IAAAA,EAAAA,CAAAA,EAAS3X,EAAAA,CAAAA,iCAAAA,EAAwCuG,CAAAA,CAAO5H,YAAAA,CAAAA,CAAAA;;gBAIvDiwB,CAAAA,KAELA,CAAAA,CAAU3tB,UAAAA,GAAa2tB,CAAAA,CAAU3tB,UAAAA,IAAc,CAAA;gBAAA,CAAA,EAC/C2tB,CAAAA,CAAU3tB,UAAAA,CAAWjB,EAAAA,IAAQ,CAAE0uB;oBAAAA,MAAAA,EAAQC,CAAAA,CAAWtqB,MAAAA,GAAS,CAAA;gBAAA,CAAA;YAAA,CAAA;QAAA,CAS7D;QAAA,MAAA,CALIsqB,CAAAA,CAAWtqB,MAAAA,GAAS,CAAA,KACvBzD,CAAAA,CAAKK,UAAAA,GAAaL,CAAAA,CAAKK,UAAAA,IAAc,CAAA;QAAA,CAAA,EACrCL,CAAAA,CAAKK,UAAAA,CAAWjB,EAAAA,IAAQ,CAAE8tB;YAAAA,OAAAA,EAASa,CAAAA;QAAAA,CAAAA,GAAAA,IAAAA;IAAAA,CAAAA;;AAjHzBlB,EAAAA,CAEW1tB,cAAAA,GAAiBC,EAAAA;AChF5B+uB,KAAAA,CAAAA,EAAAA,GAAqB,CACjC3Z;IAAAA,EAAAA;IACAuG,EAAAA;IACAgD,EAAAA;IACAoB,EAAAA;IACAO,EAAAA;IACA0B,EAAAA;IACA2C,EAAAA;IACApB,EAAAA;IACAiC,EAAAA;IACAK,EAAAA;IACAoB,EAAAA;IACAkC,EAAAA;IACAM,EAAAA;IACAuB,EAAAA;IACAa,EAAAA;IACA4B,EAAAA;AAAAA,CAAAA,EAGYuB,EAAAA,GAAiB,CAAC/uB;IAAAA,CAAAA;IAAmBmI,CAAAA;IAAoBwG,CAAAA;OAAgBmgB,EzCjCzE1wB;AAAAA,CAAAA;;;;;sD2CCA4wB,CAAAA;;sDAAAA,CAAAA;;mDAAAA,CAAAA;;wDAAAA,CAAAA;;+CAAAA,CAAAA;;+CAAAA,CAAAA;;mDAAAA,CAAAA;;gEAAAA,CAAAA;;kDAAAA,CAAAA;;0CAAAA,CAAAA;;2CAAAA,CAAAA;;;AAAAA,KAAAA,CAAAA,CAAAA,GAAM,GAAA,CAAI9kB,UAAAA,CAAW,CAAC;AAAA,KAAA;AAAA,CAAA,GAOtB+kB,CAAAA,GAAU,CAEtB;AAAA,OAAA;AAAM,MAAA;AAAM,MAAA;AAAM,MAAA;AAAM,MAAA;AAAM,MAAA;AAAM,MAAA;AAAM,OAAA;AAAM,MAAA;AAAM,MAAA;AAAM,MAAA;AAAM,MAAA;AAAA,CAAA;ACVvDC,GAAAA,CAAAA,CAAAA,EAYAC,CAAAA,EAIAjF,CAAAA,EAMAkF,CAAAA,EAKAC,CAAAA,EAUAC,CAAAA,EAKAC,CAAAA,EAOAC,CAAAA;CAjDZ,QAAA,CAAYN,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,OAAAA,GAAAA,CAAAA,IAAAA,CAAAA,UACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CAJD,CAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAYZ,QAAA,CAAYC,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,WAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CADD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAIZ,QAAA,CAAYjF,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,WAAAA,GAAAA,CAAAA,IAAAA,CAAAA,cACAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,GAAAA,IAAAA,CAAAA,QACAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,GAAAA,IAAAA,CAAAA;AAAAA,CAHD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAMZ,QAAA,CAAYkF,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,WAAAA,GAAAA,CAAAA,IAAAA,CAAAA,cACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CAFD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAKZ,QAAA,CAAYC,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,WAAAA,GAAAA,CAAAA,IAAAA,CAAAA,cACAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,SACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CAPD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAUZ,QAAA,CAAYC,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,cAAAA,GAAAA,CAAAA,IAAAA,CAAAA,iBACAA,EAAAA,CAAAA,EAAAA,CAAAA,mBAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CAFD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAKZ,QAAA,CAAYC,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MACAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MACAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MACAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,EAAAA,IAAAA,CAAAA;AAAAA,CAJD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA,KAOZ,QAAA,CAAYC,EAAAA,EAAAA,CACXA;IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MACAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAAA,CAAAA;AAAAA,CAJD,EAAYA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA;AAAAA,CAAAA;MCjDCC,CAAAA;iBAAb7pB,CAKQpH;QAAAA,IAAAA,CAAAA,QAAAA,GFkB2B,CAAA,EEZ3BA,IAAAA,CAAAA,QAAAA,GAAmB,CAAA,EAGnBA,IAAAA,CAAAA,UAAAA,GAAqB,CAAA,EAGrBA,IAAAA,CAAAA,WAAAA,GAAsB,CAAA,EAGtBA,IAAAA,CAAAA,UAAAA,GAAqB,CAAA,EAGrBA,IAAAA,CAAAA,UAAAA,GAAqB,CAAA,EAOrBA,IAAAA,CAAAA,SAAAA,GAAoB,CAAA,EAGpBA,IAAAA,CAAAA,sBAAAA,GAAyB0wB,CAAAA,CAA2BlrB,IAAAA,EAGpDxF,IAAAA,CAAAA,MAAAA,GAAsB,CAAA,CAAA,EAGtBA,IAAAA,CAAAA,oBAAAA,GAA8D,CAAC;YAAA,CACrEkxB;gBAAAA,QAAAA,EFpBqC,CAAA;gBEqBrCC,cAAAA,EAAgBR,CAAAA,CAAmBS,WAAAA;gBACnCC,aAAAA,EFrB4B,CAAA;gBEsB5BC,mBAAAA,EFrB8B,EAAA;gBEsB9B7F,UAAAA,EAAYC,CAAAA,CAAU6F,WAAAA;gBACtBC,cAAAA,EAAgBZ,CAAAA,CAAca,IAAAA;gBAC9BC,gBAAAA,EAAkBd,CAAAA,CAAca,IAAAA;gBAChCE,KAAAA,EAAOb,CAAAA,CAAUc,cAAAA;gBACjBC,mBAAAA,EAAqB,CAACC;oBAAAA,CAAAA,EAAG,CAAA;oBAAGC,CAAAA,EAAG,CAAA;oBAAGC,CAAAA,EAAG,CAAA;oBAAGC,CAAAA,EAAG,CAAA;gBAAA,CAAA;gBAC3CC,UAAAA,EAAY,CAAA,CAAA;gBACZtG,OAAAA,EAAS,CAAA,CAAA;YAAA,CAAA;QAAA,CAAA,EAIH5rB,IAAAA,CAAAA,QAAAA,GAAiD,CAAA;QAAA,CAAA,EAGjDA,IAAAA,CAAAA,UAAAA,GAA2C,IAAA;IAAA,CAAA;;MCjEtCmyB,CAAAA;gBAKA/gB,EAAAA,EAAkB7F,EAAAA,EAAoBhE,EAAAA,EAAoB6qB,EAAAA,CAAAA,CACrEpyB;QAAAA,IAAAA,CAAKqyB,SAAAA,GAAY,GAAA,CAAI9iB,QAAAA,CAAS6B,EAAAA,CAAKvF,MAAAA,EAAQuF,EAAAA,CAAK7F,UAAAA,GAAaA,EAAAA,EAAYhE,EAAAA,GACzEvH,IAAAA,CAAKsyB,aAAAA,GAAgBF,EAAAA,EACrBpyB,IAAAA,CAAKuyB,OAAAA,GAAU,CAAA;IAAA,CAGhBC;IAAAA,UAAAA,GAAAA,CACC;QAAA,KAAA,CAAMlE,GAAAA,GAAQtuB,IAAAA,CAAKqyB,SAAAA,CAAU3iB,QAAAA,CAAS1P,IAAAA,CAAKuyB,OAAAA;QAE3C,MAAA,CADAvyB,IAAAA,CAAKuyB,OAAAA,IAAW,CAAA,EACTjE,GAAAA;IAAAA,CAGRmE;IAAAA,WAAAA,GAAAA,CACC;QAAA,KAAA,CAAMnE,GAAAA,GAAQtuB,IAAAA,CAAKqyB,SAAAA,CAAUK,SAAAA,CAAU1yB,IAAAA,CAAKuyB,OAAAA,EAASvyB,IAAAA,CAAKsyB,aAAAA;QAE1D,MAAA,CADAtyB,IAAAA,CAAKuyB,OAAAA,IAAW,CAAA,EACTjE,GAAAA;IAAAA,CAGRqE;IAAAA,WAAAA,GAAAA,CACC;QAAA,KAAA,CAAMrE,GAAAA,GAAQtuB,IAAAA,CAAKqyB,SAAAA,CAAUziB,SAAAA,CAAU5P,IAAAA,CAAKuyB,OAAAA,EAASvyB,IAAAA,CAAKsyB,aAAAA;QAE1D,MAAA,CADAtyB,IAAAA,CAAKuyB,OAAAA,IAAW,CAAA,EACTjE,GAAAA;IAAAA,CAGRsE;IAAAA,WAAAA,GAAAA,CACC;QAAA,KAAA,CAIMtE,GAAAA,GAJOtuB,IAAAA,CAAKqyB,SAAAA,CAAUziB,SAAAA,CAAU5P,IAAAA,CAAKuyB,OAAAA,EAASvyB,IAAAA,CAAKsyB,aAAAA,IAInC,CAAA,IAAK,EAAA,GAHbtyB,IAAAA,CAAKqyB,SAAAA,CAAUziB,SAAAA,CAAU5P,IAAAA,CAAKuyB,OAAAA,GAAU,CAAA,EAAGvyB,IAAAA,CAAKsyB,aAAAA;QAK9D,MAAA,CADAtyB,IAAAA,CAAKuyB,OAAAA,IAAW,CAAA,EACTjE,GAAAA;IAAAA,CAGRuE;IAAAA,KAAAA,CAAMC,GAAAA,EAAAA,CAEL;QAAA,MAAA,CADA9yB,IAAAA,CAAKuyB,OAAAA,IAAWO,GAAAA,EAAAA,IAAAA;IAAAA,CAIjBC;IAAAA,KAAAA,CAAMC,GAAAA,EAAuBC,EAAAA,GAAe,CAAA,EAAA,CAC3C;QAAA,KAAA,CAAM1nB,EAAAA,GAAavL,IAAAA,CAAKuyB,OAAAA;QACxB,GAAA,CAAIhrB,EAAAA,GAAa,CAAA;QACjB,GAAA,GAAOvH,IAAAA,CAAKqyB,SAAAA,CAAU3iB,QAAAA,CAAS1P,IAAAA,CAAKuyB,OAAAA,MAAaU,EAAAA,IAAQ1rB,EAAAA,GAAayrB,GAAAA,EACrEzrB,EAAAA,IACAvH,IAAAA,CAAKuyB,OAAAA;QAKN,MAAA,CAFIhrB,EAAAA,GAAayrB,GAAAA,IAAehzB,IAAAA,CAAKuyB,OAAAA,IAAAA,GAAAA,CAE1B7mB,UAAAA,CACV1L,IAAAA,CAAKqyB,SAAAA,CAAUxmB,MAAAA,EACf7L,IAAAA,CAAKqyB,SAAAA,CAAU9mB,UAAAA,GAAaA,EAAAA,EAC5BhE,EAAAA;IAAAA,CAAAA;;SCvDa2rB,CAAAA,CAAWC,GAAAA,EAAAA,CAC1B;IAAA,MAA2B,CAAA,CAAA,cAAA,MAAA,CAAhBC,WAAAA,IAAAA,GAAAA,CACCA,WAAAA,EAAcC,MAAAA,CAAOF,GAAAA,IAE1BG,MAAAA,CAAO/a,IAAAA,CAAK4a,GAAAA;AAAAA,CAAAA;SAIJhkB,CAAAA,CAAWtD,GAAAA,EAAAA,CAC1B;IAAA,MAA2B,CAAA,CAAA,cAAA,MAAA,CAAhB0nB,WAAAA,IAAAA,GAAAA,CACCA,WAAAA,EAAcC,MAAAA,CAAO3nB,GAAAA,IAE1BynB,MAAAA,CAAO/a,IAAAA,CAAK1M,GAAAA,EAAQ4nB,QAAAA,CAAS,CAAA;AAAA,CAAA;SAIrBrlB,CAAAA,CAAQxC,GAAAA,EAAAA,CACvB;IAAA,GAAA,CAAI8nB,EAAAA,GAAkB,CAAA;IACtB,GAAA,EAAK,KAAA,CAAM7nB,EAAAA,IAAUD,GAAAA,CACpB8nB,EAAAA,IAAmB7nB,EAAAA,CAAOtE,UAAAA;IAG3B,KAAA,CAAM1C,EAAAA,GAAS,GAAA,CAAI6G,UAAAA,CAAWgoB,EAAAA;IAC9B,GAAA,CAAInoB,EAAAA,GAAa,CAAA;IAEjB,GAAA,EAAK,KAAA,CAAMM,EAAAA,IAAUD,GAAAA,CACpB/G,EAAAA,CAAOwH,GAAAA,CAAI,GAAA,CAAIX,UAAAA,CAAWG,EAAAA,GAASN,EAAAA,GACnCA,EAAAA,IAAcM,EAAAA,CAAOtE,UAAAA;IAGtB,MAAA,CAAO1C,EAAAA;AAAAA,CAAAA;SCpBQ7C,CAAAA,CAAKoP,GAAAA,EAAAA,CAMpB;IAAA,KAAA,CAAMuiB,EAAAA,GAAK,GAAA,CAAIjoB,UAAAA,CAAW0F,GAAAA,CAAKvF,MAAAA,EAAQuF,GAAAA,CAAK7F,UAAAA,EAAYklB,CAAAA,CAAQ7qB,MAAAA;IAChE,EAAA,EAAI+tB,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KACrBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,CAAA,MAAOlD,CAAAA,CAAQ,CAAA,KAClBkD,EAAAA,CAAG,EAAA,MAAQlD,CAAAA,CAAQ,EAAA,KACnBkD,EAAAA,CAAG,EAAA,MAAQlD,CAAAA,CAAQ,EAAA,GAEnB,KAAA,CAAA,GAAA,CAAUjqB,KAAAA,CAAM,CAAA;IAGjB,KAAA,CAAM2kB,EAAAA,GAAY,GAAA,CAAI8F,CAAAA,EAMhB2C,EAAAA,GAAmB,EAAA,GAAKnhB,WAAAA,CAAYtL,iBAAAA,EACpC0sB,EAAAA,GAAe,GAAA,CAAI1B,CAAAA,CAAa/gB,GAAAA,EAAMqf,CAAAA,CAAQ7qB,MAAAA,EAAQguB,EAAAA,GAAkB,CAAA;IAE9EzI,EAAAA,CAAU2I,QAAAA,GAAWD,EAAAA,CAAalB,WAAAA,IAClCxH,EAAAA,CAAU4I,QAAAA,GAAWF,EAAAA,CAAalB,WAAAA,IAClCxH,EAAAA,CAAUE,UAAAA,GAAawI,EAAAA,CAAalB,WAAAA,IACpCxH,EAAAA,CAAUG,WAAAA,GAAcuI,EAAAA,CAAalB,WAAAA,IACrCxH,EAAAA,CAAU6I,UAAAA,GAAaH,EAAAA,CAAalB,WAAAA,IACpCxH,EAAAA,CAAU8I,UAAAA,GAAaJ,EAAAA,CAAalB,WAAAA,IACpCxH,EAAAA,CAAU+I,SAAAA,GAAYL,EAAAA,CAAalB,WAAAA;IAEnC,KAAA,CAAMwB,EAAAA,GAAaN,EAAAA,CAAalB,WAAAA;IAEhCxH,EAAAA,CAAUiJ,sBAAAA,GAAyBP,EAAAA,CAAalB,WAAAA;IAEhD,KAAA,CAAM0B,EAAAA,GAAgBR,EAAAA,CAAalB,WAAAA,IAC7B2B,EAAAA,GAAgBT,EAAAA,CAAalB,WAAAA,IAC7B4B,EAAAA,GAAgBV,EAAAA,CAAalB,WAAAA,IAC7B6B,EAAAA,GAAgBX,EAAAA,CAAalB,WAAAA,IAC7B8B,EAAAA,GAAgBZ,EAAAA,CAAajB,WAAAA,IAC7B8B,EAAAA,GAAgBb,EAAAA,CAAajB,WAAAA,IAO7B+B,EAAAA,GAAc,GAAA,CAAIxC,CAAAA,CAAa/gB,GAAAA,EAAMqf,CAAAA,CAAQ7qB,MAAAA,GAASguB,EAAAA,EADvB,CAAA,GAAbO,EAAAA,GAAiB,CAAA,GACsD,CAAA;IAE/F,GAAA,CAAK,GAAA,CAAItuB,EAAAA,GAAI,CAAA,EAAGA,EAAAA,GAAIsuB,EAAAA,EAAYtuB,EAAAA,GAC/BslB,EAAAA,CAAUe,MAAAA,CAAOje,IAAAA,CAAK,CACrB2mB;QAAAA,SAAAA,EAAW,GAAA,CAAIlpB,UAAAA,CAAW0F,GAAAA,CAAKvF,MAAAA,EAAQuF,GAAAA,CAAK7F,UAAAA,GAAaopB,EAAAA,CAAY/B,WAAAA,IAAe+B,EAAAA,CAAY/B,WAAAA;QAChGxG,sBAAAA,EAAwBuI,EAAAA,CAAY/B,WAAAA;IAAAA,CAAAA;IAStC,KAAA,CAAMiC,EAAAA,GAAY,GAAA,CAAI1C,CAAAA,CAAa/gB,GAAAA,EAAMijB,EAAAA,EAAeC,EAAAA,GAAe,CAAA,GAEjE/I,EAAAA,GAA2C,CAChD2F;QAAAA,QAAAA,EAAU2D,EAAAA,CAAUhC,KAAAA,CAAM,CAAA,EAAmBJ,WAAAA;QAC7CtB,cAAAA,EAAgB0D,EAAAA,CAAUpC,WAAAA;QAC1BpB,aAAAA,EAAewD,EAAAA,CAAUpC,WAAAA;QACzBnB,mBAAAA,EAAqBuD,EAAAA,CAAUpC,WAAAA;QAC/BhH,UAAAA,EAAYoJ,EAAAA,CAAUrC,UAAAA;QACtBhB,cAAAA,EAAgBqD,EAAAA,CAAUrC,UAAAA;QAC1Bd,gBAAAA,EAAkBmD,EAAAA,CAAUrC,UAAAA;QAC5Bb,KAAAA,EAAOkD,EAAAA,CAAUrC,UAAAA;QACjBX,mBAAAA,EAAqB,CACpBC;YAAAA,CAAAA,EAAG+C,EAAAA,CAAUrC,UAAAA,KAAe,CAAA;YAC5BT,CAAAA,EAAG8C,EAAAA,CAAUrC,UAAAA,KAAe,CAAA;YAC5BR,CAAAA,EAAG6C,EAAAA,CAAUrC,UAAAA,KAAe,CAAA;YAC5BP,CAAAA,EAAG4C,EAAAA,CAAUrC,UAAAA,KAAe,CAAA;QAAA,CAAA;QAE7BN,UAAAA,EAAY,CACX2C;YAAAA,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;QAAAA,CAAAA;QAEX5G,OAAAA,EAAS,CAAA,CAAA;IAAA,CAAA,EAKJkJ,CAAAA,IAAcvJ,EAAAA,CAAI+F,mBAAAA,GAAsB,CAAA,GAF1B,CAAA,IACA,CAAA;IAGpB,GAAA,CAAK,GAAA,CAAIzrB,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAIivB,CAAAA,EAAYjvB,GAAAA,GAC/B0lB,EAAAA,CAAIK,OAAAA,CAAS/lB,GAAAA,IAAM,CAClBkvB;QAAAA,SAAAA,EAAWF,EAAAA,CAAUpC,WAAAA;QACrBuC,SAAAA,EAAWH,EAAAA,CAAUrC,UAAAA;QACrB3G,SAAAA,EAAWgJ,EAAAA,CAAUrC,UAAAA;QACrByC,cAAAA,EAAgB,CACfJ;YAAAA,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;YACVqC,EAAAA,CAAUrC,UAAAA;QAAAA,CAAAA;QAEX0C,WAAAA,EAAaL,EAAAA,CAAUlC,WAAAA;QACvBwC,WAAAA,EAAaN,EAAAA,CAAUlC,WAAAA;IAAAA,CAAAA;IAIzBxH,EAAAA,CAAUK,oBAAAA,CAAqB5lB,MAAAA,GAAS,CAAA,EACxCulB,EAAAA,CAAUK,oBAAAA,CAAqBvd,IAAAA,CAAKsd,EAAAA;IAOpC,KAAA,CAAM6J,CAAAA,GAAY,GAAA,CAAIjD,CAAAA,CAAa/gB,GAAAA,EAAMmjB,EAAAA,EAAeC,EAAAA,GAAe,CAAA;IAEvE,GAAA,GAAOY,CAAAA,CAAU7C,OAAAA,GAAUiC,EAAAA,EAAe,CACzC;QAAA,KAAA,CAAMa,GAAAA,GAAqBD,CAAAA,CAAUzC,WAAAA,IAC/B2C,EAAAA,GAAUF,CAAAA,CAAUrC,KAAAA,CAAMsC,GAAAA,GAC1BrsB,EAAAA,GAAMmG,CAAAA,CAAWmmB,EAAAA,GAEjBC,EAAAA,GAAYH,CAAAA,CAAUrC,KAAAA,CAAMsC,GAAAA,GAAqBC,EAAAA,CAAQ/tB,UAAAA;QAC/D4jB,EAAAA,CAAUqK,QAAAA,CAASxsB,EAAAA,IAAOA,EAAAA,CAAIgG,KAAAA,YAAiBG,CAAAA,CAAWomB,EAAAA,IAAaA,EAAAA,EAGnEH,CAAAA,CAAU7C,OAAAA,GAAU,CAAA,IAAG6C,CAAAA,CAAUvC,KAAAA,CAAM,CAAA,GAAKuC,CAAAA,CAAU7C,OAAAA,GAAU,CAAA;IAAA,CAQrE;IAAA,EAAA,EAAImC,EAAAA,IAAiB,CAAA,EAAG,MAAA,CAAOvJ,EAAAA;IAE/B,KAAA,CAAMsK,CAAAA,GAAY,GAAA,CAAItD,CAAAA,CAAa/gB,GAAAA,EAAMqjB,EAAAA,EAAeC,EAAAA,GAAe,CAAA,GAEjEgB,CAAAA,GAAgBD,CAAAA,CAAUhD,WAAAA,IAC1BkD,CAAAA,GAAgBF,CAAAA,CAAUhD,WAAAA,IAC1BmD,CAAAA,GAAsBH,CAAAA,CAAU9C,WAAAA,IAChCkD,CAAAA,GAAsBJ,CAAAA,CAAU9C,WAAAA,IAChCmD,CAAAA,GAAmBL,CAAAA,CAAU9C,WAAAA,IAC7BoD,CAAAA,GAAqBN,CAAAA,CAAU9C,WAAAA,IAE/BqD,CAAAA,GAAa,CAAA,CAAA;IACnB,GAAA,CAAK,GAAA,CAAInwB,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAIsuB,EAAAA,EAAYtuB,GAAAA,GAC/BmwB,CAAAA,CAAW/nB,IAAAA,CAAK,CACfgoB;QAAAA,UAAAA,EAAYR,CAAAA,CAAU9C,WAAAA;QACtBuD,kBAAAA,EAAoBT,CAAAA,CAAU9C,WAAAA;QAC9BwD,kBAAAA,EAAoBV,CAAAA,CAAU9C,WAAAA;QAC9ByD,oBAAAA,EAAsBX,CAAAA,CAAU9C,WAAAA;QAChC0D,oBAAAA,EAAsBZ,CAAAA,CAAU9C,WAAAA;IAAAA,CAAAA;IAIlC,KAAA,CAAM2D,CAAAA,GAAsB7B,EAAAA,GAAgBgB,CAAAA,CAAUlD,OAAAA,EAChDgE,CAAAA,GAAsBD,CAAAA,GAAsBV,CAAAA,EAC5CY,CAAAA,GAAmBD,CAAAA,GAAsBV,CAAAA,EACzCY,CAAAA,GAAqBD,CAAAA,GAAmBV,CAAAA,EAExCY,CAAAA,GAAgB,GAAA,CAAIhrB,UAAAA,CAAW0F,GAAAA,CAAKvF,MAAAA,EAAQuF,GAAAA,CAAK7F,UAAAA,GAAa+qB,CAAAA,EAAqBV,CAAAA,GACnFe,CAAAA,GAAgB,GAAA,CAAIjrB,UAAAA,CAAW0F,GAAAA,CAAKvF,MAAAA,EAAQuF,GAAAA,CAAK7F,UAAAA,GAAagrB,CAAAA,EAAqBV,CAAAA,GACnFe,CAAAA,GAAa,GAAA,CAAIlrB,UAAAA,CAAW0F,GAAAA,CAAKvF,MAAAA,EAAQuF,GAAAA,CAAK7F,UAAAA,GAAairB,CAAAA,EAAkBV,CAAAA,GAC7Ee,CAAAA,GAAe,GAAA,CAAInrB,UAAAA,CAAW0F,GAAAA,CAAKvF,MAAAA,EAAQuF,GAAAA,CAAK7F,UAAAA,GAAakrB,CAAAA,EAAoBV,CAAAA;IAYvF,MAAA,CAVA5K,EAAAA,CAAU2L,UAAAA,GAAa,CACtBpB;QAAAA,aAAAA,EAAAA,CAAAA;QACAC,aAAAA,EAAAA,CAAAA;QACAK,UAAAA,EAAAA,CAAAA;QACAU,aAAAA,EAAAA,CAAAA;QACAC,aAAAA,EAAAA,CAAAA;QACAC,UAAAA,EAAAA,CAAAA;QACAC,YAAAA,EAAAA,CAAAA;IAAAA,CAAAA,EAGM1L,EAAAA;AAAAA,CAAAA;SAAAA,CAAAA,GAAAA,CAAAA;IAAAA,MAAAA,EAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,QAAAA,CAAAA,GAAAA,EAAAA,CAAAA;QAAAA,GAAAA,CAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,EAAAA,GAAAA,CAAAA;YAAAA,GAAAA,CAAAA,EAAAA,GAAAA,SAAAA,CAAAA,EAAAA;YAAAA,GAAAA,CAAAA,GAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,EAAAA;QAAAA,CAAAA;QAAAA,MAAAA,CAAAA,GAAAA;IAAAA,CAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;AAAAA,CCnMR;AAAA,KAAA,CAAM4L,CAAAA,GAAgC,CAACC;IAAAA,UAAAA,GAAY,CAAA;AAAA,CAAA;SAcnC5zB,CAAAA,CAAM+nB,EAAAA,EAA0BtgB,EAAAA,GAAwB,CAAA;AAAA,CAAA,EAAA,CACvEA;IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA;IAAAA,CAAAA,EAAcksB,CAAAA,EAAoBlsB,EAAAA;IAMlC,GAAA,CAAIosB,EAAAA,GAAY,GAAA,CAAIC,WAAAA,CAAY,CAAA;IAChC,EAAA,EAAI/L,EAAAA,CAAU2L,UAAAA,EAAY,CACzB;QAAA,KAAA,CAAMK,GAAAA,GAAkB,GAAA,CAAID,WAAAA,CAAY,EAAA,GAA8C,CAAA,GAAzC/L,EAAAA,CAAU2L,UAAAA,CAAWd,UAAAA,CAAWpwB,MAAAA,GAAa,CAAA,GACpFwxB,EAAAA,GAAgB,GAAA,CAAI7nB,QAAAA,CAAS4nB,GAAAA;QACnCC,EAAAA,CAAcC,SAAAA,CAAU,CAAA,EAAGlM,EAAAA,CAAU2L,UAAAA,CAAWpB,aAAAA,GAAe,CAAA,GAC/D0B,EAAAA,CAAcC,SAAAA,CAAU,CAAA,EAAGlM,EAAAA,CAAU2L,UAAAA,CAAWnB,aAAAA,GAAe,CAAA,GAC/DyB,EAAAA,CAAcE,SAAAA,CAAU,CAAA,EAAGnM,EAAAA,CAAU2L,UAAAA,CAAWJ,aAAAA,CAAcnvB,UAAAA,GAAY,CAAA,GAC1E6vB,EAAAA,CAAcE,SAAAA,CAAU,CAAA,EAAGnM,EAAAA,CAAU2L,UAAAA,CAAWH,aAAAA,CAAcpvB,UAAAA,GAAY,CAAA,GAC1E6vB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAU2L,UAAAA,CAAWF,UAAAA,CAAWrvB,UAAAA,GAAY,CAAA,GACxE6vB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAU2L,UAAAA,CAAWD,YAAAA,CAAatvB,UAAAA,GAAY,CAAA;QAE1E,GAAA,CAAK,GAAA,CAAI1B,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAIslB,EAAAA,CAAU2L,UAAAA,CAAWd,UAAAA,CAAWpwB,MAAAA,EAAQC,GAAAA,GAAK,CAChE;YAAA,KAAA,CAAM0xB,EAAAA,GAAYpM,EAAAA,CAAU2L,UAAAA,CAAWd,UAAAA,CAAWnwB,GAAAA;YAClDuxB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,GAAS,CAAA,GAAJzxB,GAAAA,GAAQ,CAAA,GAAI,CAAA,EAAG0xB,EAAAA,CAAUtB,UAAAA,GAAY,CAAA,GAClEmB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,GAAS,CAAA,GAAJzxB,GAAAA,GAAQ,CAAA,GAAI,CAAA,EAAG0xB,EAAAA,CAAUrB,kBAAAA,GAAoB,CAAA,GAC1EkB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,GAAS,CAAA,GAAJzxB,GAAAA,GAAQ,CAAA,GAAI,CAAA,EAAG0xB,EAAAA,CAAUpB,kBAAAA,GAAoB,CAAA,GAC1EiB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,GAAS,CAAA,GAAJzxB,GAAAA,GAAQ,CAAA,GAAI,EAAA,EAAI0xB,EAAAA,CAAUnB,oBAAAA,GAAsB,CAAA,GAC7EgB,EAAAA,CAAcE,SAAAA,CAAU,EAAA,GAAS,CAAA,GAAJzxB,GAAAA,GAAQ,CAAA,GAAI,EAAA,EAAI0xB,EAAAA,CAAUlB,oBAAAA,GAAsB,CAAA;QAAA,CAG9EY;QAAAA,EAAAA,GAAY7oB,CAAAA,CAAO,CAClB+oB;YAAAA,GAAAA;YACAhM,EAAAA,CAAU2L,UAAAA,CAAWJ,aAAAA;YACrBvL,EAAAA,CAAU2L,UAAAA,CAAWH,aAAAA;YACrBxL,EAAAA,CAAU2L,UAAAA,CAAWF,UAAAA;YACrBzL,EAAAA,CAAU2L,UAAAA,CAAWD,YAAAA;QAAAA,CAAAA;IAAAA,CASvB;IAAA,KAAA,CAAMW,EAAAA,GAA6B,CAAA,CAAA;IACnC,GAAA,CAAIhC,EAAAA,GAAWrK,EAAAA,CAAUqK,QAAAA;IAEpB3qB,EAAAA,CAAQmsB,UAAAA,KACZxB,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA;IAAAA,CAAAA,EAAerK,EAAAA,CAAUqK,QAAAA,EAAAA,CAAUiC;QAAAA,SAAAA,EAAAA,CAAAA;IAAAA,CAAAA;IAGpC,GAAA,CAAK,KAAA,CAAMzuB,EAAAA,IAAOwsB,EAAAA,CAAU,CAC3B;QAAA,KAAA,CAAMlH,EAAAA,GAAQkH,EAAAA,CAASxsB,EAAAA,GACjBssB,EAAAA,GAAUpC,CAAAA,CAAWlqB,EAAAA,GACrBusB,EAAAA,GAA6B,CAAA,WAAA,MAAA,CAAVjH,EAAAA,GAAqB4E,CAAAA,CAAW5E,EAAAA,IAASA,EAAAA,EAC5DoJ,EAAAA,GAAepC,EAAAA,CAAQ/tB,UAAAA,GAAa,CAAA,GAAIguB,EAAAA,CAAUhuB,UAAAA,GAAa,CAAA,EAC/DowB,EAAAA,GAAYD,EAAAA,GAAe,CAAA,GAAK,CAAA,GAAKA,EAAAA,GAAe,CAAA,GAAM,CAAA;QAChEF,EAAAA,CAAavpB,IAAAA,CAAKG,CAAAA,CAAO,CACxB;YAAA,GAAA,CAAIqE,WAAAA,CAAY,CAACilB;gBAAAA,EAAAA;YAAAA,CAAAA;YACjBpC,EAAAA;YACA9E,CAAAA;YACA+E,EAAAA;YACA/E,CAAAA;YACA,GAAA,CAAI9kB,UAAAA,CAAWisB,EAAAA,EAAWC,IAAAA,CAAK,CAAA;QAAA,CAAA;IAAA,CAIjC;IAAA,KAAA,CAAMC,EAAAA,GAAYzpB,CAAAA,CAAOopB,EAAAA;IAOzB,EAAA,EAA8C,CAAA,KAA1CrM,EAAAA,CAAUK,oBAAAA,CAAqB5lB,MAAAA,IAC9BulB,EAAAA,CAAUK,oBAAAA,CAAqB,CAAA,EAAG2F,cAAAA,KAAmBR,CAAAA,CAAmBS,WAAAA,EAC5E,KAAA,CAAA,GAAA,CAAU5qB,KAAAA,CAAM,CAAA;IAGjB,KAAA,CAAM+kB,EAAAA,GAAMJ,EAAAA,CAAUK,oBAAAA,CAAqB,CAAA,GAErCsM,EAAAA,GAAY,GAAA,CAAIZ,WAAAA,CAAY,EAAA,GAA0B,EAAA,GAArB3L,EAAAA,CAAIK,OAAAA,CAAQhmB,MAAAA,GAC7CmyB,EAAAA,GAAU,GAAA,CAAIxoB,QAAAA,CAASuoB,EAAAA;IAE7BC,EAAAA,CAAQT,SAAAA,CAAU,CAAA,EAAGQ,EAAAA,CAAUvwB,UAAAA,GAAY,CAAA,GAC3CwwB,EAAAA,CAAQV,SAAAA,CAAU,CAAA,EAAG9L,EAAAA,CAAI2F,QAAAA,GAAU,CAAA,GACnC6G,EAAAA,CAAQV,SAAAA,CAAU,CAAA,EAAG9L,EAAAA,CAAI4F,cAAAA,GAAgB,CAAA,GACzC4G,EAAAA,CAAQV,SAAAA,CAAU,CAAA,EAAG9L,EAAAA,CAAI8F,aAAAA,GAAe,CAAA,GACxC0G,EAAAA,CAAQV,SAAAA,CAAU,EAAA,EAAI9L,EAAAA,CAAI+F,mBAAAA,GAAqB,CAAA,GAE/CyG,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIE,UAAAA,GACzBsM,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIiG,cAAAA,GACzBuG,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAImG,gBAAAA,GACzBqG,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIoG,KAAAA,GAEzBoG,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIsG,mBAAAA,CAAoBC,CAAAA,GAAI,CAAA,GACjDiG,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIsG,mBAAAA,CAAoBE,CAAAA,GAAI,CAAA,GACjDgG,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIsG,mBAAAA,CAAoBG,CAAAA,GAAI,CAAA,GACjD+F,EAAAA,CAAQC,QAAAA,CAAS,EAAA,EAAIzM,EAAAA,CAAIsG,mBAAAA,CAAoBI,CAAAA,GAAI,CAAA;IAEjD,GAAA,CAAK,GAAA,CAAIpsB,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAKkyB,EAAAA,CAAQC,QAAAA,CAAS,EAAA,GAAKnyB,GAAAA,EAAG0lB,EAAAA,CAAI2G,UAAAA,CAAWrsB,GAAAA;IAEpE,GAAA,CAAK,GAAA,CAAIA,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAI0lB,EAAAA,CAAIK,OAAAA,CAAQhmB,MAAAA,EAAQC,GAAAA,GAAK,CAC5C;QAAA,KAAA,CAAMoyB,GAAAA,GAAS1M,EAAAA,CAAIK,OAAAA,CAAQ/lB,GAAAA,GACrBqyB,GAAAA,GAAmB,EAAA,GAAS,EAAA,GAAJryB,GAAAA;QAE9BkyB,EAAAA,CAAQV,SAAAA,CAAUa,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOlD,SAAAA,GAAW,CAAA,GAC1DgD,EAAAA,CAAQC,QAAAA,CAASE,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOjD,SAAAA,GAC9C+C,EAAAA,CAAQC,QAAAA,CAASE,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOpM,SAAAA,GAE9CkM,EAAAA,CAAQC,QAAAA,CAASE,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOhD,cAAAA,CAAe,CAAA,IAC7D8C,EAAAA,CAAQC,QAAAA,CAASE,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOhD,cAAAA,CAAe,CAAA,IAC7D8C,EAAAA,CAAQC,QAAAA,CAASE,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOhD,cAAAA,CAAe,CAAA,IAC7D8C,EAAAA,CAAQC,QAAAA,CAASE,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAOhD,cAAAA,CAAe,CAAA,IAE7D8C,EAAAA,CAAQT,SAAAA,CAAUY,GAAAA,GAAmB,CAAA,EAAGD,GAAAA,CAAO/C,WAAAA,GAAa,CAAA,GAC5D6C,EAAAA,CAAQT,SAAAA,CAAUY,GAAAA,GAAmB,EAAA,EAAID,GAAAA,CAAO9C,WAAAA,GAAa,CAAA;IAAA,CAQ9D;IAAA,KAAA,CAAMd,EAAAA,GAAgB5D,CAAAA,CAAQ7qB,MAAAA,GNxHG,EAAA,GMwHqD,CAAA,GAA1BulB,EAAAA,CAAUe,MAAAA,CAAOtmB,MAAAA,GAAa,CAAA,EACpF2uB,EAAAA,GAAgBF,EAAAA,GAAgByD,EAAAA,CAAUvwB,UAAAA;IAChD,GAAA,CAAIktB,EAAAA,GAAgBF,EAAAA,GAAgBsD,EAAAA,CAAUtwB,UAAAA;IAC1CktB,EAAAA,GAAgB,CAAA,KAAGA,EAAAA,IAAiB,CAAA,GAAKA,EAAAA,GAAgB,CAAA;IAO7D,KAAA,CAAMG,CAAAA,GAA0B,CAAA,CAAA,EAC1BuD,CAAAA,GAAa,GAAA,CAAI5oB,QAAAA,CAAS,GAAA,CAAI2nB,WAAAA,CAAsC,CAAA,GAA1B/L,EAAAA,CAAUe,MAAAA,CAAOtmB,MAAAA,GAAa,CAAA;IAE9E,GAAA,CAAIwyB,CAAAA,GAAsB3D,EAAAA,GAAgBwC,EAAAA,CAAU1vB,UAAAA;IACpD,GAAA,CAAK,GAAA,CAAI1B,GAAAA,GAAI,CAAA,EAAGA,GAAAA,GAAIslB,EAAAA,CAAUe,MAAAA,CAAOtmB,MAAAA,EAAQC,GAAAA,GAAK,CACjD;QAAA,KAAA,CAAMsmB,GAAAA,GAAQhB,EAAAA,CAAUe,MAAAA,CAAOrmB,GAAAA;QAC/B+uB,CAAAA,CAAU3mB,IAAAA,CAAKke,GAAAA,CAAMyI,SAAAA,GACrBuD,CAAAA,CAAWE,YAAAA,CAAiB,EAAA,GAAJxyB,GAAAA,GAAS,CAAA,EAAGyyB,MAAAA,CAAOF,CAAAA,IAAsB,CAAA,GACjED,CAAAA,CAAWE,YAAAA,CAAiB,EAAA,GAAJxyB,GAAAA,GAAS,CAAA,EAAGyyB,MAAAA,CAAOnM,GAAAA,CAAMyI,SAAAA,CAAUrtB,UAAAA,IAAa,CAAA,GACxE4wB,CAAAA,CAAWE,YAAAA,CAAiB,EAAA,GAAJxyB,GAAAA,GAAS,EAAA,EAAIyyB,MAAAA,CAAOnM,GAAAA,CAAMC,sBAAAA,IAAyB,CAAA,GAC3EgM,CAAAA,IAAuBjM,GAAAA,CAAMyI,SAAAA,CAAUrtB,UAAAA;IAAAA,CAQxC;IAAA,KAAA,CAAMgxB,CAAAA,GAAe,GAAA,CAAIrB,WAAAA,CNpJQ,EAAA,GMqJ3BsB,CAAAA,GAAa,GAAA,CAAIjpB,QAAAA,CAASgpB,CAAAA;IAuBhC,MAAA,CAtBAC,CAAAA,CAAWlB,SAAAA,CAAU,CAAA,EAAGnM,EAAAA,CAAU2I,QAAAA,GAAU,CAAA,GAC5C0E,CAAAA,CAAWlB,SAAAA,CAAU,CAAA,EAAGnM,EAAAA,CAAU4I,QAAAA,GAAU,CAAA,GAC5CyE,CAAAA,CAAWlB,SAAAA,CAAU,CAAA,EAAGnM,EAAAA,CAAUE,UAAAA,GAAY,CAAA,GAC9CmN,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAUG,WAAAA,GAAa,CAAA,GAChDkN,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAU6I,UAAAA,GAAY,CAAA,GAC/CwE,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAU8I,UAAAA,GAAY,CAAA,GAC/CuE,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAU+I,SAAAA,GAAW,CAAA,GAC9CsE,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAUe,MAAAA,CAAOtmB,MAAAA,GAAQ,CAAA,GAClD4yB,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAInM,EAAAA,CAAUiJ,sBAAAA,GAAwB,CAAA,GAE3DoE,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAIjD,EAAAA,GAAe,CAAA,GACxCmE,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAIQ,EAAAA,CAAUvwB,UAAAA,GAAY,CAAA,GAC/CixB,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAI/C,EAAAA,GAAe,CAAA,GACxCiE,CAAAA,CAAWlB,SAAAA,CAAU,EAAA,EAAIO,EAAAA,CAAUtwB,UAAAA,GAAY,CAAA,GAC/CixB,CAAAA,CAAWH,YAAAA,CAAa,EAAA,EAAIC,MAAAA,CAAO7D,EAAAA,IAAgB,CAAA,GACnD+D,CAAAA,CAAWH,YAAAA,CAAa,EAAA,EAAIC,MAAAA,CAAOrB,EAAAA,CAAU1vB,UAAAA,IAAa,CAAA,GAAA,GAAA,CAO/CmE,UAAAA,CAAW0C,CAAAA,CAAO,CAC5B;QAAA,GAAA,CAAI1C,UAAAA,CAAW+kB,CAAAA,EAAS5kB,MAAAA;QACxB0sB,CAAAA;QACAJ,CAAAA,CAAWtsB,MAAAA;QACXisB,EAAAA;QACAD,EAAAA;QACA,GAAA,CAAIX,WAAAA,CAAYzC,EAAAA,IAAiBF,EAAAA,GAAgBsD,EAAAA,CAAUtwB,UAAAA;QAC3D0vB,EAAAA;WACGrC,CNhMQpE;IAAAA,CAAAA;AAAAA,CAAAA","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-d0c1bce462a6a066.js","node_modules/@gltf-transform/extensions/dist/extensions.modern.js","node_modules/@gltf-transform/extensions/src/ext-mesh-gpu-instancing/instanced-mesh.ts","node_modules/@gltf-transform/extensions/src/constants.ts","node_modules/@gltf-transform/extensions/src/ext-mesh-gpu-instancing/mesh-gpu-instancing.ts","node_modules/@gltf-transform/extensions/src/ext-meshopt-compression/constants.ts","node_modules/@gltf-transform/extensions/src/ext-meshopt-compression/encoder.ts","node_modules/@gltf-transform/extensions/src/ext-meshopt-compression/meshopt-compression.ts","node_modules/@gltf-transform/extensions/src/ext-meshopt-compression/decoder.ts","node_modules/@gltf-transform/extensions/src/ext-texture-webp/texture-webp.ts","node_modules/@gltf-transform/extensions/src/khr-draco-mesh-compression/decoder.ts","node_modules/@gltf-transform/extensions/src/khr-draco-mesh-compression/encoder.ts","node_modules/@gltf-transform/extensions/src/khr-draco-mesh-compression/draco-mesh-compression.ts","node_modules/@gltf-transform/extensions/src/khr-lights-punctual/light.ts","node_modules/@gltf-transform/extensions/src/khr-lights-punctual/lights-punctual.ts","node_modules/@gltf-transform/extensions/src/khr-materials-clearcoat/clearcoat.ts","node_modules/@gltf-transform/extensions/src/khr-materials-clearcoat/materials-clearcoat.ts","node_modules/@gltf-transform/extensions/src/khr-materials-emissive-strength/emissive-strength.ts","node_modules/@gltf-transform/extensions/src/khr-materials-emissive-strength/materials-emissive-strength.ts","node_modules/@gltf-transform/extensions/src/khr-materials-ior/ior.ts","node_modules/@gltf-transform/extensions/src/khr-materials-ior/materials-ior.ts","node_modules/@gltf-transform/extensions/src/khr-materials-pbr-specular-glossiness/pbr-specular-glossiness.ts","node_modules/@gltf-transform/extensions/src/khr-materials-pbr-specular-glossiness/materials-pbr-specular-glossiness.ts","node_modules/@gltf-transform/extensions/src/khr-materials-sheen/sheen.ts","node_modules/@gltf-transform/extensions/src/khr-materials-sheen/materials-sheen.ts","node_modules/@gltf-transform/extensions/src/khr-materials-specular/specular.ts","node_modules/@gltf-transform/extensions/src/khr-materials-specular/materials-specular.ts","node_modules/@gltf-transform/extensions/src/khr-materials-transmission/transmission.ts","node_modules/@gltf-transform/extensions/src/khr-materials-transmission/materials-transmission.ts","node_modules/@gltf-transform/extensions/src/khr-materials-unlit/unlit.ts","node_modules/@gltf-transform/extensions/src/khr-materials-unlit/materials-unlit.ts","node_modules/@gltf-transform/extensions/src/khr-materials-variants/mapping.ts","node_modules/@gltf-transform/extensions/src/khr-materials-variants/mapping-list.ts","node_modules/@gltf-transform/extensions/src/khr-materials-variants/variant.ts","node_modules/@gltf-transform/extensions/src/khr-materials-variants/materials-variants.ts","node_modules/@gltf-transform/extensions/src/khr-materials-volume/volume.ts","node_modules/@gltf-transform/extensions/src/khr-materials-volume/materials-volume.ts","node_modules/@gltf-transform/extensions/src/khr-mesh-quantization/mesh-quantization.ts","node_modules/@gltf-transform/extensions/src/khr-texture-basisu/texture-basisu.ts","node_modules/@gltf-transform/extensions/src/khr-texture-transform/transform.ts","node_modules/@gltf-transform/extensions/src/khr-texture-transform/texture-transform.ts","node_modules/@gltf-transform/extensions/src/khr-xmp-json-ld/packet.ts","node_modules/@gltf-transform/extensions/src/khr-xmp-json-ld/xmp.ts","node_modules/@gltf-transform/extensions/src/extensions.ts","node_modules/ktx-parse/dist/ktx-parse.modern.js","node_modules/ktx-parse/src/constants.ts","node_modules/ktx-parse/src/enums.ts","node_modules/ktx-parse/src/container.ts","node_modules/ktx-parse/src/buffer-reader.ts","node_modules/ktx-parse/src/util.ts","node_modules/ktx-parse/src/read.ts","node_modules/ktx-parse/src/write.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"c945cc02085c094d\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}",null,"import { Accessor, ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { EXT_MESH_GPU_INSTANCING } from '../constants';\n\ninterface IInstancedMesh extends IProperty {\n\tattributes: { [key: string]: Accessor };\n}\n\n// See BufferViewUsage in `writer-context.ts`.\nexport const INSTANCE_ATTRIBUTE = 'INSTANCE_ATTRIBUTE';\n\n/**\n * # InstancedMesh\n *\n * Defines GPU instances of a {@link Mesh} under one {@link Node}. See {@link MeshGPUInstancing}.\n */\nexport class InstancedMesh extends ExtensionProperty<IInstancedMesh> {\n\tpublic static EXTENSION_NAME = EXT_MESH_GPU_INSTANCING;\n\tpublic declare extensionName: typeof EXT_MESH_GPU_INSTANCING;\n\tpublic declare propertyType: 'InstancedMesh';\n\tpublic declare parentTypes: [PropertyType.NODE];\n\n\tprotected init(): void {\n\t\tthis.extensionName = EXT_MESH_GPU_INSTANCING;\n\t\tthis.propertyType = 'InstancedMesh';\n\t\tthis.parentTypes = [PropertyType.NODE];\n\t}\n\n\tprotected getDefaults(): Nullable<IInstancedMesh> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { attributes: {} });\n\t}\n\n\t/** Returns an instance attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\treturn this.getRefMap('attributes', semantic);\n\t}\n\n\t/**\n\t * Sets an instance attribute to an {@link Accessor}. All attributes must have the same\n\t * instance count.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\treturn this.setRefMap('attributes', semantic, accessor, { usage: INSTANCE_ATTRIBUTE });\n\t}\n\n\t/**\n\t * Lists all instance attributes {@link Accessor}s associated with the InstancedMesh. Order\n\t * will be consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.listRefMapValues('attributes');\n\t}\n\n\t/**\n\t * Lists all instance attribute semantics associated with the primitive. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.listRefMapKeys('attributes');\n\t}\n}\n","export const EXT_MESH_GPU_INSTANCING = 'EXT_mesh_gpu_instancing';\nexport const EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\nexport const EXT_TEXTURE_WEBP = 'EXT_texture_webp';\nexport const KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport const KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const KHR_MATERIALS_CLEARCOAT = 'KHR_materials_clearcoat';\nexport const KHR_MATERIALS_EMISSIVE_STRENGTH = 'KHR_materials_emissive_strength';\nexport const KHR_MATERIALS_IOR = 'KHR_materials_ior';\nexport const KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS = 'KHR_materials_pbrSpecularGlossiness';\nexport const KHR_MATERIALS_SHEEN = 'KHR_materials_sheen';\nexport const KHR_MATERIALS_SPECULAR = 'KHR_materials_specular';\nexport const KHR_MATERIALS_TRANSMISSION = 'KHR_materials_transmission';\nexport const KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport const KHR_MATERIALS_VOLUME = 'KHR_materials_volume';\nexport const KHR_MATERIALS_VARIANTS = 'KHR_materials_variants';\nexport const KHR_MESH_QUANTIZATION = 'KHR_mesh_quantization';\nexport const KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\nexport const KHR_TEXTURE_TRANSFORM = 'KHR_texture_transform';\nexport const KHR_XMP_JSON_LD = 'KHR_xmp_json_ld';\n","import { Extension, PropertyType, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { EXT_MESH_GPU_INSTANCING } from '../constants';\nimport { InstancedMesh, INSTANCE_ATTRIBUTE } from './instanced-mesh';\n\nconst NAME = EXT_MESH_GPU_INSTANCING;\n\ninterface InstancedMeshDef {\n\tattributes: {\n\t\t[name: string]: number;\n\t};\n}\n\n/**\n * # MeshGPUInstancing\n *\n * [`EXT_mesh_gpu_instancing`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/)\n * prepares mesh data for efficient GPU instancing.\n *\n * [[include:VENDOR_EXTENSIONS_NOTE.md]]\n *\n * GPU instancing allows engines to render many copies of a single mesh at once using a small number\n * of draw calls. Instancing is particularly useful for things like trees, grass, road signs, etc.\n * Keep in mind that predefined batches, as used in this extension, may prevent frustum culling\n * within a batch. Dividing batches into collocated cells may be preferable to using a single large\n * batch.\n *\n * > _**NOTICE:** While this extension stores mesh data optimized for GPU instancing, it\n * > is important to note that (1) GPU instancing and other optimizations are possible — and\n * > encouraged — even without this extension, and (2) other common meanings of the term\n * > \"instancing\" exist, distinct from this extension. See\n * > [Appendix: Motivation and Purpose](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing#appendix-motivation-and-purpose)\n * > of the `EXT_mesh_gpu_instancing` specification._\n *\n * Properties:\n * - {@link InstancedMesh}\n *\n * ### Example\n *\n * The `MeshGPUInstancing` class provides a single {@link ExtensionProperty} type, `InstancedMesh`,\n * which may be attached to any {@link Node} instance. For example:\n *\n * ```typescript\n * import { MeshGPUInstancing } from '@gltf-transform/extensions';\n *\n * // Create standard mesh, node, and scene hierarchy.\n * // ...\n *\n * // Assign positions for each instance.\n * const batchPositions = doc.createAccessor('instance_positions')\n * \t.setArray(new Float32Array([\n * \t\t0, 0, 0,\n * \t\t1, 0, 0,\n * \t\t2, 0, 0,\n * \t]))\n * \t.setType(Accessor.Type.VEC3)\n * \t.setBuffer(buffer);\n *\n * // Assign IDs for each instance.\n * const batchIDs = doc.createAccessor('instance_ids')\n * \t.setArray(new Uint8Array([0, 1, 2]))\n * \t.setType(Accessor.Type.SCALAR)\n * \t.setBuffer(buffer);\n *\n * // Create an Extension attached to the Document.\n * const batchExtension = document.createExtension(MeshGPUInstancing)\n * \t.setRequired(true);\n * const batch = batchExtension.createInstancedMesh()\n * \t.setAttribute('TRANSLATION', batchPositions)\n * \t.setAttribute('_ID', batchIDs);\n *\n * node\n * \t.setMesh(mesh)\n * \t.setExtension('EXT_mesh_gpu_instancing', batch);\n * ```\n *\n * Standard instance attributes are `TRANSLATION`, `ROTATION`, and `SCALE`, and support the accessor\n * types allowed by the extension specification. Custom instance attributes are allowed, and should\n * be prefixed with an underscore (`_*`).\n */\nexport class MeshGPUInstancing extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly provideTypes = [PropertyType.NODE];\n\t/** @hidden */\n\tpublic readonly prewriteTypes = [PropertyType.ACCESSOR];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new InstancedMesh property for use on a {@link Node}. */\n\tpublic createInstancedMesh(): InstancedMesh {\n\t\treturn new InstancedMesh(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst nodeDefs = jsonDoc.json.nodes || [];\n\t\tnodeDefs.forEach((nodeDef, nodeIndex) => {\n\t\t\tif (!nodeDef.extensions || !nodeDef.extensions[NAME]) return;\n\n\t\t\tconst instancedMeshDef = nodeDef.extensions[NAME] as InstancedMeshDef;\n\t\t\tconst instancedMesh = this.createInstancedMesh();\n\n\t\t\tfor (const semantic in instancedMeshDef.attributes) {\n\t\t\t\tinstancedMesh.setAttribute(semantic, context.accessors[instancedMeshDef.attributes[semantic]]);\n\t\t\t}\n\n\t\t\tcontext.nodes[nodeIndex].setExtension(NAME, instancedMesh);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic prewrite(context: WriterContext): this {\n\t\t// Set usage for instance attribute accessors, so they are stored in separate buffer\n\t\t// views grouped by parent reference.\n\t\tcontext.accessorUsageGroupedByParent.add(INSTANCE_ATTRIBUTE);\n\t\tfor (const prop of this.properties) {\n\t\t\tfor (const attribute of (prop as InstancedMesh).listAttributes()) {\n\t\t\t\tcontext.addAccessorToUsageGroup(attribute, INSTANCE_ATTRIBUTE);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tconst instancedMesh = node.getExtension<InstancedMesh>(NAME);\n\t\t\t\tif (instancedMesh) {\n\t\t\t\t\tconst nodeIndex = context.nodeIndexMap.get(node)!;\n\t\t\t\t\tconst nodeDef = jsonDoc.json.nodes![nodeIndex];\n\n\t\t\t\t\tconst instancedMeshDef = { attributes: {} } as InstancedMeshDef;\n\n\t\t\t\t\tinstancedMesh.listSemantics().forEach((semantic) => {\n\t\t\t\t\t\tconst attribute = instancedMesh.getAttribute(semantic)!;\n\t\t\t\t\t\tinstancedMeshDef.attributes[semantic] = context.accessorIndexMap.get(attribute)!;\n\t\t\t\t\t});\n\n\t\t\t\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\t\t\t\tnodeDef.extensions[NAME] = instancedMeshDef;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { GLTF, TypedArray } from '@gltf-transform/core';\n\nexport enum EncoderMethod {\n\tQUANTIZE = 'quantize',\n\tFILTER = 'filter',\n}\n\nexport interface MeshoptBufferExtension {\n\tfallback?: boolean;\n}\n\nexport enum MeshoptMode {\n\tATTRIBUTES = 'ATTRIBUTES',\n\tTRIANGLES = 'TRIANGLES',\n\tINDICES = 'INDICES',\n}\n\nexport enum MeshoptFilter {\n\tNONE = 'NONE',\n\tOCTAHEDRAL = 'OCTAHEDRAL',\n\tQUATERNION = 'QUATERNION',\n\tEXPONENTIAL = 'EXPONENTIAL',\n}\n\nexport interface MeshoptBufferViewExtension {\n\tbuffer: number;\n\tbyteOffset: number;\n\tbyteLength: number;\n\tbyteStride: number;\n\tcount: number;\n\tmode: MeshoptMode;\n\tfilter?: MeshoptFilter;\n}\n\n/**\n * When using filters, the accessor definition written to the file will not necessarily have the\n * same properties as the input accessor. For example, octahedral encoding requires int8 or int16\n * output, so float32 input must be ignored.\n */\nexport interface PreparedAccessor {\n\tarray: TypedArray;\n\tbyteStride: number;\n\tnormalized: boolean;\n\tcomponentType: GLTF.AccessorComponentType;\n\tmin?: number[];\n\tmax?: number[];\n}\n","import { PreparedAccessor, MeshoptFilter, MeshoptMode } from './constants';\nimport {\n\tAccessor,\n\tAnimationChannel,\n\tAnimationSampler,\n\tBufferUtils,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPrimitive,\n\tRoot,\n\tTypedArray,\n\tTypedArrayConstructor,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst { BYTE, SHORT, FLOAT } = Accessor.ComponentType;\nconst { normalize, denormalize } = MathUtils;\n\n/** Pre-processes array with required filters or padding. */\nexport function prepareAccessor(\n\taccessor: Accessor,\n\tencoder: typeof MeshoptEncoder,\n\tmode: MeshoptMode,\n\tfilterOptions: { filter: MeshoptFilter; bits?: number }\n): PreparedAccessor {\n\tconst { filter, bits } = filterOptions as { filter: MeshoptFilter; bits: number };\n\tconst result: PreparedAccessor = {\n\t\tarray: accessor.getArray()!,\n\t\tbyteStride: accessor.getElementSize() * accessor.getComponentSize(),\n\t\tcomponentType: accessor.getComponentType(),\n\t\tnormalized: accessor.getNormalized(),\n\t};\n\n\tif (mode !== MeshoptMode.ATTRIBUTES) return result;\n\n\tif (filter !== MeshoptFilter.NONE) {\n\t\tlet array = accessor.getNormalized() ? denormalizeArray(accessor) : new Float32Array(result.array);\n\n\t\tswitch (filter) {\n\t\t\tcase MeshoptFilter.EXPONENTIAL: // → K single-precision floating point values.\n\t\t\t\tresult.byteStride = accessor.getElementSize() * 4;\n\t\t\t\tresult.componentType = FLOAT;\n\t\t\t\tresult.normalized = false;\n\t\t\t\tresult.array = encoder.encodeFilterExp(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tcase MeshoptFilter.OCTAHEDRAL: // → four 8- or 16-bit normalized values.\n\t\t\t\tresult.byteStride = bits > 8 ? 8 : 4;\n\t\t\t\tresult.componentType = bits > 8 ? SHORT : BYTE;\n\t\t\t\tresult.normalized = true;\n\t\t\t\tarray = accessor.getElementSize() === 3 ? padNormals(array) : array;\n\t\t\t\tresult.array = encoder.encodeFilterOct(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tcase MeshoptFilter.QUATERNION: // → four 16-bit normalized values.\n\t\t\t\tresult.byteStride = 8;\n\t\t\t\tresult.componentType = SHORT;\n\t\t\t\tresult.normalized = true;\n\t\t\t\tresult.array = encoder.encodeFilterQuat(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid filter.');\n\t\t}\n\n\t\tresult.min = accessor.getMin([]);\n\t\tresult.max = accessor.getMax([]);\n\t\tif (accessor.getNormalized()) {\n\t\t\tresult.min = result.min.map((v) => denormalize(v, accessor.getComponentType()));\n\t\t\tresult.max = result.max.map((v) => denormalize(v, accessor.getComponentType()));\n\t\t}\n\t\tif (result.normalized) {\n\t\t\tresult.min = result.min.map((v) => normalize(v, result.componentType));\n\t\t\tresult.max = result.max.map((v) => normalize(v, result.componentType));\n\t\t}\n\t} else if (result.byteStride % 4) {\n\t\tresult.array = padArrayElements(result.array, accessor.getElementSize());\n\t\tresult.byteStride = result.array.byteLength / accessor.getCount();\n\t}\n\n\treturn result;\n}\n\nfunction denormalizeArray(attribute: Accessor): Float32Array {\n\tconst componentType = attribute.getComponentType();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\tfor (let i = 0; i < srcArray.length; i++) {\n\t\tdstArray[i] = denormalize(srcArray[i], componentType);\n\t}\n\treturn dstArray;\n}\n\n/** Pads array to 4 byte alignment, required for Meshopt ATTRIBUTE buffer views. */\nexport function padArrayElements<T extends TypedArray>(srcArray: T, elementSize: number): T {\n\tconst byteStride = BufferUtils.padNumber(srcArray.BYTES_PER_ELEMENT * elementSize);\n\tconst elementStride = byteStride / srcArray.BYTES_PER_ELEMENT;\n\tconst elementCount = srcArray.length / elementSize;\n\n\tconst dstArray = new (srcArray.constructor as TypedArrayConstructor)(elementCount * elementStride) as T;\n\n\tfor (let i = 0; i * elementSize < srcArray.length; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[i * elementStride + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\treturn dstArray;\n}\n\n/** Pad normals with a .w component for octahedral encoding. */\nfunction padNormals(srcArray: Float32Array): Float32Array {\n\tconst dstArray = new Float32Array((srcArray.length * 4) / 3);\n\tfor (let i = 0, il = srcArray.length / 3; i < il; i++) {\n\t\tdstArray[i * 4] = srcArray[i * 3];\n\t\tdstArray[i * 4 + 1] = srcArray[i * 3 + 1];\n\t\tdstArray[i * 4 + 2] = srcArray[i * 3 + 2];\n\t}\n\treturn dstArray;\n}\n\nexport function getMeshoptMode(accessor: Accessor, usage: string): MeshoptMode {\n\tif (usage === WriterContext.BufferViewUsage.ELEMENT_ARRAY_BUFFER) {\n\t\tconst isTriangles = accessor.listParents().some((parent) => {\n\t\t\treturn parent instanceof Primitive && parent.getMode() === Primitive.Mode.TRIANGLES;\n\t\t});\n\t\treturn isTriangles ? MeshoptMode.TRIANGLES : MeshoptMode.INDICES;\n\t}\n\n\treturn MeshoptMode.ATTRIBUTES;\n}\n\nexport function getMeshoptFilter(accessor: Accessor, doc: Document): { filter: MeshoptFilter; bits?: number } {\n\tconst refs = doc\n\t\t.getGraph()\n\t\t.listParentEdges(accessor)\n\t\t.filter((edge) => !(edge.getParent() instanceof Root));\n\n\tfor (const ref of refs) {\n\t\tconst refName = ref.getName();\n\t\tconst refKey = (ref.getAttributes().key || '') as string;\n\n\t\t// Indices.\n\t\tif (refName === 'indices') return { filter: MeshoptFilter.NONE };\n\n\t\t// Attributes.\n\t\t//\n\t\t// NOTES:\n\t\t// - Vertex attributes should be filtered IFF they are _not_ quantized in\n\t\t//   'packages/cli/src/transforms/meshopt.ts'.\n\t\t// - POSITION and TEXCOORD_0 could use exponential filtering, but this produces broken\n\t\t//   output in some cases (e.g. Matilda.glb), for unknown reasons. gltfpack uses manual\n\t\t//   quantization for these attributes.\n\t\tif (refName === 'attributes') {\n\t\t\tif (refKey === 'POSITION') return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey === 'TEXCOORD_0') return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey === 'NORMAL') return { filter: MeshoptFilter.OCTAHEDRAL, bits: 8 };\n\t\t\tif (refKey === 'TANGENT') return { filter: MeshoptFilter.OCTAHEDRAL, bits: 8 };\n\t\t\tif (refKey.startsWith('JOINTS_')) return { filter: MeshoptFilter.NONE };\n\t\t\tif (refKey.startsWith('WEIGHTS_')) return { filter: MeshoptFilter.NONE };\n\t\t}\n\n\t\t// Animation.\n\t\tif (refName === 'output') {\n\t\t\tconst targetPath = getTargetPath(accessor);\n\t\t\tif (targetPath === 'rotation') return { filter: MeshoptFilter.QUATERNION, bits: 16 };\n\t\t\tif (targetPath === 'translation') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\t\tif (targetPath === 'scale') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\t\treturn { filter: MeshoptFilter.NONE };\n\t\t}\n\n\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/489\n\t\tif (refName === 'input') return { filter: MeshoptFilter.NONE };\n\n\t\tif (refName === 'inverseBindMatrices') return { filter: MeshoptFilter.NONE };\n\t}\n\n\treturn { filter: MeshoptFilter.NONE };\n}\n\nexport function getTargetPath(accessor: Accessor): GLTF.AnimationChannelTargetPath | null {\n\tfor (const sampler of accessor.listParents()) {\n\t\tif (!(sampler instanceof AnimationSampler)) continue;\n\t\tfor (const channel of sampler.listParents()) {\n\t\t\tif (!(channel instanceof AnimationChannel)) continue;\n\t\t\treturn channel.getTargetPath();\n\t\t}\n\t}\n\treturn null;\n}\n","import {\n\tAccessor,\n\tBuffer,\n\tBufferUtils,\n\tExtension,\n\tGLB_BUFFER,\n\tGLTF,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport { EncoderMethod, MeshoptBufferViewExtension, MeshoptFilter } from './constants';\nimport { EXT_MESHOPT_COMPRESSION } from '../constants';\nimport { getMeshoptFilter, getMeshoptMode, getTargetPath, prepareAccessor } from './encoder';\nimport { isFallbackBuffer } from './decoder';\nimport type { MeshoptEncoder, MeshoptDecoder } from 'meshoptimizer';\n\nconst NAME = EXT_MESHOPT_COMPRESSION;\n\ninterface EncoderOptions {\n\tmethod?: EncoderMethod;\n}\n\nconst DEFAULT_ENCODER_OPTIONS: Required<EncoderOptions> = {\n\tmethod: EncoderMethod.QUANTIZE,\n};\n\ntype MeshoptBufferView = { extensions: { [NAME]: MeshoptBufferViewExtension } };\ntype EncodedBufferView = GLTF.IBufferView & MeshoptBufferView;\n\n/**\n * # MeshoptCompression\n *\n * [`EXT_meshopt_compression`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_meshopt_compression/)\n * provides compression and fast decoding for geometry, morph targets, and animations.\n *\n * [[include:VENDOR_EXTENSIONS_NOTE.md]]\n *\n * Meshopt compression (based on the [meshoptimizer](https://github.com/zeux/meshoptimizer)\n * library) offers a lightweight decoder with very fast runtime decompression, and is\n * appropriate for models of any size. Meshopt can reduce the transmission sizes of geometry,\n * morph targets, animation, and other numeric data stored in buffer views. When textures are\n * large, other complementary compression methods should be used as well.\n *\n * For the full benefits of meshopt compression, **apply gzip, brotli, or another lossless\n * compression method** to the resulting .glb, .gltf, or .bin files. Meshopt specifically\n * pre-optimizes assets for this purpose — without this secondary compression, the size\n * reduction is considerably less.\n *\n * Be aware that decompression happens before uploading to the GPU. While Meshopt decoding is\n * considerably faster than Draco decoding, neither compression method will improve runtime\n * performance directly. To improve framerate, you'll need to simplify the geometry by reducing\n * vertex count or draw calls — not just compress it. Finally, be aware that Meshopt compression is\n * lossy: repeatedly compressing and decompressing a model in a pipeline will lose precision, so\n * compression should generally be the last stage of an art workflow, and uncompressed original\n * files should be kept.\n *\n * The meshoptimizer library ([github](https://github.com/zeux/meshoptimizer/tree/master/js),\n * [npm](https://www.npmjs.com/package/meshoptimizer)) is a required dependency for reading or\n * writing files, and must be provided by the application. Compression may alternatively be applied\n * with the [gltfpack](https://github.com/zeux/meshoptimizer/tree/master/gltf) tool.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { MeshoptCompression } from '@gltf-transform/extensions';\n * import { MeshoptDecoder } from 'meshoptimizer';\n *\n * await MeshoptDecoder.ready;\n *\n * const io = new NodeIO()\n *\t.registerExtensions([MeshoptCompression])\n *\t.registerDependencies({\n *\t\t'meshopt.decoder': MeshoptDecoder,\n *\t\t'meshopt.encoder': MeshoptEncoder,\n *\t});\n *\n * // Read and decode.\n * const document = await io.read('compressed.glb');\n *\n * // Write and encode. (Medium, -c)\n * await document.transform(reorder(), quantize());\n * document.createExtension(MeshoptCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({ method: MeshoptCompression.EncoderMethod.QUANTIZE });\n * await io.write('compressed-medium.glb', document);\n *\n * // Write and encode. (High, -cc)\n * await document.transform(\n * \treorder(),\n * \tquantize({pattern: /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/}),\n * );\n * document.createExtension(MeshoptCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({ method: MeshoptCompression.EncoderMethod.FILTER });\n * await io.write('compressed-high.glb', document);\n * ```\n */\nexport class MeshoptCompression extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.BUFFER, PropertyType.PRIMITIVE];\n\t/** @hidden */\n\tpublic readonly prewriteTypes = [PropertyType.BUFFER, PropertyType.ACCESSOR];\n\t/** @hidden */\n\tpublic readonly readDependencies = ['meshopt.decoder'];\n\t/** @hidden */\n\tpublic readonly writeDependencies = ['meshopt.encoder'];\n\n\tpublic static readonly EXTENSION_NAME = NAME;\n\tpublic static readonly EncoderMethod = EncoderMethod;\n\n\tprivate _decoder: typeof MeshoptDecoder | null = null;\n\tprivate _decoderFallbackBufferMap = new Map<Buffer, Buffer>();\n\tprivate _encoder: typeof MeshoptEncoder | null = null;\n\tprivate _encoderOptions: Required<EncoderOptions> = DEFAULT_ENCODER_OPTIONS;\n\tprivate _encoderFallbackBuffer: Buffer | null = null;\n\tprivate _encoderBufferViews: { [key: string]: EncodedBufferView } = {};\n\tprivate _encoderBufferViewData: { [key: string]: Uint8Array[] } = {};\n\tprivate _encoderBufferViewAccessors: { [key: string]: GLTF.IAccessor[] } = {};\n\n\t/** @hidden */\n\tpublic install(key: string, dependency: unknown): this {\n\t\tif (key === 'meshopt.decoder') {\n\t\t\tthis._decoder = dependency as typeof MeshoptDecoder;\n\t\t}\n\t\tif (key === 'meshopt.encoder') {\n\t\t\tthis._encoder = dependency as typeof MeshoptEncoder;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Configures Meshopt options for quality/compression tuning. The two methods rely on different\n\t * pre-processing before compression, and should be compared on the basis of (a) quality/loss\n\t * and (b) final asset size after _also_ applying a lossless compression such as gzip or brotli.\n\t *\n\t * - QUANTIZE: Default. Pre-process with {@link quantize quantize()} (lossy to specified\n\t * \tprecision) before applying lossless Meshopt compression. Offers a considerable compression\n\t * \tratio with or without further supercompression. Equivalent to `gltfpack -c`.\n\t * - FILTER: Pre-process with lossy filters to improve compression, before applying lossless\n\t *\tMeshopt compression. While output may initially be larger than with the QUANTIZE method,\n\t *\tthis method will benefit more from supercompression (e.g. gzip or brotli). Equivalent to\n\t * \t`gltfpack -cc`.\n\t *\n\t * Output with the FILTER method will generally be smaller after supercompression (e.g. gzip or\n\t * brotli) is applied, but may be larger than QUANTIZE output without it. Decoding is very fast\n\t * with both methods.\n\t *\n\t * Example:\n\t *\n\t * ```ts\n\t * doc.createExtension(MeshoptCompression)\n\t * \t.setRequired(true)\n\t * \t.setEncoderOptions({\n\t * \t\tmethod: MeshoptCompression.EncoderMethod.QUANTIZE\n\t * \t});\n\t * ```\n\t */\n\tpublic setEncoderOptions(options: EncoderOptions): this {\n\t\tthis._encoderOptions = { ...DEFAULT_ENCODER_OPTIONS, ...options };\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Decoding.\n\t */\n\n\t/** @internal Checks preconditions, decodes buffer views, and creates decoded primitives. */\n\tpublic preread(context: ReaderContext, propertyType: PropertyType): this {\n\t\tif (!this._decoder) {\n\t\t\tif (!this.isRequired()) return this;\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"meshopt.decoder\".`);\n\t\t}\n\t\tif (!this._decoder.supported) {\n\t\t\tif (!this.isRequired()) return this;\n\t\t\tthrow new Error(`[${NAME}]: Missing WASM support.`);\n\t\t}\n\n\t\tif (propertyType === PropertyType.BUFFER) {\n\t\t\tthis._prereadBuffers(context);\n\t\t} else if (propertyType === PropertyType.PRIMITIVE) {\n\t\t\tthis._prereadPrimitives(context);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @internal Decode buffer views. */\n\tprivate _prereadBuffers(context: ReaderContext): void {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst viewDefs = jsonDoc.json.bufferViews || [];\n\t\tviewDefs.forEach((viewDef, index) => {\n\t\t\tif (!viewDef.extensions || !viewDef.extensions[NAME]) return;\n\n\t\t\tconst meshoptDef = viewDef.extensions[NAME] as MeshoptBufferViewExtension;\n\t\t\tconst byteOffset = meshoptDef.byteOffset || 0;\n\t\t\tconst byteLength = meshoptDef.byteLength || 0;\n\t\t\tconst count = meshoptDef.count;\n\t\t\tconst stride = meshoptDef.byteStride;\n\t\t\tconst result = new Uint8Array(count * stride);\n\n\t\t\tconst bufferDef = jsonDoc.json.buffers![viewDef.buffer];\n\t\t\t// TODO(cleanup): Should be encapsulated in writer-context.ts.\n\t\t\tconst resource = bufferDef.uri ? jsonDoc.resources[bufferDef.uri] : jsonDoc.resources[GLB_BUFFER];\n\t\t\tconst source = BufferUtils.toView(resource, byteOffset, byteLength);\n\n\t\t\tthis._decoder!.decodeGltfBuffer(result, count, stride, source, meshoptDef.mode, meshoptDef.filter);\n\n\t\t\tcontext.bufferViews[index] = result;\n\t\t});\n\t}\n\n\t/**\n\t * Mark fallback buffers and replacements.\n\t *\n\t * Note: Alignment with primitives is arbitrary; this just needs to happen\n\t * after Buffers have been parsed.\n\t * @internal\n\t */\n\tprivate _prereadPrimitives(context: ReaderContext): void {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst viewDefs = jsonDoc.json.bufferViews || [];\n\n\t\t//\n\t\tviewDefs.forEach((viewDef) => {\n\t\t\tif (!viewDef.extensions || !viewDef.extensions[NAME]) return;\n\n\t\t\tconst meshoptDef = viewDef.extensions[NAME] as MeshoptBufferViewExtension;\n\n\t\t\tconst buffer = context.buffers[meshoptDef.buffer];\n\t\t\tconst fallbackBuffer = context.buffers[viewDef.buffer];\n\t\t\tconst fallbackBufferDef = jsonDoc.json.buffers![viewDef.buffer];\n\t\t\tif (isFallbackBuffer(fallbackBufferDef)) {\n\t\t\t\tthis._decoderFallbackBufferMap.set(fallbackBuffer, buffer);\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @hidden Removes Fallback buffers, if extension is required. */\n\tpublic read(_context: ReaderContext): this {\n\t\tif (!this.isRequired()) return this;\n\n\t\t// Replace fallback buffers.\n\t\tfor (const [fallbackBuffer, buffer] of this._decoderFallbackBufferMap) {\n\t\t\tfor (const parent of fallbackBuffer.listParents()) {\n\t\t\t\tif (parent instanceof Accessor) {\n\t\t\t\t\tparent.swap(fallbackBuffer, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfallbackBuffer.dispose();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Encoding.\n\t */\n\n\t/** @internal Claims accessors that can be compressed and writes compressed buffer views. */\n\tpublic prewrite(context: WriterContext, propertyType: PropertyType): this {\n\t\tif (propertyType === PropertyType.ACCESSOR) {\n\t\t\tthis._prewriteAccessors(context);\n\t\t} else if (propertyType === PropertyType.BUFFER) {\n\t\t\tthis._prewriteBuffers(context);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @internal Claims accessors that can be compressed. */\n\tprivate _prewriteAccessors(context: WriterContext): void {\n\t\tconst json = context.jsonDoc.json;\n\t\tconst encoder = this._encoder!;\n\t\tconst options = this._encoderOptions;\n\n\t\tconst fallbackBuffer = this.document.createBuffer(); // Disposed on write.\n\t\tconst fallbackBufferIndex = this.document.getRoot().listBuffers().indexOf(fallbackBuffer);\n\n\t\tthis._encoderFallbackBuffer = fallbackBuffer;\n\t\tthis._encoderBufferViews = {};\n\t\tthis._encoderBufferViewData = {};\n\t\tthis._encoderBufferViewAccessors = {};\n\n\t\tfor (const accessor of this.document.getRoot().listAccessors()) {\n\t\t\t// See: https://github.com/donmccurdy/glTF-Transform/pull/323#issuecomment-898791251\n\t\t\t// Example: https://skfb.ly/6qAD8\n\t\t\tif (getTargetPath(accessor) === 'weights') continue;\n\n\t\t\tconst usage = context.getAccessorUsage(accessor);\n\t\t\tconst mode = getMeshoptMode(accessor, usage);\n\t\t\tconst filter =\n\t\t\t\toptions.method === EncoderMethod.FILTER\n\t\t\t\t\t? getMeshoptFilter(accessor, this.document)\n\t\t\t\t\t: { filter: MeshoptFilter.NONE };\n\t\t\tconst preparedAccessor = prepareAccessor(accessor, encoder, mode, filter);\n\t\t\tconst { array, byteStride } = preparedAccessor;\n\n\t\t\tconst buffer = accessor.getBuffer();\n\t\t\tif (!buffer) throw new Error(`${NAME}: Missing buffer for accessor.`);\n\t\t\tconst bufferIndex = this.document.getRoot().listBuffers().indexOf(buffer);\n\n\t\t\t// Buffer view grouping key.\n\t\t\tconst key = [usage, mode, filter.filter, byteStride, bufferIndex].join(':');\n\n\t\t\tlet bufferView = this._encoderBufferViews[key];\n\t\t\tlet bufferViewData = this._encoderBufferViewData[key];\n\t\t\tlet bufferViewAccessors = this._encoderBufferViewAccessors[key];\n\n\t\t\t// Write new buffer view, if needed.\n\t\t\tif (!bufferView || !bufferViewData) {\n\t\t\t\tbufferViewAccessors = this._encoderBufferViewAccessors[key] = [];\n\t\t\t\tbufferViewData = this._encoderBufferViewData[key] = [];\n\t\t\t\tbufferView = this._encoderBufferViews[key] = {\n\t\t\t\t\tbuffer: fallbackBufferIndex,\n\t\t\t\t\ttarget: WriterContext.USAGE_TO_TARGET[usage],\n\t\t\t\t\tbyteOffset: 0,\n\t\t\t\t\tbyteLength: 0,\n\t\t\t\t\tbyteStride: usage === WriterContext.BufferViewUsage.ARRAY_BUFFER ? byteStride : undefined,\n\t\t\t\t\textensions: {\n\t\t\t\t\t\t[NAME]: {\n\t\t\t\t\t\t\tbuffer: bufferIndex,\n\t\t\t\t\t\t\tbyteOffset: 0,\n\t\t\t\t\t\t\tbyteLength: 0,\n\t\t\t\t\t\t\tmode: mode,\n\t\t\t\t\t\t\tfilter: filter.filter !== MeshoptFilter.NONE ? filter.filter : undefined,\n\t\t\t\t\t\t\tbyteStride: byteStride,\n\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Write accessor.\n\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\taccessorDef.componentType = preparedAccessor.componentType;\n\t\t\taccessorDef.normalized = preparedAccessor.normalized;\n\t\t\taccessorDef.byteOffset = bufferView.byteLength;\n\t\t\tif (accessorDef.min && preparedAccessor.min) accessorDef.min = preparedAccessor.min;\n\t\t\tif (accessorDef.max && preparedAccessor.max) accessorDef.max = preparedAccessor.max;\n\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\tjson.accessors!.push(accessorDef);\n\t\t\tbufferViewAccessors.push(accessorDef);\n\n\t\t\t// Update buffer view.\n\t\t\tbufferViewData.push(new Uint8Array(array.buffer, array.byteOffset, array.byteLength));\n\t\t\tbufferView.byteLength += array.byteLength;\n\t\t\tbufferView.extensions.EXT_meshopt_compression.count += accessor.getCount();\n\t\t}\n\t}\n\n\t/** @internal Writes compressed buffer views. */\n\tprivate _prewriteBuffers(context: WriterContext): void {\n\t\tconst encoder = this._encoder!;\n\n\t\tfor (const key in this._encoderBufferViews) {\n\t\t\tconst bufferView = this._encoderBufferViews[key];\n\t\t\tconst bufferViewData = this._encoderBufferViewData[key];\n\t\t\tconst buffer = this.document.getRoot().listBuffers()[bufferView.extensions[NAME].buffer];\n\t\t\tconst otherBufferViews = context.otherBufferViews.get(buffer) || [];\n\n\t\t\tconst { count, byteStride, mode } = bufferView.extensions[NAME];\n\t\t\tconst srcArray = BufferUtils.concat(bufferViewData);\n\t\t\tconst dstArray = encoder.encodeGltfBuffer(srcArray, count, byteStride, mode);\n\t\t\tconst compressedData = BufferUtils.pad(dstArray);\n\n\t\t\tbufferView.extensions[NAME].byteLength = dstArray.byteLength;\n\n\t\t\tbufferViewData.length = 0;\n\t\t\tbufferViewData.push(compressedData);\n\t\t\totherBufferViews.push(compressedData);\n\t\t\tcontext.otherBufferViews.set(buffer, otherBufferViews);\n\t\t}\n\t}\n\n\t/** @hidden Puts encoded data into glTF output. */\n\tpublic write(context: WriterContext): this {\n\t\tlet fallbackBufferByteOffset = 0;\n\n\t\t// Write final encoded buffer view properties.\n\t\tfor (const key in this._encoderBufferViews) {\n\t\t\tconst bufferView = this._encoderBufferViews[key];\n\t\t\tconst bufferViewData = this._encoderBufferViewData[key][0];\n\t\t\tconst bufferViewIndex = context.otherBufferViewsIndexMap.get(bufferViewData)!;\n\n\t\t\tconst bufferViewAccessors = this._encoderBufferViewAccessors[key];\n\t\t\tfor (const accessorDef of bufferViewAccessors) {\n\t\t\t\taccessorDef.bufferView = bufferViewIndex;\n\t\t\t}\n\n\t\t\tconst finalBufferViewDef = context.jsonDoc.json.bufferViews![bufferViewIndex];\n\t\t\tconst compressedByteOffset = finalBufferViewDef.byteOffset || 0;\n\n\t\t\tObject.assign(finalBufferViewDef, bufferView);\n\t\t\tfinalBufferViewDef.byteOffset = fallbackBufferByteOffset;\n\t\t\tconst bufferViewExtensionDef = finalBufferViewDef.extensions![NAME] as MeshoptBufferViewExtension;\n\t\t\tbufferViewExtensionDef.byteOffset = compressedByteOffset;\n\n\t\t\tfallbackBufferByteOffset += BufferUtils.padNumber(bufferView.byteLength);\n\t\t}\n\n\t\t// Write final fallback buffer.\n\t\tconst fallbackBuffer = this._encoderFallbackBuffer!;\n\t\tconst fallbackBufferIndex = context.bufferIndexMap.get(fallbackBuffer)!;\n\t\tconst fallbackBufferDef = context.jsonDoc.json.buffers![fallbackBufferIndex];\n\t\tfallbackBufferDef.byteLength = fallbackBufferByteOffset;\n\t\tfallbackBufferDef.extensions = { [NAME]: { fallback: true } };\n\t\tfallbackBuffer.dispose();\n\n\t\treturn this;\n\t}\n}\n","import { EXT_MESHOPT_COMPRESSION } from '../constants';\nimport { GLTF } from '@gltf-transform/core';\nimport { MeshoptBufferExtension } from './constants';\n\n/**\n * Returns true for a fallback buffer, else false.\n *\n *   - All references to the fallback buffer must come from bufferViews that\n *     have a EXT_meshopt_compression extension specified.\n *   - No references to the fallback buffer may come from\n *     EXT_meshopt_compression extension JSON.\n */\nexport function isFallbackBuffer(bufferDef: GLTF.IBuffer): boolean {\n\tif (!bufferDef.extensions || !bufferDef.extensions[EXT_MESHOPT_COMPRESSION]) return false;\n\tconst fallbackDef = bufferDef.extensions[EXT_MESHOPT_COMPRESSION] as MeshoptBufferExtension;\n\treturn !!fallbackDef.fallback;\n}\n","import {\n\tBufferUtils,\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n} from '@gltf-transform/core';\nimport { EXT_TEXTURE_WEBP } from '../constants';\n\nconst NAME = EXT_TEXTURE_WEBP;\n\nclass WEBPImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn array.length >= 12 && array[8] === 87 && array[9] === 69 && array[10] === 66 && array[11] === 80;\n\t}\n\tgetSize(array: Uint8Array): vec2 | null {\n\t\t// Reference: http://tools.ietf.org/html/rfc6386\n\t\tconst RIFF = BufferUtils.decodeText(array.slice(0, 4));\n\t\tconst WEBP = BufferUtils.decodeText(array.slice(8, 12));\n\t\tif (RIFF !== 'RIFF' || WEBP !== 'WEBP') return null;\n\n\t\tconst view = new DataView(array.buffer, array.byteOffset);\n\n\t\t// Reference: https://wiki.tcl-lang.org/page/Reading+WEBP+image+dimensions\n\t\tlet offset = 12;\n\t\twhile (offset < view.byteLength) {\n\t\t\tconst chunkId = BufferUtils.decodeText(\n\t\t\t\tnew Uint8Array([\n\t\t\t\t\tview.getUint8(offset),\n\t\t\t\t\tview.getUint8(offset + 1),\n\t\t\t\t\tview.getUint8(offset + 2),\n\t\t\t\t\tview.getUint8(offset + 3),\n\t\t\t\t])\n\t\t\t);\n\t\t\tconst chunkByteLength = view.getUint32(offset + 4, true);\n\t\t\tif (chunkId === 'VP8 ') {\n\t\t\t\tconst width = view.getInt16(offset + 14, true) & 0x3fff;\n\t\t\t\tconst height = view.getInt16(offset + 16, true) & 0x3fff;\n\t\t\t\treturn [width, height];\n\t\t\t} else if (chunkId === 'VP8L') {\n\t\t\t\tconst b0 = view.getUint8(offset + 9);\n\t\t\t\tconst b1 = view.getUint8(offset + 10);\n\t\t\t\tconst b2 = view.getUint8(offset + 11);\n\t\t\t\tconst b3 = view.getUint8(offset + 12);\n\t\t\t\tconst width = 1 + (((b1 & 0x3f) << 8) | b0);\n\t\t\t\tconst height = 1 + (((b3 & 0xf) << 10) | (b2 << 2) | ((b1 & 0xc0) >> 6));\n\t\t\t\treturn [width, height];\n\t\t\t}\n\t\t\toffset += 8 + chunkByteLength + (chunkByteLength % 2);\n\t\t}\n\n\t\treturn null;\n\t}\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 4;\n\t}\n}\n\n/**\n * # TextureWebP\n *\n * [`EXT_texture_webp`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_webp/)\n * enables WebP images for any material texture.\n *\n * [[include:VENDOR_EXTENSIONS_NOTE.md]]\n *\n * WebP typically provides the minimal transmission\n * size, but [requires browser support](https://caniuse.com/webp). Like PNG and JPEG, a WebP image is\n * *fully decompressed* when uploaded to the GPU, which increases upload time and GPU memory cost.\n * For seamless uploads and minimal GPU memory cost, it is necessary to use a GPU texture format\n * like Basis Universal, with the `KHR_texture_basisu` extension.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/webp` MIME type\n * and passing WebP image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { TextureWebP } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const webpExtension = document.createExtension(TextureWebP)\n * \t.setRequired(true);\n * document.createTexture('MyWebPTexture')\n * \t.setMimeType('image/webp')\n * \t.setImage(fs.readFileSync('my-texture.webp'));\n * ```\n *\n * WebP conversion is not done automatically when adding the extension as shown above — you must\n * convert the image data first, then pass the `.webp` payload to {@link Texture.setImage}.\n *\n * When the `EXT_texture_webp` extension is added to a file by glTF-Transform, the extension should\n * always be required. This tool does not support writing assets that \"fall back\" to optional PNG or\n * JPEG image data.\n */\nexport class TextureWebP extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/webp', new WEBPImageUtils());\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tconst textureDefs = context.jsonDoc.json.textures || [];\n\t\ttextureDefs.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\ttextureDef.source = (textureDef.extensions[NAME] as { source: number }).source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/webp') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\t\t\t\ttextureDefs.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { Accessor, GLTF, TypedArray, TypedArrayConstructor } from '@gltf-transform/core';\nimport { KHR_DRACO_MESH_COMPRESSION } from '../constants';\nimport type { Attribute, DataType, Decoder, DecoderModule, Mesh } from 'draco3dgltf';\n\nconst NAME = KHR_DRACO_MESH_COMPRESSION;\n\nexport let decoderModule: DecoderModule;\n\n// Initialized when decoder module loads.\nlet COMPONENT_ARRAY: { [key: number]: TypedArrayConstructor };\nlet DATA_TYPE: { [key: number]: DataType };\n\nexport function decodeGeometry(decoder: Decoder, data: Uint8Array): Mesh {\n\tconst buffer = new decoderModule.DecoderBuffer();\n\ttry {\n\t\tbuffer.Init(data as unknown as Int8Array, data.length);\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType(buffer);\n\t\tif (geometryType !== decoderModule.TRIANGULAR_MESH) {\n\t\t\tthrow new Error(`[${NAME}] Unknown geometry type.`);\n\t\t}\n\n\t\tconst dracoMesh = new decoderModule.Mesh();\n\t\tconst status = decoder.DecodeBufferToMesh(buffer, dracoMesh);\n\n\t\tif (!status.ok() || dracoMesh.ptr === 0) {\n\t\t\tthrow new Error(`[${NAME}] Decoding failure.`);\n\t\t}\n\n\t\treturn dracoMesh;\n\t} finally {\n\t\tdecoderModule.destroy(buffer);\n\t}\n}\n\nexport function decodeIndex(decoder: Decoder, mesh: Mesh): Uint16Array | Uint32Array {\n\tconst numFaces = mesh.num_faces();\n\tconst numIndices = numFaces * 3;\n\n\tlet ptr: number;\n\tlet indices: Uint16Array | Uint32Array;\n\n\tif (mesh.num_points() <= 65534) {\n\t\tconst byteLength = numIndices * Uint16Array.BYTES_PER_ELEMENT;\n\t\tptr = decoderModule._malloc(byteLength);\n\t\tdecoder.GetTrianglesUInt16Array(mesh, byteLength, ptr);\n\t\tindices = new Uint16Array(decoderModule.HEAPU16.buffer, ptr, numIndices).slice();\n\t} else {\n\t\tconst byteLength = numIndices * Uint32Array.BYTES_PER_ELEMENT;\n\t\tptr = decoderModule._malloc(byteLength);\n\t\tdecoder.GetTrianglesUInt32Array(mesh, byteLength, ptr);\n\t\tindices = new Uint32Array(decoderModule.HEAPU32.buffer, ptr, numIndices).slice();\n\t}\n\n\tdecoderModule._free(ptr);\n\n\treturn indices;\n}\n\nexport function decodeAttribute(\n\tdecoder: Decoder,\n\tmesh: Mesh,\n\tattribute: Attribute,\n\taccessorDef: GLTF.IAccessor\n): TypedArray {\n\tconst dataType = DATA_TYPE[accessorDef.componentType];\n\tconst ArrayCtor = COMPONENT_ARRAY[accessorDef.componentType];\n\tconst numComponents = attribute.num_components();\n\tconst numPoints = mesh.num_points();\n\tconst numValues = numPoints * numComponents;\n\tconst byteLength: number = numValues * ArrayCtor.BYTES_PER_ELEMENT;\n\n\tconst ptr = decoderModule._malloc(byteLength);\n\tdecoder.GetAttributeDataArrayForAllPoints(mesh, attribute, dataType, byteLength, ptr);\n\tconst array: TypedArray = new ArrayCtor(decoderModule.HEAPF32.buffer, ptr, numValues).slice();\n\tdecoderModule._free(ptr);\n\n\treturn array;\n}\n\nexport function initDecoderModule(_decoderModule: DecoderModule): void {\n\tdecoderModule = _decoderModule;\n\n\tCOMPONENT_ARRAY = {\n\t\t[Accessor.ComponentType.FLOAT]: Float32Array,\n\t\t[Accessor.ComponentType.UNSIGNED_INT]: Uint32Array,\n\t\t[Accessor.ComponentType.UNSIGNED_SHORT]: Uint16Array,\n\t\t[Accessor.ComponentType.UNSIGNED_BYTE]: Uint8Array,\n\t\t[Accessor.ComponentType.SHORT]: Int16Array,\n\t\t[Accessor.ComponentType.BYTE]: Int8Array,\n\t};\n\n\tDATA_TYPE = {\n\t\t[Accessor.ComponentType.FLOAT]: decoderModule.DT_FLOAT32,\n\t\t[Accessor.ComponentType.UNSIGNED_INT]: decoderModule.DT_UINT32,\n\t\t[Accessor.ComponentType.UNSIGNED_SHORT]: decoderModule.DT_UINT16,\n\t\t[Accessor.ComponentType.UNSIGNED_BYTE]: decoderModule.DT_UINT8,\n\t\t[Accessor.ComponentType.SHORT]: decoderModule.DT_INT16,\n\t\t[Accessor.ComponentType.BYTE]: decoderModule.DT_INT8,\n\t};\n}\n","import { Accessor, bbox, GLTF, Primitive, TypedArray } from '@gltf-transform/core';\nimport type { EncoderModule, Mesh, MeshBuilder } from 'draco3dgltf';\n\nexport let encoderModule: EncoderModule;\n\nexport enum EncoderMethod {\n\tEDGEBREAKER = 1,\n\tSEQUENTIAL = 0,\n}\n\nenum AttributeEnum {\n\tPOSITION = 'POSITION',\n\tNORMAL = 'NORMAL',\n\tCOLOR = 'COLOR',\n\tTEX_COORD = 'TEX_COORD',\n\tGENERIC = 'GENERIC',\n}\n\nconst DEFAULT_QUANTIZATION_BITS = {\n\t[AttributeEnum.POSITION]: 14,\n\t[AttributeEnum.NORMAL]: 10,\n\t[AttributeEnum.COLOR]: 8,\n\t[AttributeEnum.TEX_COORD]: 12,\n\t[AttributeEnum.GENERIC]: 12,\n};\n\nexport interface EncodedPrimitive {\n\tnumVertices: number;\n\tnumIndices: number;\n\tdata: Uint8Array;\n\tattributeIDs: { [key: string]: number };\n}\n\nexport interface EncoderOptions {\n\tdecodeSpeed?: number;\n\tencodeSpeed?: number;\n\tmethod?: EncoderMethod;\n\tquantizationBits?: { [key: string]: number };\n\tquantizationVolume?: 'mesh' | 'scene' | bbox;\n}\n\nconst DEFAULT_ENCODER_OPTIONS: EncoderOptions = {\n\tdecodeSpeed: 5,\n\tencodeSpeed: 5,\n\tmethod: EncoderMethod.EDGEBREAKER,\n\tquantizationBits: DEFAULT_QUANTIZATION_BITS,\n\tquantizationVolume: 'mesh',\n};\n\nexport function initEncoderModule(_encoderModule: EncoderModule): void {\n\tencoderModule = _encoderModule;\n}\n\n/**\n * References:\n * - https://github.com/mrdoob/three.js/blob/dev/examples/js/exporters/DRACOExporter.js\n * - https://github.com/CesiumGS/gltf-pipeline/blob/master/lib/compressDracoMeshes.js\n */\nexport function encodeGeometry(prim: Primitive, _options: EncoderOptions = DEFAULT_ENCODER_OPTIONS): EncodedPrimitive {\n\tconst options = { ...DEFAULT_ENCODER_OPTIONS, ..._options } as Required<EncoderOptions>;\n\toptions.quantizationBits = { ...DEFAULT_QUANTIZATION_BITS, ..._options.quantizationBits };\n\n\tconst encoder = new encoderModule.Encoder();\n\tconst builder = new encoderModule.MeshBuilder();\n\tconst mesh = new encoderModule.Mesh();\n\n\tconst attributeIDs: { [key: string]: number } = {};\n\tconst dracoBuffer = new encoderModule.DracoInt8Array();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tconst attributeEnum = getAttributeEnum(semantic);\n\t\tconst attributeID: number = addAttribute(\n\t\t\tbuilder,\n\t\t\tattribute.getComponentType(),\n\t\t\tmesh,\n\t\t\tencoderModule[attributeEnum],\n\t\t\tattribute.getCount(),\n\t\t\tattribute.getElementSize(),\n\t\t\tattribute.getArray()!\n\t\t);\n\n\t\tif (attributeID === -1) throw new Error(`Error compressing \"${semantic}\" attribute.`);\n\n\t\tattributeIDs[semantic] = attributeID;\n\t\tif (options.quantizationVolume === 'mesh' || semantic !== 'POSITION') {\n\t\t\tencoder.SetAttributeQuantization(encoderModule[attributeEnum], options.quantizationBits[attributeEnum]);\n\t\t} else if (typeof options.quantizationVolume === 'object') {\n\t\t\tconst { quantizationVolume } = options;\n\t\t\tconst range = Math.max(\n\t\t\t\tquantizationVolume.max[0] - quantizationVolume.min[0],\n\t\t\t\tquantizationVolume.max[1] - quantizationVolume.min[1],\n\t\t\t\tquantizationVolume.max[2] - quantizationVolume.min[2]\n\t\t\t);\n\t\t\tencoder.SetAttributeExplicitQuantization(\n\t\t\t\tencoderModule[attributeEnum],\n\t\t\t\toptions.quantizationBits[attributeEnum],\n\t\t\t\tattribute.getElementSize(),\n\t\t\t\tquantizationVolume.min,\n\t\t\t\trange\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error('Invalid quantization volume state.');\n\t\t}\n\t}\n\n\tconst indices = prim.getIndices();\n\tif (!indices) throw new Error('Primitive must have indices.');\n\n\tbuilder.AddFacesToMesh(mesh, indices.getCount() / 3, indices.getArray() as unknown as Uint32Array);\n\n\tencoder.SetSpeedOptions(options.encodeSpeed, options.decodeSpeed);\n\tencoder.SetTrackEncodedProperties(true);\n\n\t// Preserve vertex order for primitives with morph targets.\n\tif (options.method === EncoderMethod.SEQUENTIAL || prim.listTargets().length > 0) {\n\t\tencoder.SetEncodingMethod(encoderModule.MESH_SEQUENTIAL_ENCODING);\n\t} else {\n\t\tencoder.SetEncodingMethod(encoderModule.MESH_EDGEBREAKER_ENCODING);\n\t}\n\n\tconst byteLength = encoder.EncodeMeshToDracoBuffer(mesh, dracoBuffer);\n\tif (byteLength <= 0) throw new Error('Error applying Draco compression.');\n\n\tconst data = new Uint8Array(byteLength);\n\tfor (let i = 0; i < byteLength; ++i) {\n\t\tdata[i] = dracoBuffer.GetValue(i);\n\t}\n\n\tconst prevNumVertices = prim.getAttribute('POSITION')!.getCount();\n\tconst numVertices = encoder.GetNumberOfEncodedPoints();\n\tconst numIndices = encoder.GetNumberOfEncodedFaces() * 3;\n\n\tif (prim.listTargets().length > 0 && numVertices !== prevNumVertices) {\n\t\tthrow new Error(\n\t\t\t'Compression reduced vertex count unexpectedly, corrupting morph targets.' +\n\t\t\t\t' Applying the \"weld\" function before compression may resolve the issue.'\n\t\t);\n\t}\n\n\tencoderModule.destroy(dracoBuffer);\n\tencoderModule.destroy(mesh);\n\tencoderModule.destroy(builder);\n\tencoderModule.destroy(encoder);\n\n\treturn { numVertices, numIndices, data, attributeIDs };\n}\n\nfunction getAttributeEnum(semantic: string): AttributeEnum {\n\tif (semantic === 'POSITION') {\n\t\treturn AttributeEnum.POSITION;\n\t} else if (semantic === 'NORMAL') {\n\t\treturn AttributeEnum.NORMAL;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\treturn AttributeEnum.COLOR;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\treturn AttributeEnum.TEX_COORD;\n\t}\n\treturn AttributeEnum.GENERIC;\n}\n\nfunction addAttribute(\n\tbuilder: MeshBuilder,\n\tcomponentType: GLTF.AccessorComponentType,\n\tmesh: Mesh,\n\tattribute: number,\n\tcount: number,\n\titemSize: number,\n\tarray: TypedArray\n): number {\n\tswitch (componentType) {\n\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\treturn builder.AddUInt8Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.BYTE:\n\t\t\treturn builder.AddInt8Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\treturn builder.AddUInt16Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.SHORT:\n\t\t\treturn builder.AddInt16Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\treturn builder.AddUInt32Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\treturn builder.AddFloatAttribute(mesh, attribute, count, itemSize, array);\n\t\tdefault:\n\t\t\tthrow new Error(`Unexpected component type, \"${componentType}\".`);\n\t}\n}\n","import {\n\tAccessor,\n\tbbox,\n\tbounds,\n\tBufferUtils,\n\tDocument,\n\tExtension,\n\tGLB_BUFFER,\n\tPrimitive,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport { decodeAttribute, decodeGeometry, decodeIndex, initDecoderModule } from './decoder';\nimport { EncodedPrimitive, encodeGeometry, EncoderMethod, EncoderOptions, initEncoderModule } from './encoder';\nimport { KHR_DRACO_MESH_COMPRESSION } from '../constants';\nimport type { Decoder, DecoderModule, EncoderModule, Mesh } from 'draco3dgltf';\n\nconst NAME = KHR_DRACO_MESH_COMPRESSION;\n\ninterface DracoPrimitiveExtension {\n\tbufferView: number;\n\tattributes: {\n\t\t[name: string]: number;\n\t};\n}\n\ninterface DracoWriterContext {\n\tprimitiveHashMap: Map<Primitive, string>;\n\tprimitiveEncodingMap: Map<string, EncodedPrimitive>;\n}\n\n/**\n * # DracoMeshCompression\n *\n * [`KHR_draco_mesh_compression`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/)\n * provides advanced compression for mesh geometry.\n *\n * For models where geometry is a significant factor (>1 MB), Draco can reduce filesize by ~95%\n * in many cases. When animation or textures are large, other complementary compression methods\n * should be used as well. For geometry <1MB, the size of the WASM decoder library may outweigh\n * size savings.\n *\n * Be aware that decompression happens before uploading to the GPU — this will add some latency to\n * the parsing process, and means that compressing geometry with  Draco does _not_ affect runtime\n * performance. To improve framerate, you'll need to simplify the geometry by reducing vertex count\n * or draw calls — not just compress it. Finally, be aware that Draco compression is lossy:\n * repeatedly compressing and decompressing a model in a pipeline will lose precision, so\n * compression should generally be the last stage of an art workflow, and uncompressed original\n * files should be kept.\n *\n * A decoder or encoder from the `draco3dgltf` npm module for Node.js (or\n * [elsewhere for web](https://stackoverflow.com/a/66978236/1314762)) is required for reading and writing,\n * and must be provided by the application.\n *\n * ### Encoding options\n *\n * Two compression methods are available: 'edgebreaker' and 'sequential'. The\n * edgebreaker method will give higher compression in general, but changes the\n * order of the model's vertices. To preserve index order, use sequential\n * compression. When a mesh uses morph targets, or a high decoding speed is\n * selected, sequential compression will automatically be chosen.\n *\n * Both speed options affect the encoder's choice of algorithms. For example, a\n * requirement for fast decoding may prevent the encoder from using the best\n * compression methods even if the encoding speed is set to 0. In general, the\n * faster of the two options limits the choice of features that can be used by the\n * encoder. Setting --decodeSpeed to be faster than the --encodeSpeed may allow\n * the encoder to choose the optimal method out of the available features for the\n * given --decodeSpeed.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { DracoMeshCompression } from '@gltf-transform/extensions';\n *\n * import draco3d from 'draco3dgltf';\n *\n * // ...\n *\n * const io = new NodeIO()\n *\t.registerExtensions([DracoMeshCompression])\n *\t.registerDependencies({\n *\t\t'draco3d.decoder': await draco3d.createDecoderModule(), // Optional.\n *\t\t'draco3d.encoder': await draco3d.createEncoderModule(), // Optional.\n *\t});\n *\n * // Read and decode.\n * const document = await io.read('compressed.glb');\n *\n * // Write and encode.\n * document.createExtension(DracoMeshCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({\n * \t\tmethod: DracoMeshCompression.EncoderMethod.EDGEBREAKER,\n * \t\tencodeSpeed: 5,\n * \t\tdecodeSpeed: 5,\n * \t});\n * await io.write('compressed.glb', document);\n * ```\n */\nexport class DracoMeshCompression extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.PRIMITIVE];\n\t/** @hidden */\n\tpublic readonly prewriteTypes = [PropertyType.ACCESSOR];\n\t/** @hidden */\n\tpublic readonly readDependencies = ['draco3d.decoder'];\n\t/** @hidden */\n\tpublic readonly writeDependencies = ['draco3d.encoder'];\n\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/**\n\t * Compression method. `EncoderMethod.EDGEBREAKER` usually provides a higher compression ratio,\n\t * while `EncoderMethod.SEQUENTIAL` better preserves original verter order.\n\t */\n\tpublic static readonly EncoderMethod = EncoderMethod;\n\n\tprivate _decoderModule: DecoderModule | null = null;\n\tprivate _encoderModule: EncoderModule | null = null;\n\tprivate _encoderOptions: EncoderOptions = {};\n\n\t/** @hidden */\n\tpublic install(key: string, dependency: unknown): this {\n\t\tif (key === 'draco3d.decoder') {\n\t\t\tthis._decoderModule = dependency as DecoderModule;\n\t\t\tinitDecoderModule(this._decoderModule);\n\t\t}\n\t\tif (key === 'draco3d.encoder') {\n\t\t\tthis._encoderModule = dependency as EncoderModule;\n\t\t\tinitEncoderModule(this._encoderModule);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets Draco compression options. Compression does not take effect until the Document is\n\t * written with an I/O class.\n\t *\n\t * Defaults:\n\t * ```\n\t * decodeSpeed?: number = 5;\n\t * encodeSpeed?: number = 5;\n\t * method?: EncoderMethod = EncoderMethod.EDGEBREAKER;\n\t * quantizationBits?: {[ATTRIBUTE_NAME]: bits};\n\t * quantizationVolume?: 'mesh' | 'scene' | bbox = 'mesh';\n\t * ```\n\t */\n\tpublic setEncoderOptions(options: EncoderOptions): this {\n\t\tthis._encoderOptions = options;\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tif (!this._decoderModule) {\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"draco3d.decoder\".`);\n\t\t}\n\n\t\tconst logger = this.document.getLogger();\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst dracoMeshes: Map<number, [Decoder, Mesh]> = new Map();\n\n\t\ttry {\n\t\t\tconst meshDefs = jsonDoc.json.meshes || [];\n\t\t\tfor (const meshDef of meshDefs) {\n\t\t\t\tfor (const primDef of meshDef.primitives) {\n\t\t\t\t\tif (!primDef.extensions || !primDef.extensions[NAME]) continue;\n\n\t\t\t\t\tconst dracoDef = primDef.extensions[NAME] as DracoPrimitiveExtension;\n\t\t\t\t\tlet [decoder, dracoMesh] = dracoMeshes.get(dracoDef.bufferView) || [];\n\n\t\t\t\t\tif (!dracoMesh || !decoder) {\n\t\t\t\t\t\tconst bufferViewDef = jsonDoc.json.bufferViews![dracoDef.bufferView];\n\t\t\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\t\t\t// TODO(cleanup): Should be encapsulated in writer-context.ts.\n\t\t\t\t\t\tconst resource = bufferDef.uri\n\t\t\t\t\t\t\t? jsonDoc.resources[bufferDef.uri]\n\t\t\t\t\t\t\t: jsonDoc.resources[GLB_BUFFER];\n\n\t\t\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\t\t\tconst byteLength = bufferViewDef.byteLength;\n\t\t\t\t\t\tconst compressedData = BufferUtils.toView(resource, byteOffset, byteLength);\n\n\t\t\t\t\t\tdecoder = new this._decoderModule.Decoder();\n\t\t\t\t\t\tdracoMesh = decodeGeometry(decoder, compressedData);\n\t\t\t\t\t\tdracoMeshes.set(dracoDef.bufferView, [decoder, dracoMesh]);\n\t\t\t\t\t\tlogger.debug(`[${NAME}] Decompressed ${compressedData.byteLength} bytes.`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attributes.\n\t\t\t\t\tfor (const semantic in primDef.attributes) {\n\t\t\t\t\t\tconst accessorDef = context.jsonDoc.json.accessors![primDef.attributes[semantic]];\n\t\t\t\t\t\tconst dracoAttribute = decoder.GetAttributeByUniqueId(dracoMesh, dracoDef.attributes[semantic]);\n\t\t\t\t\t\tconst attributeArray = decodeAttribute(decoder, dracoMesh, dracoAttribute, accessorDef);\n\t\t\t\t\t\tcontext.accessors[primDef.attributes[semantic]].setArray(attributeArray);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Indices. Optional, see https://github.com/google/draco/issues/720.\n\t\t\t\t\tif (primDef.indices !== undefined) {\n\t\t\t\t\t\tcontext.accessors[primDef.indices].setArray(decodeIndex(decoder, dracoMesh));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tfor (const [decoder, dracoMesh] of Array.from(dracoMeshes.values())) {\n\t\t\t\tthis._decoderModule.destroy(decoder);\n\t\t\t\tthis._decoderModule.destroy(dracoMesh);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic read(_context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic prewrite(context: WriterContext, _propertyType: PropertyType): this {\n\t\tif (!this._encoderModule) {\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"draco3d.encoder\".`);\n\t\t}\n\n\t\tconst logger = this.document.getLogger();\n\t\tlogger.debug(`[${NAME}] Compression options: ${JSON.stringify(this._encoderOptions)}`);\n\n\t\tconst primitiveHashMap = listDracoPrimitives(this.document);\n\t\tconst primitiveEncodingMap = new Map<string, EncodedPrimitive>();\n\n\t\tlet quantizationVolume: bbox | 'mesh' = 'mesh';\n\t\tif (this._encoderOptions.quantizationVolume === 'scene') {\n\t\t\tif (this.document.getRoot().listScenes().length !== 1) {\n\t\t\t\tlogger.warn(`[${NAME}]: quantizationVolume=scene requires exactly 1 scene.`);\n\t\t\t} else {\n\t\t\t\tquantizationVolume = bounds(this.document.getRoot().listScenes().pop()!);\n\t\t\t}\n\t\t}\n\n\t\tfor (const prim of Array.from(primitiveHashMap.keys())) {\n\t\t\tconst primHash = primitiveHashMap.get(prim);\n\t\t\tif (!primHash) throw new Error('Unexpected primitive.');\n\n\t\t\t// Reuse an existing EncodedPrimitive, if possible.\n\t\t\tif (primitiveEncodingMap.has(primHash)) {\n\t\t\t\tprimitiveEncodingMap.set(primHash, primitiveEncodingMap.get(primHash)!);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst indices = prim.getIndices()!; // Condition for listDracoPrimitives().\n\t\t\tconst accessorDefs = context.jsonDoc.json.accessors!;\n\n\t\t\t// Create a new EncodedPrimitive.\n\t\t\tconst encodedPrim = encodeGeometry(prim, { ...this._encoderOptions, quantizationVolume });\n\t\t\tprimitiveEncodingMap.set(primHash, encodedPrim);\n\n\t\t\t// Create indices definition, update count.\n\t\t\tconst indicesDef = context.createAccessorDef(indices);\n\t\t\tindicesDef.count = encodedPrim.numIndices;\n\t\t\tcontext.accessorIndexMap.set(indices, accessorDefs.length);\n\t\t\taccessorDefs.push(indicesDef);\n\n\t\t\t// Create attribute definitions, update count.\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\tconst attributeDef = context.createAccessorDef(attribute);\n\t\t\t\tattributeDef.count = encodedPrim.numVertices;\n\t\t\t\tcontext.accessorIndexMap.set(attribute, accessorDefs.length);\n\t\t\t\taccessorDefs.push(attributeDef);\n\t\t\t}\n\n\t\t\t// Map compressed buffer view to a Buffer.\n\t\t\tconst buffer = prim.getAttribute('POSITION')!.getBuffer() || this.document.getRoot().listBuffers()[0];\n\t\t\tif (!context.otherBufferViews.has(buffer)) context.otherBufferViews.set(buffer, []);\n\t\t\tcontext.otherBufferViews.get(buffer)!.push(encodedPrim.data);\n\t\t}\n\n\t\tlogger.debug(`[${NAME}] Compressed ${primitiveHashMap.size} primitives.`);\n\n\t\tcontext.extensionData[NAME] = {\n\t\t\tprimitiveHashMap,\n\t\t\tprimitiveEncodingMap,\n\t\t} as DracoWriterContext;\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst dracoContext: DracoWriterContext = context.extensionData[NAME] as DracoWriterContext;\n\n\t\tfor (const mesh of this.document.getRoot().listMeshes()) {\n\t\t\tconst meshDef = context.jsonDoc.json.meshes![context.meshIndexMap.get(mesh)!];\n\t\t\tfor (let i = 0; i < mesh.listPrimitives().length; i++) {\n\t\t\t\tconst prim = mesh.listPrimitives()[i];\n\t\t\t\tconst primDef = meshDef.primitives[i];\n\n\t\t\t\tconst primHash = dracoContext.primitiveHashMap.get(prim);\n\t\t\t\tif (!primHash) continue;\n\n\t\t\t\tconst encodedPrim = dracoContext.primitiveEncodingMap.get(primHash)!;\n\t\t\t\tprimDef.extensions = primDef.extensions || {};\n\t\t\t\tprimDef.extensions[NAME] = {\n\t\t\t\t\tbufferView: context.otherBufferViewsIndexMap.get(encodedPrim.data),\n\t\t\t\t\tattributes: encodedPrim.attributeIDs,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Omit the extension if nothing was compressed.\n\t\tif (!dracoContext.primitiveHashMap.size) {\n\t\t\tconst json = context.jsonDoc.json;\n\t\t\tjson.extensionsUsed = (json.extensionsUsed || []).filter((name) => name !== NAME);\n\t\t\tjson.extensionsRequired = (json.extensionsRequired || []).filter((name) => name !== NAME);\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\n/**\n * Returns a list of Primitives compatible with Draco compression. If any required preconditions\n * fail, and would break assumptions required for compression, this function will throw an error.\n */\nfunction listDracoPrimitives(doc: Document): Map<Primitive, string> {\n\tconst logger = doc.getLogger();\n\tconst included = new Set<Primitive>();\n\tconst excluded = new Set<Primitive>();\n\n\t// Support compressing only indexed, mode=TRIANGLES primitives.\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tif (!prim.getIndices()) {\n\t\t\t\texcluded.add(prim);\n\t\t\t\tlogger.warn(`[${NAME}] Skipping Draco compression on non-indexed primitive.`);\n\t\t\t} else if (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\texcluded.add(prim);\n\t\t\t\tlogger.warn(`[${NAME}] Skipping Draco compression on non-TRIANGLES primitive.`);\n\t\t\t} else {\n\t\t\t\tincluded.add(prim);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Create an Accessor->index mapping.\n\tconst accessors = doc.getRoot().listAccessors();\n\tconst accessorIndices = new Map<Accessor, number>();\n\tfor (let i = 0; i < accessors.length; i++) accessorIndices.set(accessors[i], i);\n\n\t// For each compressed Primitive, create a hash key identifying its accessors. Map each\n\t// compressed Primitive and Accessor to this hash key.\n\tconst includedAccessors = new Map<Accessor, string>();\n\tconst includedHashKeys = new Set<string>();\n\tconst primToHashKey = new Map<Primitive, string>();\n\tfor (const prim of Array.from(included)) {\n\t\tlet hashKey = createHashKey(prim, accessorIndices);\n\n\t\t// If accessors of an identical primitive have already been checked, we're done.\n\t\tif (includedHashKeys.has(hashKey)) {\n\t\t\tprimToHashKey.set(prim, hashKey);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If any accessors are already in use, but the same hashKey hasn't been written, then we\n\t\t// need to create copies of these accessors for the current encoded primitive. We can't\n\t\t// reuse the same compressed accessor for two encoded primitives, because Draco might\n\t\t// change the vertex count, change the vertex order, or cause other conflicts.\n\t\tif (includedAccessors.has(prim.getIndices()!)) {\n\t\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\t\tconst dstIndices = indices.clone();\n\t\t\taccessorIndices.set(dstIndices, doc.getRoot().listAccessors().length - 1);\n\t\t\tprim.swap(indices, dstIndices); // TODO(cleanup): I/O should not modify Document.\n\t\t}\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tif (includedAccessors.has(attribute)) {\n\t\t\t\tconst dstAttribute = attribute.clone();\n\t\t\t\taccessorIndices.set(dstAttribute, doc.getRoot().listAccessors().length - 1);\n\t\t\t\tprim.swap(attribute, dstAttribute); // TODO(cleanup): I/O should not modify Document.\n\t\t\t}\n\t\t}\n\n\t\t// With conflicts resolved, compute the hash key again.\n\t\thashKey = createHashKey(prim, accessorIndices);\n\n\t\t// Commit the primitive and its accessors to the hash key.\n\t\tincludedHashKeys.add(hashKey);\n\t\tprimToHashKey.set(prim, hashKey);\n\t\tincludedAccessors.set(prim.getIndices()!, hashKey);\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tincludedAccessors.set(attribute, hashKey);\n\t\t}\n\t}\n\n\t// For each compressed Accessor, ensure that it isn't used except by a Primitive.\n\tfor (const accessor of Array.from(includedAccessors.keys())) {\n\t\tconst parentTypes = new Set(accessor.listParents().map((prop) => prop.propertyType));\n\t\tif (parentTypes.size !== 2 || !parentTypes.has(PropertyType.PRIMITIVE) || !parentTypes.has(PropertyType.ROOT)) {\n\t\t\tthrow new Error(`[${NAME}] Compressed accessors must only be used as indices or vertex attributes.`);\n\t\t}\n\t}\n\n\t// For each compressed Primitive, ensure that Accessors are mapped only to the same hash key.\n\tfor (const prim of Array.from(included)) {\n\t\tconst hashKey = primToHashKey.get(prim);\n\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\tif (\n\t\t\tincludedAccessors.get(indices) !== hashKey ||\n\t\t\tprim.listAttributes().some((attr) => includedAccessors.get(attr) !== hashKey)\n\t\t) {\n\t\t\tthrow new Error(`[${NAME}] Draco primitives must share all, or no, accessors.`);\n\t\t}\n\t}\n\n\t// For each excluded Primitive, ensure that no Accessors are compressed.\n\tfor (const prim of Array.from(excluded)) {\n\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\tif (includedAccessors.has(indices) || prim.listAttributes().some((attr) => includedAccessors.has(attr))) {\n\t\t\tthrow new Error(`[${NAME}] Accessor cannot be shared by compressed and uncompressed primitives.`);\n\t\t}\n\t}\n\n\treturn primToHashKey;\n}\n\nfunction createHashKey(prim: Primitive, indexMap: Map<Accessor, number>): string {\n\tconst hashElements = [];\n\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\n\thashElements.push(indexMap.get(indices));\n\tfor (const attribute of prim.listAttributes()) {\n\t\thashElements.push(indexMap.get(attribute));\n\t}\n\n\treturn hashElements.sort().join('|');\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType, vec3 } from '@gltf-transform/core';\nimport { ColorUtils } from '@gltf-transform/core';\nimport { KHR_LIGHTS_PUNCTUAL } from '../constants';\n\ninterface ILight extends IProperty {\n\tcolor: vec3;\n\tintensity: number;\n\ttype: PunctualLightType;\n\trange: number | null;\n\tinnerConeAngle: number;\n\touterConeAngle: number;\n}\n\ntype PunctualLightType = 'point' | 'spot' | 'directional';\n\n/**\n * # Light\n *\n * Defines a light attached to a {@link Node}. See {@link LightsPunctual}.\n */\nexport class Light extends ExtensionProperty<ILight> {\n\tpublic static EXTENSION_NAME = KHR_LIGHTS_PUNCTUAL;\n\tpublic declare extensionName: typeof KHR_LIGHTS_PUNCTUAL;\n\tpublic declare propertyType: 'Light';\n\tpublic declare parentTypes: [PropertyType.NODE];\n\n\t/**********************************************************************************************\n\t * CONSTANTS.\n\t */\n\n\tpublic static Type: Record<string, PunctualLightType> = {\n\t\tPOINT: 'point',\n\t\tSPOT: 'spot',\n\t\tDIRECTIONAL: 'directional',\n\t};\n\n\t/**********************************************************************************************\n\t * INSTANCE.\n\t */\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_LIGHTS_PUNCTUAL;\n\t\tthis.propertyType = 'Light';\n\t\tthis.parentTypes = [PropertyType.NODE];\n\t}\n\n\tprotected getDefaults(): Nullable<ILight> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tcolor: [1, 1, 1] as vec3,\n\t\t\tintensity: 1,\n\t\t\ttype: Light.Type.POINT,\n\t\t\trange: null,\n\t\t\tinnerConeAngle: 0,\n\t\t\touterConeAngle: Math.PI / 4,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * COLOR.\n\t */\n\n\t/** Light color; Linear-sRGB components. */\n\tpublic getColor(): vec3 {\n\t\treturn this.get('color');\n\t}\n\n\t/** Light color; Linear-sRGB components. */\n\tpublic setColor(color: vec3): this {\n\t\treturn this.set('color', color);\n\t}\n\n\t/** Light color; sRGB hexadecimal color. */\n\tpublic getColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getColor());\n\t}\n\n\t/** Light color; sRGB hexadecimal color. */\n\tpublic setColorHex(hex: number): this {\n\t\tconst color = this.getColor().slice() as vec3;\n\t\tColorUtils.hexToFactor(hex, color);\n\t\treturn this.setColor(color);\n\t}\n\n\t/**********************************************************************************************\n\t * INTENSITY.\n\t */\n\n\t/**\n\t * Brightness of light. Units depend on the type of light: point and spot lights use luminous\n\t * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).\n\t */\n\tpublic getIntensity(): number {\n\t\treturn this.get('intensity');\n\t}\n\n\t/**\n\t * Brightness of light. Units depend on the type of light: point and spot lights use luminous\n\t * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).\n\t */\n\tpublic setIntensity(intensity: number): this {\n\t\treturn this.set('intensity', intensity);\n\t}\n\n\t/**********************************************************************************************\n\t * TYPE.\n\t */\n\n\t/** Type. */\n\tpublic getType(): PunctualLightType {\n\t\treturn this.get('type');\n\t}\n\n\t/** Type. */\n\tpublic setType(type: PunctualLightType): this {\n\t\treturn this.set('type', type);\n\t}\n\n\t/**********************************************************************************************\n\t * RANGE.\n\t */\n\n\t/**\n\t * Hint defining a distance cutoff at which the light's intensity may be considered to have\n\t * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range\n\t * is assumed to be infinite.\n\t */\n\tpublic getRange(): number | null {\n\t\treturn this.get('range');\n\t}\n\n\t/**\n\t * Hint defining a distance cutoff at which the light's intensity may be considered to have\n\t * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range\n\t * is assumed to be infinite.\n\t */\n\tpublic setRange(range: number | null): this {\n\t\treturn this.set('range', range);\n\t}\n\n\t/**********************************************************************************************\n\t * SPOT LIGHT PROPERTIES\n\t */\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff begins. Must be ≥ 0 and\n\t * < outerConeAngle.\n\t */\n\tpublic getInnerConeAngle(): number {\n\t\treturn this.get('innerConeAngle');\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff begins. Must be ≥ 0 and\n\t * < outerConeAngle.\n\t */\n\tpublic setInnerConeAngle(angle: number): this {\n\t\treturn this.set('innerConeAngle', angle);\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and\n\t * ≤ PI / 2.0.\n\t */\n\tpublic getOuterConeAngle(): number {\n\t\treturn this.get('outerConeAngle');\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and\n\t * ≤ PI / 2.0.\n\t */\n\tpublic setOuterConeAngle(angle: number): this {\n\t\treturn this.set('outerConeAngle', angle);\n\t}\n}\n","import { Extension, MathUtils, ReaderContext, WriterContext, vec3 } from '@gltf-transform/core';\nimport { KHR_LIGHTS_PUNCTUAL } from '../constants';\nimport { Light } from './light';\n\nconst NAME = KHR_LIGHTS_PUNCTUAL;\n\ninterface LightsPunctualRootDef {\n\tlights?: LightDef[];\n}\n\ninterface LightsPunctualNodeDef {\n\tlight: number;\n}\n\ninterface LightDef {\n\tname?: string;\n\tcolor?: vec3;\n\tintensity?: number;\n\trange?: number;\n\ttype: 'spot' | 'point' | 'directional';\n\tspot?: {\n\t\tinnerConeAngle?: number;\n\t\touterConeAngle?: number;\n\t};\n}\n\n/**\n * # LightsPunctual\n *\n * [`KHR_lights_punctual`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/) defines three \"punctual\" light types: directional, point and\n * spot.\n *\n * Punctual lights are parameterized, infinitely small points that emit light in\n * well-defined directions and intensities. Lights are referenced by nodes and inherit the transform\n * of that node.\n *\n * Properties:\n * - {@link Light}\n *\n * ### Example\n *\n * ```typescript\n * import { LightsPunctual, Light, LightType } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const lightsExtension = document.createExtension(LightsPunctual);\n *\n * // Create a Light property.\n * const light = lightsExtension.createLight()\n *\t.setType(LightType.POINT)\n *\t.setIntensity(2.0)\n *\t.setColor([1.0, 0.0, 0.0]);\n *\n * // Attach the property to a Material.\n * node.setExtension('KHR_lights_punctual', light);\n * ```\n */\nexport class LightsPunctual extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new punctual Light property for use on a {@link Node}. */\n\tpublic createLight(name = ''): Light {\n\t\treturn new Light(this.document.getGraph(), name);\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (!jsonDoc.json.extensions || !jsonDoc.json.extensions[NAME]) return this;\n\n\t\tconst rootDef = jsonDoc.json.extensions[NAME] as LightsPunctualRootDef;\n\t\tconst lightDefs = rootDef.lights || ([] as LightDef[]);\n\t\tconst lights = lightDefs.map((lightDef) => {\n\t\t\tconst light = this.createLight()\n\t\t\t\t.setName(lightDef.name || '')\n\t\t\t\t.setType(lightDef.type);\n\n\t\t\tif (lightDef.color !== undefined) light.setColor(lightDef.color);\n\t\t\tif (lightDef.intensity !== undefined) light.setIntensity(lightDef.intensity);\n\t\t\tif (lightDef.range !== undefined) light.setRange(lightDef.range);\n\n\t\t\tif (lightDef.spot?.innerConeAngle !== undefined) {\n\t\t\t\tlight.setInnerConeAngle(lightDef.spot.innerConeAngle);\n\t\t\t}\n\t\t\tif (lightDef.spot?.outerConeAngle !== undefined) {\n\t\t\t\tlight.setOuterConeAngle(lightDef.spot.outerConeAngle);\n\t\t\t}\n\n\t\t\treturn light;\n\t\t});\n\n\t\tjsonDoc.json.nodes!.forEach((nodeDef, nodeIndex) => {\n\t\t\tif (!nodeDef.extensions || !nodeDef.extensions[NAME]) return;\n\t\t\tconst lightNodeDef = nodeDef.extensions[NAME] as LightsPunctualNodeDef;\n\t\t\tcontext.nodes[nodeIndex].setExtension(NAME, lights[lightNodeDef.light]);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (this.properties.size === 0) return this;\n\n\t\tconst lightDefs = [];\n\t\tconst lightIndexMap = new Map<Light, number>();\n\n\t\tfor (const property of this.properties) {\n\t\t\tconst light = property as Light;\n\t\t\tconst lightDef = { type: light.getType() } as LightDef;\n\n\t\t\tif (!MathUtils.eq(light.getColor(), [1, 1, 1])) lightDef.color = light.getColor();\n\t\t\tif (light.getIntensity() !== 1) lightDef.intensity = light.getIntensity();\n\t\t\tif (light.getRange() != null) lightDef.range = light.getRange()!;\n\n\t\t\tif (light.getName()) lightDef.name = light.getName();\n\n\t\t\tif (light.getType() === Light.Type.SPOT) {\n\t\t\t\tlightDef.spot = {\n\t\t\t\t\tinnerConeAngle: light.getInnerConeAngle(),\n\t\t\t\t\touterConeAngle: light.getOuterConeAngle(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlightDefs.push(lightDef);\n\t\t\tlightIndexMap.set(light, lightDefs.length - 1);\n\t\t}\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tconst light = node.getExtension<Light>(NAME);\n\t\t\t\tif (light) {\n\t\t\t\t\tconst nodeIndex = context.nodeIndexMap.get(node)!;\n\t\t\t\t\tconst nodeDef = jsonDoc.json.nodes![nodeIndex];\n\t\t\t\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\t\t\t\tnodeDef.extensions[NAME] = { light: lightIndexMap.get(light) };\n\t\t\t\t}\n\t\t\t});\n\n\t\tjsonDoc.json.extensions = jsonDoc.json.extensions || {};\n\t\tjsonDoc.json.extensions[NAME] = { lights: lightDefs };\n\n\t\treturn this;\n\t}\n}\n","import {\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_CLEARCOAT } from '../constants';\n\ninterface IClearcoat extends IProperty {\n\tclearcoatFactor: number;\n\tclearcoatTexture: Texture;\n\tclearcoatTextureInfo: TextureInfo;\n\n\tclearcoatRoughnessFactor: number;\n\tclearcoatRoughnessTexture: Texture;\n\tclearcoatRoughnessTextureInfo: TextureInfo;\n\n\tclearcoatNormalScale: number;\n\tclearcoatNormalTexture: Texture;\n\tclearcoatNormalTextureInfo: TextureInfo;\n}\n\nconst { R, G, B } = TextureChannel;\n\n/**\n * # Clearcoat\n *\n * Defines clear coat for a PBR material. See {@link MaterialsClearcoat}.\n */\nexport class Clearcoat extends ExtensionProperty<IClearcoat> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_CLEARCOAT;\n\tpublic declare extensionName: typeof KHR_MATERIALS_CLEARCOAT;\n\tpublic declare propertyType: 'Clearcoat';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_CLEARCOAT;\n\t\tthis.propertyType = 'Clearcoat';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IClearcoat> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tclearcoatFactor: 0,\n\t\t\tclearcoatTexture: null,\n\t\t\tclearcoatTextureInfo: new TextureInfo(this.graph, 'clearcoatTextureInfo'),\n\n\t\t\tclearcoatRoughnessFactor: 0,\n\t\t\tclearcoatRoughnessTexture: null,\n\t\t\tclearcoatRoughnessTextureInfo: new TextureInfo(this.graph, 'clearcoatRoughnessTextureInfo'),\n\n\t\t\tclearcoatNormalScale: 1,\n\t\t\tclearcoatNormalTexture: null,\n\t\t\tclearcoatNormalTextureInfo: new TextureInfo(this.graph, 'clearcoatNormalTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat.\n\t */\n\n\t/** Clearcoat; linear multiplier. See {@link getClearcoatTexture}. */\n\tpublic getClearcoatFactor(): number {\n\t\treturn this.get('clearcoatFactor');\n\t}\n\n\t/** Clearcoat; linear multiplier. See {@link getClearcoatTexture}. */\n\tpublic setClearcoatFactor(factor: number): this {\n\t\treturn this.set('clearcoatFactor', factor);\n\t}\n\n\t/**\n\t * Clearcoat texture; linear multiplier. The `r` channel of this texture specifies an amount\n\t * [0-1] of coating over the surface of the material, which may have its own roughness and\n\t * normal map properties.\n\t */\n\tpublic getClearcoatTexture(): Texture | null {\n\t\treturn this.getRef('clearcoatTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('clearcoatTexture') ? this.getRef('clearcoatTextureInfo') : null;\n\t}\n\n\t/** Sets clearcoat texture. See {@link getClearcoatTexture}. */\n\tpublic setClearcoatTexture(texture: Texture | null): this {\n\t\treturn this.setRef('clearcoatTexture', texture, { channels: R });\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat roughness.\n\t */\n\n\t/** Clearcoat roughness; linear multiplier. See {@link getClearcoatRoughnessTexture}. */\n\tpublic getClearcoatRoughnessFactor(): number {\n\t\treturn this.get('clearcoatRoughnessFactor');\n\t}\n\n\t/** Clearcoat roughness; linear multiplier. See {@link getClearcoatRoughnessTexture}. */\n\tpublic setClearcoatRoughnessFactor(factor: number): this {\n\t\treturn this.set('clearcoatRoughnessFactor', factor);\n\t}\n\n\t/**\n\t * Clearcoat roughness texture; linear multiplier. The `g` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic getClearcoatRoughnessTexture(): Texture | null {\n\t\treturn this.getRef('clearcoatRoughnessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('clearcoatRoughnessTexture') ? this.getRef('clearcoatRoughnessTextureInfo') : null;\n\t}\n\n\t/** Sets clearcoat roughness texture. See {@link getClearcoatRoughnessTexture}. */\n\tpublic setClearcoatRoughnessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('clearcoatRoughnessTexture', texture, { channels: G });\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat normals.\n\t */\n\n\t/** Clearcoat normal scale. See {@link getClearcoatNormalTexture}. */\n\tpublic getClearcoatNormalScale(): number {\n\t\treturn this.get('clearcoatNormalScale');\n\t}\n\n\t/** Clearcoat normal scale. See {@link getClearcoatNormalTexture}. */\n\tpublic setClearcoatNormalScale(scale: number): this {\n\t\treturn this.set('clearcoatNormalScale', scale);\n\t}\n\n\t/**\n\t * Clearcoat normal map. Independent of the material base layer normal map.\n\t */\n\tpublic getClearcoatNormalTexture(): Texture | null {\n\t\treturn this.getRef('clearcoatNormalTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat normal texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatNormalTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('clearcoatNormalTexture') ? this.getRef('clearcoatNormalTextureInfo') : null;\n\t}\n\n\t/** Sets clearcoat normal texture. See {@link getClearcoatNormalTexture}. */\n\tpublic setClearcoatNormalTexture(texture: Texture | null): this {\n\t\treturn this.setRef('clearcoatNormalTexture', texture, { channels: R | G | B });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_CLEARCOAT } from '../constants';\nimport { Clearcoat } from './clearcoat';\n\nconst NAME = KHR_MATERIALS_CLEARCOAT;\n\ninterface ClearcoatDef {\n\tclearcoatFactor?: number;\n\tclearcoatRoughnessFactor?: number;\n\tclearcoatTexture?: GLTF.ITextureInfo;\n\tclearcoatRoughnessTexture?: GLTF.ITextureInfo;\n\tclearcoatNormalTexture?: GLTF.IMaterialNormalTextureInfo;\n}\n\n/**\n * # MaterialsClearcoat\n *\n * [KHR_materials_clearcoat](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_clearcoat/)\n * defines a clear coating on a glTF PBR material.\n *\n * ![Illustration](/media/extensions/khr-materials-clearcoat.png)\n *\n * > _**Figure:** Comparison of a carbon-fiber material without clearcoat (left) and with clearcoat\n * > (right). Source: [Filament](https://google.github.io/filament/Materials.html)._\n *\n * A clear coat is a common technique used in Physically-Based\n * Rendering for a protective layer applied to a base material.\n * Commonly used to represent car paint, carbon fiber, or thin lacquers.\n *\n * Properties:\n * - {@link Clearcoat}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsClearcoat, Clearcoat } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const clearcoatExtension = document.createExtension(MaterialsClearcoat);\n *\n * // Create Clearcoat property.\n * const clearcoat = clearcoatExtension.createClearcoat()\n *\t.setClearcoatFactor(1.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_clearcoat', clearcoat);\n * ```\n */\nexport class MaterialsClearcoat extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Clearcoat property for use on a {@link Material}. */\n\tpublic createClearcoat(): Clearcoat {\n\t\treturn new Clearcoat(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst clearcoat = this.createClearcoat();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, clearcoat);\n\n\t\t\t\tconst clearcoatDef = materialDef.extensions[NAME] as ClearcoatDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (clearcoatDef.clearcoatFactor !== undefined) {\n\t\t\t\t\tclearcoat.setClearcoatFactor(clearcoatDef.clearcoatFactor);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatRoughnessFactor !== undefined) {\n\t\t\t\t\tclearcoat.setClearcoatRoughnessFactor(clearcoatDef.clearcoatRoughnessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (clearcoatDef.clearcoatTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatRoughnessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatRoughnessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatRoughnessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatNormalTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatNormalTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatNormalTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatNormalTextureInfo()!, textureInfoDef);\n\t\t\t\t\tif (textureInfoDef.scale !== undefined) {\n\t\t\t\t\t\tclearcoat.setClearcoatNormalScale(textureInfoDef.scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst clearcoat = material.getExtension<Clearcoat>(NAME);\n\t\t\t\tif (clearcoat) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst clearcoatDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\tclearcoatFactor: clearcoat.getClearcoatFactor(),\n\t\t\t\t\t\tclearcoatRoughnessFactor: clearcoat.getClearcoatRoughnessFactor(),\n\t\t\t\t\t} as ClearcoatDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (clearcoat.getClearcoatTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (clearcoat.getClearcoatRoughnessTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatRoughnessTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatRoughnessTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatRoughnessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (clearcoat.getClearcoatNormalTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatNormalTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatNormalTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatNormalTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t\tif (clearcoat.getClearcoatNormalScale() !== 1) {\n\t\t\t\t\t\t\tclearcoatDef.clearcoatNormalTexture.scale = clearcoat.getClearcoatNormalScale();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_EMISSIVE_STRENGTH } from '../constants';\n\ninterface IEmissiveStrength extends IProperty {\n\temissiveStrength: number;\n}\n\n/**\n * # EmissiveStrength\n *\n * Defines emissive strength for a PBR {@link Material}, allowing high-dynamic-range\n * (HDR) emissive materials. See {@link MaterialsEmissiveStrength}.\n */\nexport class EmissiveStrength extends ExtensionProperty<IEmissiveStrength> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\tpublic declare extensionName: typeof KHR_MATERIALS_EMISSIVE_STRENGTH;\n\tpublic declare propertyType: 'EmissiveStrength';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\t\tthis.propertyType = 'EmissiveStrength';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IEmissiveStrength> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { emissiveStrength: 1.0 });\n\t}\n\n\t/**********************************************************************************************\n\t * EmissiveStrength.\n\t */\n\n\t/** EmissiveStrength. */\n\tpublic getEmissiveStrength(): number {\n\t\treturn this.get('emissiveStrength');\n\t}\n\n\t/** EmissiveStrength. */\n\tpublic setEmissiveStrength(strength: number): this {\n\t\treturn this.set('emissiveStrength', strength);\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_EMISSIVE_STRENGTH } from '../constants';\nimport { EmissiveStrength } from './emissive-strength';\n\nconst NAME = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\ninterface EmissiveStrengthDef {\n\temissiveStrength?: number;\n}\n\n/**\n * # MaterialsEmissiveStrength\n *\n * [KHR_materials_emissive_strength](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_emissive_strength/)\n * defines emissive strength and enables high-dynamic-range (HDR) emissive materials.\n *\n * [[include:UNRATIFIED_EXTENSIONS_NOTE.md]]\n *\n * The core glTF 2.0 material model includes {@link Material.setEmissiveFactor `emissiveFactor`}\n * and {@link Material.setEmissiveTexture `emissiveTexture`} to control the color and intensity\n * of the light being emitted by the material, clamped to the range [0.0, 1.0]. However, in\n * PBR environments with HDR reflections and lighting, stronger emission effects may be desirable.\n *\n * In this extension, a new {@link EmissiveStrength.setEmissiveStrength `emissiveStrength`} scalar\n * factor is supplied, which governs the upper limit of emissive strength per material and may be\n * given arbitrarily high values.\n *\n * For implementations where a physical light unit is needed, the units for the multiplicative\n * product of the emissive texture and factor are candela per square meter (cd / m2), sometimes\n * called _nits_. Many realtime rendering engines simplify this calculation by assuming that an\n * emissive factor of 1.0 results in a fully exposed pixel.\n *\n * Properties:\n * - {@link EmissiveStrength}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsEmissiveStrength, EmissiveStrength } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const emissiveStrengthExtension = document.createExtension(MaterialsEmissiveStrength);\n *\n * // Create EmissiveStrength property.\n * const emissiveStrength = emissiveStrengthExtension\n * \t.createEmissiveStrength().setEmissiveStrength(5.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_emissive_strength', emissiveStrength);\n * ```\n */\nexport class MaterialsEmissiveStrength extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new EmissiveStrength property for use on a {@link Material}. */\n\tpublic createEmissiveStrength(): EmissiveStrength {\n\t\treturn new EmissiveStrength(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst emissiveStrength = this.createEmissiveStrength();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, emissiveStrength);\n\n\t\t\t\tconst emissiveStrengthDef = materialDef.extensions[NAME] as EmissiveStrengthDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (emissiveStrengthDef.emissiveStrength !== undefined) {\n\t\t\t\t\temissiveStrength.setEmissiveStrength(emissiveStrengthDef.emissiveStrength);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst emissiveStrength = material.getExtension<EmissiveStrength>(NAME);\n\t\t\t\tif (emissiveStrength) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tmaterialDef.extensions[NAME] = {\n\t\t\t\t\t\temissiveStrength: emissiveStrength.getEmissiveStrength(),\n\t\t\t\t\t} as EmissiveStrengthDef;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IOR } from '../constants';\n\ninterface IIOR extends IProperty {\n\tior: number;\n}\n\n/**\n * # IOR\n *\n * Defines index of refraction for a PBR {@link Material}. See {@link MaterialsIOR}.\n */\nexport class IOR extends ExtensionProperty<IIOR> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_IOR;\n\tpublic declare extensionName: typeof KHR_MATERIALS_IOR;\n\tpublic declare propertyType: 'IOR';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_IOR;\n\t\tthis.propertyType = 'IOR';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IIOR> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { ior: 0 });\n\t}\n\n\t/**********************************************************************************************\n\t * IOR.\n\t */\n\n\t/** IOR. */\n\tpublic getIOR(): number {\n\t\treturn this.get('ior');\n\t}\n\n\t/** IOR. */\n\tpublic setIOR(ior: number): this {\n\t\treturn this.set('ior', ior);\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IOR } from '../constants';\nimport { IOR } from './ior';\n\nconst NAME = KHR_MATERIALS_IOR;\n\ninterface IORDef {\n\tior?: number;\n}\n\n/**\n * # MaterialsIOR\n *\n * [KHR_materials_ior](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_ior/)\n * defines index of refraction on a glTF PBR material.\n *\n * The dielectric BRDF of the metallic-roughness material in glTF uses a fixed value of 1.5 for the\n * index of refraction. This is a good fit for many plastics and glass, but not for other materials\n * like water or asphalt, sapphire or diamond. `KHR_materials_ior` allows users to set the index of\n * refraction to a certain value.\n *\n * Properties:\n * - {@link IOR}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsIOR, IOR } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const iorExtension = document.createExtension(MaterialsIOR);\n *\n * // Create IOR property.\n * const ior = iorExtension.createIOR().setIOR(1.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_ior', ior);\n * ```\n */\nexport class MaterialsIOR extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new IOR property for use on a {@link Material}. */\n\tpublic createIOR(): IOR {\n\t\treturn new IOR(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst ior = this.createIOR();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, ior);\n\n\t\t\t\tconst iorDef = materialDef.extensions[NAME] as IORDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (iorDef.ior !== undefined) {\n\t\t\t\t\tior.setIOR(iorDef.ior);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst ior = material.getExtension<IOR>(NAME);\n\t\t\t\tif (ior) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tmaterialDef.extensions[NAME] = {\n\t\t\t\t\t\tior: ior.getIOR(),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS } from '../constants';\n\ninterface IPBRSpecularGlossiness extends IProperty {\n\tdiffuseFactor: vec4;\n\tdiffuseTexture: Texture;\n\tdiffuseTextureInfo: TextureInfo;\n\tspecularFactor: vec3;\n\tglossinessFactor: number;\n\tspecularGlossinessTexture: Texture;\n\tspecularGlossinessTextureInfo: TextureInfo;\n}\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * # PBRSpecularGlossiness\n *\n * Converts a {@link Material} to a spec/gloss workflow. See {@link MaterialsPBRSpecularGlossiness}.\n */\nexport class PBRSpecularGlossiness extends ExtensionProperty<IPBRSpecularGlossiness> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\tpublic declare propertyType: 'PBRSpecularGlossiness';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\t\tthis.propertyType = 'PBRSpecularGlossiness';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IPBRSpecularGlossiness> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tdiffuseFactor: [1.0, 1.0, 1.0, 1.0] as vec4,\n\t\t\tdiffuseTexture: null,\n\t\t\tdiffuseTextureInfo: new TextureInfo(this.graph, 'diffuseTextureInfo'),\n\t\t\tspecularFactor: [1.0, 1.0, 1.0] as vec3,\n\t\t\tglossinessFactor: 1.0,\n\t\t\tspecularGlossinessTexture: null,\n\t\t\tspecularGlossinessTextureInfo: new TextureInfo(this.graph, 'specularGlossinessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Diffuse.\n\t */\n\n\t/** Diffuse; Linear-sRGB components. See {@link getDiffuseTexture}. */\n\tpublic getDiffuseFactor(): vec4 {\n\t\treturn this.get('diffuseFactor');\n\t}\n\n\t/** Diffuse; Linear-sRGB components. See {@link getDiffuseTexture}. */\n\tpublic setDiffuseFactor(factor: vec4): this {\n\t\treturn this.set('diffuseFactor', factor);\n\t}\n\n\t/** Diffuse; sRGB hexadecimal color. */\n\tpublic getDiffuseHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getDiffuseFactor());\n\t}\n\n\t/** Diffuse; sRGB hexadecimal color. */\n\tpublic setDiffuseHex(hex: number): this {\n\t\tconst factor = this.getDiffuseFactor().slice() as vec4;\n\t\treturn this.setDiffuseFactor(ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Diffuse texture; sRGB. Alternative to baseColorTexture, used within the\n\t * spec/gloss PBR workflow.\n\t */\n\tpublic getDiffuseTexture(): Texture | null {\n\t\treturn this.getRef('diffuseTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its diffuse texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getDiffuseTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('diffuseTexture') ? this.getRef('diffuseTextureInfo') : null;\n\t}\n\n\t/** Sets diffuse texture. See {@link getDiffuseTexture}. */\n\tpublic setDiffuseTexture(texture: Texture | null): this {\n\t\treturn this.setRef('diffuseTexture', texture, { channels: R | G | B | A });\n\t}\n\n\t/**********************************************************************************************\n\t * Specular.\n\t */\n\n\t/** Specular; linear multiplier. */\n\tpublic getSpecularFactor(): vec3 {\n\t\treturn this.get('specularFactor');\n\t}\n\n\t/** Specular; linear multiplier. */\n\tpublic setSpecularFactor(factor: vec3): this {\n\t\treturn this.set('specularFactor', factor);\n\t}\n\n\t/**********************************************************************************************\n\t * Glossiness.\n\t */\n\n\t/** Glossiness; linear multiplier. */\n\tpublic getGlossinessFactor(): number {\n\t\treturn this.get('glossinessFactor');\n\t}\n\n\t/** Glossiness; linear multiplier. */\n\tpublic setGlossinessFactor(factor: number): this {\n\t\treturn this.set('glossinessFactor', factor);\n\t}\n\n\t/**********************************************************************************************\n\t * Specular/Glossiness.\n\t */\n\n\t/** Spec/gloss texture; linear multiplier. */\n\tpublic getSpecularGlossinessTexture(): Texture | null {\n\t\treturn this.getRef('specularGlossinessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its spec/gloss texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularGlossinessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('specularGlossinessTexture') ? this.getRef('specularGlossinessTextureInfo') : null;\n\t}\n\n\t/** Spec/gloss texture; linear multiplier. */\n\tpublic setSpecularGlossinessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('specularGlossinessTexture', texture, { channels: R | G | B | A });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, vec4 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS } from '../constants';\nimport { PBRSpecularGlossiness } from './pbr-specular-glossiness';\n\nconst NAME = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\ninterface SpecularGlossinessDef {\n\tdiffuseFactor?: vec4;\n\tspecularFactor: vec3;\n\tglossinessFactor: number;\n\tdiffuseTexture?: GLTF.ITextureInfo;\n\tspecularGlossinessTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsPBRSpecularGlossiness\n *\n * [`KHR_materials_pbrSpecularGlossiness`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/)\n * converts a PBR material from the default metal/rough workflow to a spec/gloss workflow.\n *\n * > _**NOTICE:** The spec/gloss workflow does _not_ support other PBR extensions such as clearcoat,\n * > transmission, IOR, etc. For the complete PBR feature set and specular data, use the\n * > {@link MaterialsSpecular} extension instead, which provides specular data within a metal/rough\n * > workflow._\n *\n * ![Illustration](/media/extensions/khr-material-pbr-specular-glossiness.png)\n *\n * > _**Figure:** Components of a PBR spec/gloss material. Source: Khronos Group._\n *\n * Properties:\n * - {@link PBRSpecularGlossiness}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsPBRSpecularGlossiness } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const specGlossExtension = document.createExtension(MaterialsPBRSpecularGlossiness);\n *\n * // Create a PBRSpecularGlossiness property.\n * const specGloss = specGlossExtension.createPBRSpecularGlossiness()\n * \t.setSpecularFactor(1.0);\n *\n * // // Assign to a Material.\n * material.setExtension('KHR_materials_pbrSpecularGlossiness', specGloss);\n * ```\n */\nexport class MaterialsPBRSpecularGlossiness extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new PBRSpecularGlossiness property for use on a {@link Material}. */\n\tpublic createPBRSpecularGlossiness(): PBRSpecularGlossiness {\n\t\treturn new PBRSpecularGlossiness(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst specGloss = this.createPBRSpecularGlossiness();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, specGloss);\n\n\t\t\t\tconst specGlossDef = materialDef.extensions[NAME] as SpecularGlossinessDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (specGlossDef.diffuseFactor !== undefined) {\n\t\t\t\t\tspecGloss.setDiffuseFactor(specGlossDef.diffuseFactor);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.specularFactor !== undefined) {\n\t\t\t\t\tspecGloss.setSpecularFactor(specGlossDef.specularFactor);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.glossinessFactor !== undefined) {\n\t\t\t\t\tspecGloss.setGlossinessFactor(specGlossDef.glossinessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (specGlossDef.diffuseTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specGlossDef.diffuseTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecGloss.setDiffuseTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specGloss.getDiffuseTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.specularGlossinessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specGlossDef.specularGlossinessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecGloss.setSpecularGlossinessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specGloss.getSpecularGlossinessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>(NAME);\n\t\t\t\tif (specGloss) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst specGlossDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\tdiffuseFactor: specGloss.getDiffuseFactor(),\n\t\t\t\t\t\tspecularFactor: specGloss.getSpecularFactor(),\n\t\t\t\t\t\tglossinessFactor: specGloss.getGlossinessFactor(),\n\t\t\t\t\t} as SpecularGlossinessDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (specGloss.getDiffuseTexture()) {\n\t\t\t\t\t\tconst texture = specGloss.getDiffuseTexture()!;\n\t\t\t\t\t\tconst textureInfo = specGloss.getDiffuseTextureInfo()!;\n\t\t\t\t\t\tspecGlossDef.diffuseTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (specGloss.getSpecularGlossinessTexture()) {\n\t\t\t\t\t\tconst texture = specGloss.getSpecularGlossinessTexture()!;\n\t\t\t\t\t\tconst textureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\t\t\tspecGlossDef.specularGlossinessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_SHEEN } from '../constants';\n\ninterface ISheen extends IProperty {\n\tsheenColorFactor: vec3;\n\tsheenColorTexture: Texture;\n\tsheenColorTextureInfo: TextureInfo;\n\tsheenRoughnessFactor: number;\n\tsheenRoughnessTexture: Texture;\n\tsheenRoughnessTextureInfo: TextureInfo;\n}\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * # Sheen\n *\n * Defines sheen on a PBR {@link Material}. See {@link MaterialsSheen}.\n */\nexport class Sheen extends ExtensionProperty<ISheen> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_SHEEN;\n\tpublic declare extensionName: typeof KHR_MATERIALS_SHEEN;\n\tpublic declare propertyType: 'Sheen';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_SHEEN;\n\t\tthis.propertyType = 'Sheen';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<ISheen> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tsheenColorFactor: [0.0, 0.0, 0.0] as vec3,\n\t\t\tsheenColorTexture: null,\n\t\t\tsheenColorTextureInfo: new TextureInfo(this.graph, 'sheenColorTextureInfo'),\n\t\t\tsheenRoughnessFactor: 0.0,\n\t\t\tsheenRoughnessTexture: null,\n\t\t\tsheenRoughnessTextureInfo: new TextureInfo(this.graph, 'sheenRoughnessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Sheen color.\n\t */\n\n\t/** Sheen; linear multiplier. */\n\tpublic getSheenColorFactor(): vec3 {\n\t\treturn this.get('sheenColorFactor');\n\t}\n\n\t/** Sheen; hex color in sRGB colorspace. */\n\tpublic getSheenColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getSheenColorFactor());\n\t}\n\n\t/** Sheen; linear multiplier. */\n\tpublic setSheenColorFactor(factor: vec3): this {\n\t\treturn this.set('sheenColorFactor', factor);\n\t}\n\n\t/** Sheen; hex color in sRGB colorspace. */\n\tpublic setSheenColorHex(hex: number): this {\n\t\tconst factor = this.getSheenColorFactor().slice() as vec3;\n\t\treturn this.set('sheenColorFactor', ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Sheen color texture, in sRGB colorspace.\n\t */\n\tpublic getSheenColorTexture(): Texture | null {\n\t\treturn this.getRef('sheenColorTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its sheen color texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSheenColorTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('sheenColorTexture') ? this.getRef('sheenColorTextureInfo') : null;\n\t}\n\n\t/** Sets sheen color texture. See {@link getSheenColorTexture}. */\n\tpublic setSheenColorTexture(texture: Texture | null): this {\n\t\treturn this.setRef('sheenColorTexture', texture, { channels: R | G | B });\n\t}\n\n\t/**********************************************************************************************\n\t * Sheen roughness.\n\t */\n\n\t/** Sheen roughness; linear multiplier. See {@link getSheenRoughnessTexture}. */\n\tpublic getSheenRoughnessFactor(): number {\n\t\treturn this.get('sheenRoughnessFactor');\n\t}\n\n\t/** Sheen roughness; linear multiplier. See {@link getSheenRoughnessTexture}. */\n\tpublic setSheenRoughnessFactor(factor: number): this {\n\t\treturn this.set('sheenRoughnessFactor', factor);\n\t}\n\n\t/**\n\t * Sheen roughness texture; linear multiplier. The `a` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic getSheenRoughnessTexture(): Texture | null {\n\t\treturn this.getRef('sheenRoughnessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its sheen roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getSheenRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('sheenRoughnessTexture') ? this.getRef('sheenRoughnessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Sets sheen roughness texture.  The `a` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic setSheenRoughnessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('sheenRoughnessTexture', texture, { channels: A });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SHEEN } from '../constants';\nimport { Sheen } from './sheen';\n\nconst NAME = KHR_MATERIALS_SHEEN;\n\ninterface SheenDef {\n\tsheenColorFactor?: vec3;\n\tsheenRoughnessFactor?: number;\n\tsheenColorTexture?: GLTF.ITextureInfo;\n\tsheenRoughnessTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsSheen\n *\n * [`KHR_materials_sheen`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_sheen/)\n * defines a velvet-like sheen layered on a glTF PBR material.\n *\n * ![Illustration](/media/extensions/khr-materials-sheen.png)\n *\n * > _**Figure:** A cushion, showing high material roughness and low sheen roughness. Soft\n * > highlights at edges of the material show backscattering from microfibers. Source: Khronos\n * > Group._\n *\n * A sheen layer is a common technique used in Physically-Based Rendering to represent\n * cloth and fabric materials.\n *\n * Properties:\n * - {@link Sheen}\n *\n * ### Example\n *\n * The `MaterialsSheen` class provides a single {@link ExtensionProperty} type, `Sheen`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsSheen, Sheen } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const sheenExtension = document.createExtension(MaterialsSheen);\n *\n * // Create a Sheen property.\n * const sheen = sheenExtension.createSheen()\n * \t.setSheenColorFactor([1.0, 1.0, 1.0]);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_sheen', sheen);\n * ```\n */\nexport class MaterialsSheen extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Sheen property for use on a {@link Material}. */\n\tpublic createSheen(): Sheen {\n\t\treturn new Sheen(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst sheen = this.createSheen();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, sheen);\n\n\t\t\t\tconst sheenDef = materialDef.extensions[NAME] as SheenDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (sheenDef.sheenColorFactor !== undefined) {\n\t\t\t\t\tsheen.setSheenColorFactor(sheenDef.sheenColorFactor);\n\t\t\t\t}\n\t\t\t\tif (sheenDef.sheenRoughnessFactor !== undefined) {\n\t\t\t\t\tsheen.setSheenRoughnessFactor(sheenDef.sheenRoughnessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (sheenDef.sheenColorTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = sheenDef.sheenColorTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tsheen.setSheenColorTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(sheen.getSheenColorTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (sheenDef.sheenRoughnessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = sheenDef.sheenRoughnessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tsheen.setSheenRoughnessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(sheen.getSheenRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst sheen = material.getExtension<Sheen>(NAME);\n\t\t\t\tif (sheen) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst sheenDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\tsheenColorFactor: sheen.getSheenColorFactor(),\n\t\t\t\t\t\tsheenRoughnessFactor: sheen.getSheenRoughnessFactor(),\n\t\t\t\t\t} as SheenDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (sheen.getSheenColorTexture()) {\n\t\t\t\t\t\tconst texture = sheen.getSheenColorTexture()!;\n\t\t\t\t\t\tconst textureInfo = sheen.getSheenColorTextureInfo()!;\n\t\t\t\t\t\tsheenDef.sheenColorTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (sheen.getSheenRoughnessTexture()) {\n\t\t\t\t\t\tconst texture = sheen.getSheenRoughnessTexture()!;\n\t\t\t\t\t\tconst textureInfo = sheen.getSheenRoughnessTextureInfo()!;\n\t\t\t\t\t\tsheenDef.sheenRoughnessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_SPECULAR } from '../constants';\n\ninterface ISpecular extends IProperty {\n\tspecularFactor: number;\n\tspecularTexture: Texture;\n\tspecularTextureInfo: TextureInfo;\n\tspecularColorFactor: vec3;\n\tspecularColorTexture: Texture;\n\tspecularColorTextureInfo: TextureInfo;\n}\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * # Specular\n *\n * Defines specular reflectivity on a PBR {@link Material}. See {@link MaterialsSpecular}.\n */\nexport class Specular extends ExtensionProperty<ISpecular> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_SPECULAR;\n\tpublic declare extensionName: typeof KHR_MATERIALS_SPECULAR;\n\tpublic declare propertyType: 'Specular';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_SPECULAR;\n\t\tthis.propertyType = 'Specular';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<ISpecular> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tspecularFactor: 1.0,\n\t\t\tspecularTexture: null,\n\t\t\tspecularTextureInfo: new TextureInfo(this.graph, 'specularTextureInfo'),\n\t\t\tspecularColorFactor: [1.0, 1.0, 1.0] as vec3,\n\t\t\tspecularColorTexture: null,\n\t\t\tspecularColorTextureInfo: new TextureInfo(this.graph, 'specularColorTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Specular.\n\t */\n\n\t/** Specular; linear multiplier. See {@link getSpecularTexture}. */\n\tpublic getSpecularFactor(): number {\n\t\treturn this.get('specularFactor');\n\t}\n\n\t/** Specular; linear multiplier. See {@link getSpecularTexture}. */\n\tpublic setSpecularFactor(factor: number): this {\n\t\treturn this.set('specularFactor', factor);\n\t}\n\n\t/** Specular color; Linear-sRGB components. See {@link getSpecularTexture}. */\n\tpublic getSpecularColorFactor(): vec3 {\n\t\treturn this.get('specularColorFactor');\n\t}\n\n\t/** Specular color; Linear-sRGB components. See {@link getSpecularTexture}. */\n\tpublic setSpecularColorFactor(factor: vec3): this {\n\t\treturn this.set('specularColorFactor', factor);\n\t}\n\n\t/** Specular color; sRGB hexadecimal color. See {@link getSpecularTexture} */\n\tpublic getSpecularColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getSpecularColorFactor());\n\t}\n\n\t/** Specular color; sRGB hexadecimal color. See {@link getSpecularTexture} */\n\tpublic setSpecularColorHex(hex: number): this {\n\t\tconst factor = this.getSpecularColorFactor().slice() as vec3;\n\t\treturn this.set('specularColorFactor', ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Specular texture; linear multiplier. Configures the strength of the specular reflection in\n\t * the dielectric BRDF. A value of zero disables the specular reflection, resulting in a pure\n\t * diffuse material.\n\t *\n\t * Only the alpha (A) channel is used for specular strength, but this texture may optionally\n\t * be packed with specular color (RGB) into a single texture.\n\t */\n\tpublic getSpecularTexture(): Texture | null {\n\t\treturn this.getRef('specularTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its specular texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('specularTexture') ? this.getRef('specularTextureInfo') : null;\n\t}\n\n\t/** Sets specular texture. See {@link getSpecularTexture}. */\n\tpublic setSpecularTexture(texture: Texture | null): this {\n\t\treturn this.setRef('specularTexture', texture, { channels: A });\n\t}\n\n\t/**\n\t * Specular color texture; linear multiplier. Defines the F0 color of the specular reflection\n\t * (RGB channels, encoded in sRGB) in the the dielectric BRDF.\n\t *\n\t * Only RGB channels are used here, but this texture may optionally be packed with a specular\n\t * factor (A) into a single texture.\n\t */\n\tpublic getSpecularColorTexture(): Texture | null {\n\t\treturn this.getRef('specularColorTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its specular color texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularColorTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('specularColorTexture') ? this.getRef('specularColorTextureInfo') : null;\n\t}\n\n\t/** Sets specular color texture. See {@link getSpecularColorTexture}. */\n\tpublic setSpecularColorTexture(texture: Texture | null): this {\n\t\treturn this.setRef('specularColorTexture', texture, { channels: R | G | B });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, MathUtils } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SPECULAR } from '../constants';\nimport { Specular } from './specular';\n\nconst NAME = KHR_MATERIALS_SPECULAR;\n\ninterface SpecularDef {\n\tspecularFactor?: number;\n\tspecularColorFactor?: vec3;\n\tspecularTexture?: GLTF.ITextureInfo;\n\tspecularColorTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsSpecular\n *\n * [`KHR_materials_specular`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_specular/)\n * adjusts the strength of the specular reflection in the dielectric BRDF.\n *\n * MaterialsSpecular is a better alternative to the older\n * {@link MaterialsPBRSpecularGlossiness KHR_materials_pbrSpecularGlossiness} extension, and\n * provides specular information while remaining within a metal/rough PBR workflow. A\n * value of zero disables the specular reflection, resulting in a pure diffuse material.\n *\n * Properties:\n * - {@link Specular}\n *\n * ### Example\n *\n * The `MaterialsSpecular` class provides a single {@link ExtensionProperty} type, `Specular`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsSpecular, Specular } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const specularExtension = document.createExtension(MaterialsSpecular);\n *\n * // Create a Specular property.\n * const specular = specularExtension.createSpecular()\n * \t.setSpecularFactor(1.0);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_specular', specular);\n * ```\n */\nexport class MaterialsSpecular extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Specular property for use on a {@link Material}. */\n\tpublic createSpecular(): Specular {\n\t\treturn new Specular(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst specular = this.createSpecular();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, specular);\n\n\t\t\t\tconst specularDef = materialDef.extensions[NAME] as SpecularDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (specularDef.specularFactor !== undefined) {\n\t\t\t\t\tspecular.setSpecularFactor(specularDef.specularFactor);\n\t\t\t\t}\n\t\t\t\tif (specularDef.specularColorFactor !== undefined) {\n\t\t\t\t\tspecular.setSpecularColorFactor(specularDef.specularColorFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (specularDef.specularTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specularDef.specularTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecular.setSpecularTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specular.getSpecularTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (specularDef.specularColorTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specularDef.specularColorTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecular.setSpecularColorTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specular.getSpecularColorTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst specular = material.getExtension<Specular>(NAME);\n\t\t\t\tif (specular) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst specularDef = (materialDef.extensions[NAME] = {} as SpecularDef);\n\n\t\t\t\t\tif (specular.getSpecularFactor() !== 1) {\n\t\t\t\t\t\tspecularDef.specularFactor = specular.getSpecularFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (!MathUtils.eq(specular.getSpecularColorFactor(), [1, 1, 1])) {\n\t\t\t\t\t\tspecularDef.specularColorFactor = specular.getSpecularColorFactor();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (specular.getSpecularTexture()) {\n\t\t\t\t\t\tconst texture = specular.getSpecularTexture()!;\n\t\t\t\t\t\tconst textureInfo = specular.getSpecularTextureInfo()!;\n\t\t\t\t\t\tspecularDef.specularTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (specular.getSpecularColorTexture()) {\n\t\t\t\t\t\tconst texture = specular.getSpecularColorTexture()!;\n\t\t\t\t\t\tconst textureInfo = specular.getSpecularColorTextureInfo()!;\n\t\t\t\t\t\tspecularDef.specularColorTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import {\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_TRANSMISSION } from '../constants';\n\ninterface ITransmission extends IProperty {\n\ttransmissionFactor: number;\n\ttransmissionTexture: Texture;\n\ttransmissionTextureInfo: TextureInfo;\n}\n\nconst { R } = TextureChannel;\n\n/**\n * # Transmission\n *\n * Defines optical transmission on a PBR {@link Material}. See {@link MaterialsTransmission}.\n */\nexport class Transmission extends ExtensionProperty<ITransmission> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_TRANSMISSION;\n\tpublic declare extensionName: typeof KHR_MATERIALS_TRANSMISSION;\n\tpublic declare propertyType: 'Transmission';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_TRANSMISSION;\n\t\tthis.propertyType = 'Transmission';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<ITransmission> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\ttransmissionFactor: 0.0,\n\t\t\ttransmissionTexture: null,\n\t\t\ttransmissionTextureInfo: new TextureInfo(this.graph, 'transmissionTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Transmission.\n\t */\n\n\t/** Transmission; linear multiplier. See {@link getTransmissionTexture}. */\n\tpublic getTransmissionFactor(): number {\n\t\treturn this.get('transmissionFactor');\n\t}\n\n\t/** Transmission; linear multiplier. See {@link getTransmissionTexture}. */\n\tpublic setTransmissionFactor(factor: number): this {\n\t\treturn this.set('transmissionFactor', factor);\n\t}\n\n\t/**\n\t * Transmission texture; linear multiplier. The `r` channel of this texture specifies\n\t * transmission [0-1] of the material's surface. By default this is a thin transparency\n\t * effect, but volume effects (refraction, subsurface scattering) may be introduced with the\n\t * addition of the `KHR_materials_volume` extension.\n\t */\n\tpublic getTransmissionTexture(): Texture | null {\n\t\treturn this.getRef('transmissionTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its transmission texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getTransmissionTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('transmissionTexture') ? this.getRef('transmissionTextureInfo') : null;\n\t}\n\n\t/** Sets transmission texture. See {@link getTransmissionTexture}. */\n\tpublic setTransmissionTexture(texture: Texture | null): this {\n\t\treturn this.setRef('transmissionTexture', texture, { channels: R });\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_TRANSMISSION } from '../constants';\nimport { Transmission } from './transmission';\n\nconst NAME = KHR_MATERIALS_TRANSMISSION;\n\ninterface TransmissionDef {\n\ttransmissionFactor?: number;\n\ttransmissionTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsTransmission\n *\n * [`KHR_materials_transmission`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_transmission/)\n * provides a common type of optical transparency: infinitely-thin materials with no refraction,\n * scattering, or dispersion.\n *\n * While default PBR materials using alpha blending become invisible as their opacity approaches\n * zero, a transmissive material continues to reflect light in a glass-like manner, even at low\n * transmission values. When combined with {@link MaterialsVolume}, transmission may be used for\n * thicker materials and refractive effects.\n *\n * Properties:\n * - {@link Transmission}\n *\n * ### Example\n *\n * The `MaterialsTransmission` class provides a single {@link ExtensionProperty} type,\n * `Transmission`, which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsTransmission, Transmission } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const transmissionExtension = document.createExtension(MaterialsTransmission);\n *\n * // Create a Transmission property.\n * const transmission = transmissionExtension.createTransmission()\n * \t.setTransmissionFactor(1.0);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_transmission', transmission);\n * ```\n */\nexport class MaterialsTransmission extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Transmission property for use on a {@link Material}. */\n\tpublic createTransmission(): Transmission {\n\t\treturn new Transmission(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst transmission = this.createTransmission();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, transmission);\n\n\t\t\t\tconst transmissionDef = materialDef.extensions[NAME] as TransmissionDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (transmissionDef.transmissionFactor !== undefined) {\n\t\t\t\t\ttransmission.setTransmissionFactor(transmissionDef.transmissionFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (transmissionDef.transmissionTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = transmissionDef.transmissionTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\ttransmission.setTransmissionTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(transmission.getTransmissionTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst transmission = material.getExtension<Transmission>(NAME);\n\t\t\t\tif (transmission) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst transmissionDef = (materialDef.extensions[NAME] = {\n\t\t\t\t\t\ttransmissionFactor: transmission.getTransmissionFactor(),\n\t\t\t\t\t} as TransmissionDef);\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (transmission.getTransmissionTexture()) {\n\t\t\t\t\t\tconst texture = transmission.getTransmissionTexture()!;\n\t\t\t\t\t\tconst textureInfo = transmission.getTransmissionTextureInfo()!;\n\t\t\t\t\t\ttransmissionDef.transmissionTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty } from '@gltf-transform/core';\nimport { PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_UNLIT } from '../constants';\n\n/**\n * # Unlit\n *\n * Converts a PBR {@link Material} to an unlit shading model. See {@link MaterialsUnlit}.\n */\nexport class Unlit extends ExtensionProperty {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_UNLIT;\n\tpublic declare extensionName: typeof KHR_MATERIALS_UNLIT;\n\tpublic declare propertyType: 'Unlit';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_UNLIT;\n\t\tthis.propertyType = 'Unlit';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_UNLIT } from '../constants';\nimport { Unlit } from './unlit';\n\nconst NAME = KHR_MATERIALS_UNLIT;\n\n/**\n * # MaterialsUnlit\n *\n * [`KHR_materials_unlit`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_unlit/)\n * defines an unlit shading model for use in glTF 2.0 materials.\n *\n * ![Illustration](/media/extensions/khr-materials-unlit.png)\n *\n * > _**Figure:** Unlit materials are useful for flat shading, stylized effects, and for improving\n * > performance on mobile devices. Source: [Model by Hayden VanEarden](https://sketchfab.com/3d-models/summertime-kirby-c5711316103a4d67a62c34cfe8710938)._\n *\n * Unlit (also \"Shadeless\" or \"Constant\") materials provide a simple alternative to the Physically\n * Based Rendering (PBR) shading models provided by the core specification. Unlit materials are\n * often useful for cheaper rendering on performance-contrained devices, e.g. mobile phones.\n * Additionally, unlit materials can be very useful in achieving stylized, non-photo-realistic\n * effects like hand painted illustrative styles or baked toon shaders.\n *\n * Properties:\n * - {@link Unlit}\n *\n * ### Example\n *\n * The `MaterialsUnlit` class provides a single {@link ExtensionProperty} type, `Unlit`, which may\n * be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsUnlit, Unlit } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const unlitExtension = document.createExtension(MaterialsUnlit);\n *\n * // Create an Unlit property.\n * const unlit = unlitExtension.createUnlit();\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_unlit', unlit);\n * ```\n */\nexport class MaterialsUnlit extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Unlit property for use on a {@link Material}. */\n\tpublic createUnlit(): Unlit {\n\t\treturn new Unlit(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst materialDefs = context.jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, this.createUnlit());\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tif (material.getExtension<Unlit>(NAME)) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\t\t\t\t\tmaterialDef.extensions[NAME] = {};\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Material, Nullable } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\nimport { Variant } from './variant';\n\ninterface IMapping extends IProperty {\n\tmaterial: Material;\n\tvariants: Variant[];\n}\n\n/**\n * # Mapping\n *\n * Maps {@link Variant}s to {@link Material}s. See {@link MaterialsVariants}.\n */\nexport class Mapping extends ExtensionProperty<IMapping> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VARIANTS;\n\tpublic declare propertyType: 'Mapping';\n\tpublic declare parentTypes: ['MappingList'];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VARIANTS;\n\t\tthis.propertyType = 'Mapping';\n\t\tthis.parentTypes = ['MappingList'];\n\t}\n\n\tprotected getDefaults(): Nullable<IMapping> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { material: null, variants: [] });\n\t}\n\n\t/** The {@link Material} designated for this {@link Primitive}, under the given variants. */\n\tpublic getMaterial(): Material | null {\n\t\treturn this.getRef('material');\n\t}\n\n\t/** The {@link Material} designated for this {@link Primitive}, under the given variants. */\n\tpublic setMaterial(material: Material | null): this {\n\t\treturn this.setRef('material', material);\n\t}\n\n\t/** Adds a {@link Variant} to this mapping. */\n\tpublic addVariant(variant: Variant): this {\n\t\treturn this.addRef('variants', variant);\n\t}\n\n\t/** Removes a {@link Variant} from this mapping. */\n\tpublic removeVariant(variant: Variant): this {\n\t\treturn this.removeRef('variants', variant);\n\t}\n\n\t/** Lists {@link Variant}s in this mapping. */\n\tpublic listVariants(): Variant[] {\n\t\treturn this.listRefs('variants');\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\nimport { Mapping } from './mapping';\n\ninterface IMappingList extends IProperty {\n\tmappings: Mapping[];\n}\n\n/**\n * # MappingList\n *\n * List of material variant {@link Mapping}s. See {@link MaterialsVariants}.\n */\nexport class MappingList extends ExtensionProperty<IMappingList> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VARIANTS;\n\tpublic declare propertyType: 'MappingList';\n\tpublic declare parentTypes: [PropertyType.PRIMITIVE];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VARIANTS;\n\t\tthis.propertyType = 'MappingList';\n\t\tthis.parentTypes = [PropertyType.PRIMITIVE];\n\t}\n\n\tprotected getDefaults(): Nullable<IMappingList> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, { mappings: [] });\n\t}\n\n\t/** Adds a {@link Mapping} to this mapping. */\n\tpublic addMapping(mapping: Mapping): this {\n\t\treturn this.addRef('mappings', mapping);\n\t}\n\n\t/** Removes a {@link Mapping} from the list for this {@link Primitive}. */\n\tpublic removeMapping(mapping: Mapping): this {\n\t\treturn this.removeRef('mappings', mapping);\n\t}\n\n\t/** Lists {@link Mapping}s in this {@link Primitive}. */\n\tpublic listMappings(): Mapping[] {\n\t\treturn this.listRefs('mappings');\n\t}\n}\n","import { ExtensionProperty } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\n\n/**\n * # Variant\n *\n * Defines a variant of a {@link Material}. See {@link MaterialsVariants}.\n */\nexport class Variant extends ExtensionProperty {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VARIANTS;\n\tpublic declare propertyType: 'Variant';\n\tpublic declare parentTypes: ['MappingList'];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VARIANTS;\n\t\tthis.propertyType = 'Variant';\n\t\tthis.parentTypes = ['MappingList'];\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\nimport { Mapping } from './mapping';\nimport { MappingList } from './mapping-list';\nimport { Variant } from './variant';\n\nconst NAME = KHR_MATERIALS_VARIANTS;\n\ninterface VariantsRootDef {\n\tvariants: VariantDef[];\n}\n\ninterface VariantDef {\n\tname?: string;\n}\n\ninterface VariantPrimDef {\n\tmappings: VariantMappingDef[];\n}\n\ninterface VariantMappingDef {\n\tmaterial: number;\n\tvariants: number[];\n}\n\n/**\n * # MaterialsVariants\n *\n * [`KHR_materials_variants`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants/)\n * defines alternate {@link Material} states for any {@link Primitive} in the scene.\n *\n * ![Illustration](/media/extensions/khr-materials-variants.png)\n *\n * > _**Figure:** A sneaker, in three material variants. Source: Khronos Group._\n *\n * Uses include product configurators, night/day states, healthy/damaged states, etc. The\n * `MaterialsVariants` class provides three {@link ExtensionProperty} types: `Variant`, `Mapping`,\n * and `MappingList`. When attached to {@link Primitive} properties, these offer flexible ways of\n * defining the variants available to an application. Triggering a variant is out of scope of this\n * extension, but could be handled in the application with a UI dropdown, particular game states,\n * and so on.\n *\n * Mesh geometry cannot be changed by this extension, although another extension\n * (tentative: `KHR_mesh_variants`) is under consideration by the Khronos Group, for that purpose.\n *\n * Properties:\n * - {@link Variant}\n * - {@link Mapping}\n * - {@link MappingList}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsVariants } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const variantExtension = document.createExtension(MaterialsVariants);\n *\n * // Create some Variant states.\n * const healthyVariant = variantExtension.createVariant('Healthy');\n * const damagedVariant = variantExtension.createVariant('Damaged');\n *\n * // Create mappings from a Variant state to a Material.\n * const healthyMapping = variantExtension.createMapping()\n * \t.addVariant(healthyVariant)\n * \t.setMaterial(healthyMat);\n * const damagedMapping = variantExtension.createMapping()\n * \t.addVariant(damagedVariant)\n * \t.setMaterial(damagedMat);\n *\n * // Attach the mappings to a Primitive.\n * primitive.setExtension(\n * \t'KHR_materials_variants',\n * \tvariantExtension.createMappingList()\n * \t\t.addMapping(healthyMapping)\n * \t\t.addMapping(damagedMapping)\n * );\n * ```\n *\n * A few notes about this extension:\n *\n * 1. Viewers that don't recognized this extension will show the default material for each primitive\n * \t instead, so assign that material accordingly. This material can be — but doesn't have to be —\n * \t associated with one of the available variants.\n * 2. Mappings can list multiple Variants. In that case, the first Mapping containing an active\n * \t Variant will be chosen by the viewer.\n * 3. Variant names are how these states are identified, so choose informative names.\n * 4. When writing the file to an unpacked `.gltf`, instead of an embedded `.glb`, viewers will have\n * \t the option of downloading only textures associated with the default state, and lazy-loading\n * \t any textures for inactive Variants only when they are needed.\n */\nexport class MaterialsVariants extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new MappingList property. */\n\tpublic createMappingList(): MappingList {\n\t\treturn new MappingList(this.document.getGraph());\n\t}\n\n\t/** Creates a new Variant property. */\n\tpublic createVariant(name = ''): Variant {\n\t\treturn new Variant(this.document.getGraph(), name);\n\t}\n\n\t/** Creates a new Mapping property. */\n\tpublic createMapping(): Mapping {\n\t\treturn new Mapping(this.document.getGraph());\n\t}\n\n\t/** Lists all Variants on the current Document. */\n\tpublic listVariants(): Variant[] {\n\t\treturn Array.from(this.properties).filter((prop) => prop instanceof Variant) as Variant[];\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (!jsonDoc.json.extensions || !jsonDoc.json.extensions[NAME]) return this;\n\n\t\t// Read all top-level variant names.\n\t\tconst variantsRootDef = jsonDoc.json.extensions[NAME] as VariantsRootDef;\n\t\tconst variantDefs = variantsRootDef.variants || [];\n\t\tconst variants = variantDefs.map((variantDef) => this.createVariant().setName(variantDef.name || ''));\n\n\t\t// For each mesh primitive, read its material/variant mappings.\n\t\tconst meshDefs = jsonDoc.json.meshes || [];\n\t\tmeshDefs.forEach((meshDef, meshIndex) => {\n\t\t\tconst mesh = context.meshes[meshIndex];\n\t\t\tconst primDefs = meshDef.primitives || [];\n\n\t\t\tprimDefs.forEach((primDef, primIndex) => {\n\t\t\t\tif (!primDef.extensions || !primDef.extensions[NAME]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mappingList = this.createMappingList();\n\n\t\t\t\tconst variantPrimDef = primDef.extensions[NAME] as VariantPrimDef;\n\t\t\t\tfor (const mappingDef of variantPrimDef.mappings) {\n\t\t\t\t\tconst mapping = this.createMapping();\n\n\t\t\t\t\tif (mappingDef.material !== undefined) {\n\t\t\t\t\t\tmapping.setMaterial(context.materials[mappingDef.material]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const variantIndex of mappingDef.variants || []) {\n\t\t\t\t\t\tmapping.addVariant(variants[variantIndex]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmappingList.addMapping(mapping);\n\t\t\t\t}\n\n\t\t\t\tmesh.listPrimitives()[primIndex].setExtension(NAME, mappingList);\n\t\t\t});\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst variants = this.listVariants();\n\t\tif (!variants.length) return this;\n\n\t\t// Write all top-level variant names.\n\t\tconst variantDefs = [];\n\t\tconst variantIndexMap = new Map<Variant, number>();\n\t\tfor (const variant of variants) {\n\t\t\tvariantIndexMap.set(variant, variantDefs.length);\n\t\t\tvariantDefs.push(context.createPropertyDef(variant));\n\t\t}\n\n\t\t// For each mesh primitive, write its material/variant mappings.\n\t\tfor (const mesh of this.document.getRoot().listMeshes()) {\n\t\t\tconst meshIndex = context.meshIndexMap.get(mesh)!;\n\n\t\t\tmesh.listPrimitives().forEach((prim, primIndex) => {\n\t\t\t\tconst mappingList = prim.getExtension<MappingList>(NAME);\n\t\t\t\tif (!mappingList) return;\n\n\t\t\t\tconst primDef = context.jsonDoc.json.meshes![meshIndex].primitives[primIndex];\n\n\t\t\t\tconst mappingDefs = mappingList.listMappings().map((mapping) => {\n\t\t\t\t\tconst mappingDef = context.createPropertyDef(mapping) as VariantMappingDef;\n\n\t\t\t\t\tconst material = mapping.getMaterial();\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmappingDef.material = context.materialIndexMap.get(material)!;\n\t\t\t\t\t}\n\n\t\t\t\t\tmappingDef.variants = mapping.listVariants().map((variant) => variantIndexMap.get(variant)!);\n\n\t\t\t\t\treturn mappingDef;\n\t\t\t\t});\n\n\t\t\t\tprimDef.extensions = primDef.extensions || {};\n\t\t\t\tprimDef.extensions[NAME] = { mappings: mappingDefs };\n\t\t\t});\n\t\t}\n\n\t\tjsonDoc.json.extensions = jsonDoc.json.extensions || {};\n\t\tjsonDoc.json.extensions[NAME] = { variants: variantDefs };\n\n\t\treturn this;\n\t}\n}\n","import {\n\tColorUtils,\n\tExtensionProperty,\n\tIProperty,\n\tNullable,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_VOLUME } from '../constants';\n\ninterface IVolume extends IProperty {\n\tthicknessFactor: number;\n\tthicknessTexture: Texture;\n\tthicknessTextureInfo: TextureInfo;\n\tattenuationDistance: number;\n\tattenuationColor: vec3;\n}\n\nconst { G } = TextureChannel;\n\n/**\n * # Volume\n *\n * Defines volume on a PBR {@link Material}. See {@link MaterialsVolume}.\n */\nexport class Volume extends ExtensionProperty<IVolume> {\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VOLUME;\n\tpublic declare extensionName: typeof KHR_MATERIALS_VOLUME;\n\tpublic declare propertyType: 'Volume';\n\tpublic declare parentTypes: [PropertyType.MATERIAL];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_MATERIALS_VOLUME;\n\t\tthis.propertyType = 'Volume';\n\t\tthis.parentTypes = [PropertyType.MATERIAL];\n\t}\n\n\tprotected getDefaults(): Nullable<IVolume> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\tthicknessFactor: 0.0,\n\t\t\tthicknessTexture: null,\n\t\t\tthicknessTextureInfo: new TextureInfo(this.graph, 'thicknessTexture'),\n\t\t\tattenuationDistance: Infinity,\n\t\t\tattenuationColor: [1.0, 1.0, 1.0] as vec3,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Thickness.\n\t */\n\n\t/**\n\t * Thickness of the volume beneath the surface in meters in the local coordinate system of the\n\t * node. If the value is 0 the material is thin-walled. Otherwise the material is a volume\n\t * boundary. The doubleSided property has no effect on volume boundaries.\n\t */\n\tpublic getThicknessFactor(): number {\n\t\treturn this.get('thicknessFactor');\n\t}\n\n\t/**\n\t * Thickness of the volume beneath the surface in meters in the local coordinate system of the\n\t * node. If the value is 0 the material is thin-walled. Otherwise the material is a volume\n\t * boundary. The doubleSided property has no effect on volume boundaries.\n\t */\n\tpublic setThicknessFactor(factor: number): this {\n\t\treturn this.set('thicknessFactor', factor);\n\t}\n\n\t/**\n\t * Texture that defines the thickness, stored in the G channel. This will be multiplied by\n\t * thicknessFactor.\n\t */\n\tpublic getThicknessTexture(): Texture | null {\n\t\treturn this.getRef('thicknessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its thickness texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getThicknessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('thicknessTexture') ? this.getRef('thicknessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Texture that defines the thickness, stored in the G channel. This will be multiplied by\n\t * thicknessFactor.\n\t */\n\tpublic setThicknessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('thicknessTexture', texture, { channels: G });\n\t}\n\n\t/**********************************************************************************************\n\t * Attenuation.\n\t */\n\n\t/**\n\t * Density of the medium given as the average distance in meters that light travels in the\n\t * medium before interacting with a particle.\n\t */\n\tpublic getAttenuationDistance(): number {\n\t\treturn this.get('attenuationDistance');\n\t}\n\n\t/**\n\t * Density of the medium given as the average distance in meters that light travels in the\n\t * medium before interacting with a particle.\n\t */\n\tpublic setAttenuationDistance(distance: number): this {\n\t\treturn this.set('attenuationDistance', distance);\n\t}\n\n\t/**\n\t * Color (linear) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic getAttenuationColor(): vec3 {\n\t\treturn this.get('attenuationColor');\n\t}\n\n\t/**\n\t * Color (linear) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic setAttenuationColor(color: vec3): this {\n\t\treturn this.set('attenuationColor', color);\n\t}\n\n\t/**\n\t * Color (sRGB) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic getAttenuationColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.getAttenuationColor());\n\t}\n\n\t/**\n\t * Color (sRGB) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic setAttenuationColorHex(hex: number): this {\n\t\tconst factor = this.getAttenuationColor().slice() as vec3;\n\t\treturn this.set('attenuationColor', ColorUtils.hexToFactor(hex, factor));\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, MathUtils } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VOLUME } from '../constants';\nimport { Volume } from './volume';\n\nconst NAME = KHR_MATERIALS_VOLUME;\n\ninterface VolumeDef {\n\tthicknessFactor?: number;\n\tthicknessTexture?: GLTF.ITextureInfo;\n\tattenuationDistance?: number;\n\tattenuationColor?: vec3;\n}\n\n/**\n * # MaterialsVolume\n *\n * [KHR_materials_volume](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_volume/)\n * adds refraction, absorption, or scattering to a glTF PBR material already using transmission or\n * translucency.\n *\n * ![Illustration](/media/extensions/khr-materials-volume.png)\n *\n * > _**Figure:** Base color changes the amount of light passing through the volume boundary\n * > (left). The overall color of the object is the same everywhere, as if the object is covered\n * > with a colored, transparent foil. Absorption changes the amount of light traveling through the\n * > volume (right). The overall color depends on the distance the light traveled through it; at\n * > small distances (tail of the dragon) less light is absorbed and the color is brighter than at\n * > large distances. Source: Khronos Group._\n *\n * By default, a glTF 2.0 material describes the scattering properties of a surface enclosing an\n * infinitely thin volume. The surface defined by the mesh represents a thin wall. The volume\n * extension makes it possible to turn the surface into an interface between volumes. The mesh to\n * which the material is attached defines the boundaries of an homogeneous medium and therefore must\n * be manifold. Volumes provide effects like refraction, absorption and scattering. Scattering\n * effects will require future (TBD) extensions.\n *\n * The volume extension must be combined with {@link MaterialsTransmission} or\n * `KHR_materials_translucency` in order to define entry of light into the volume.\n *\n * Properties:\n * - {@link Volume}\n *\n * ### Example\n *\n * The `MaterialsVolume` class provides a single {@link ExtensionProperty} type, `Volume`, which\n * may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsVolume, Volume } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const volumeExtension = document.createExtension(MaterialsVolume);\n *\n * // Create a Volume property.\n * const volume = volumeExtension.createVolume()\n * \t.setThicknessFactor(1.0)\n * \t.setThicknessTexture(texture)\n * \t.setAttenuationDistance(1.0)\n * \t.setAttenuationColorHex(0xFFEEEE);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_volume', volume);\n * ```\n *\n * A thickness texture is required in most realtime renderers, and can be baked in software such as\n * Blender or Substance Painter. When `thicknessFactor = 0`, all volumetric effects are disabled.\n */\nexport class MaterialsVolume extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Volume property for use on a {@link Material}. */\n\tpublic createVolume(): Volume {\n\t\treturn new Volume(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst volume = this.createVolume();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, volume);\n\n\t\t\t\tconst volumeDef = materialDef.extensions[NAME] as VolumeDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (volumeDef.thicknessFactor !== undefined) {\n\t\t\t\t\tvolume.setThicknessFactor(volumeDef.thicknessFactor);\n\t\t\t\t}\n\t\t\t\tif (volumeDef.attenuationDistance !== undefined) {\n\t\t\t\t\tvolume.setAttenuationDistance(volumeDef.attenuationDistance);\n\t\t\t\t}\n\t\t\t\tif (volumeDef.attenuationColor !== undefined) {\n\t\t\t\t\tvolume.setAttenuationColor(volumeDef.attenuationColor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (volumeDef.thicknessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = volumeDef.thicknessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tvolume.setThicknessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(volume.getThicknessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst volume = material.getExtension<Volume>(NAME);\n\t\t\t\tif (volume) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst volumeDef = (materialDef.extensions[NAME] = {} as VolumeDef);\n\n\t\t\t\t\tif (volume.getThicknessFactor() > 0) {\n\t\t\t\t\t\tvolumeDef.thicknessFactor = volume.getThicknessFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (Number.isFinite(volume.getAttenuationDistance())) {\n\t\t\t\t\t\tvolumeDef.attenuationDistance = volume.getAttenuationDistance();\n\t\t\t\t\t}\n\t\t\t\t\tif (!MathUtils.eq(volume.getAttenuationColor(), [1, 1, 1])) {\n\t\t\t\t\t\tvolumeDef.attenuationColor = volume.getAttenuationColor();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (volume.getThicknessTexture()) {\n\t\t\t\t\t\tconst texture = volume.getThicknessTexture()!;\n\t\t\t\t\t\tconst textureInfo = volume.getThicknessTextureInfo()!;\n\t\t\t\t\t\tvolumeDef.thicknessTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MESH_QUANTIZATION } from '../constants';\n\nconst NAME = KHR_MESH_QUANTIZATION;\n\n/**\n * # MeshQuantization\n *\n * [`KHR_mesh_quantization`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_mesh_quantization/)\n * expands allowed component types for vertex attributes to include 16- and 8-bit storage.\n *\n * Quantization provides a memory/precision tradeoff — depending on the application needs, 16-bit or\n * 8-bit storage can be sufficient for mesh geometry, at 1/2 or 1/4 the size. For example, a 10x10\n * mesh might be written to a uint16 {@link Accessor}, with values `0–65536`, normalized to be\n * interpreted as `0–1`. With an additional 10x scale on any node {@link Node} instantiating the\n * quantized {@link Mesh}, the model retains its original scale with a minimal quality loss and\n * up to 50% file size reduction.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing more flexible use of\n * {@link Accessor} types for vertex attributes. Without the Extension, the same use of these data\n * types would yield an invalid glTF document, under the stricter core glTF specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { MeshQuantization } from '@gltf-transform/extensions';\n * import { quantize } from '@gltf-transform/functions';\n *\n * // Create an Extension attached to the Document.\n * const quantizationExtension = document.createExtension(MeshQuantization).setRequired(true);\n *\n * // Use Uint16Array, Uint8Array, Int16Array, and Int8Array in vertex accessors manually,\n * // or apply the provided quantize() function to compute quantized accessors automatically:\n * await document.transform(quantize({\n * \tquantizePosition: 16,\n * \tquantizeNormal: 12,\n * \tquantizeTexcoord: 14\n * }));\n * ```\n *\n * For more documentation about automatic quantization, see the {@link quantize} function.\n */\nexport class MeshQuantization extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tread(_: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\twrite(_: WriterContext): this {\n\t\treturn this;\n\t}\n}\n","import { KTX2Model, read as readKTX } from 'ktx-parse';\nimport {\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n} from '@gltf-transform/core';\nimport { KHR_TEXTURE_BASISU } from '../constants';\n\nconst NAME = KHR_TEXTURE_BASISU;\n\ninterface BasisuDef {\n\tsource: number;\n}\n\nclass KTX2ImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn (\n\t\t\tarray[0] === 0xab &&\n\t\t\tarray[1] === 0x4b &&\n\t\t\tarray[2] === 0x54 &&\n\t\t\tarray[3] === 0x58 &&\n\t\t\tarray[4] === 0x20 &&\n\t\t\tarray[5] === 0x32 &&\n\t\t\tarray[6] === 0x30 &&\n\t\t\tarray[7] === 0xbb &&\n\t\t\tarray[8] === 0x0d &&\n\t\t\tarray[9] === 0x0a &&\n\t\t\tarray[10] === 0x1a &&\n\t\t\tarray[11] === 0x0a\n\t\t);\n\t}\n\tgetSize(array: Uint8Array): vec2 {\n\t\tconst container = readKTX(array);\n\t\treturn [container.pixelWidth, container.pixelHeight];\n\t}\n\tgetChannels(array: Uint8Array): number {\n\t\tconst container = readKTX(array);\n\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\tif (dfd.colorModel === KTX2Model.ETC1S) {\n\t\t\treturn dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === 15 ? 4 : 3;\n\t\t} else if (dfd.colorModel === KTX2Model.UASTC) {\n\t\t\treturn (dfd.samples[0].channelID & 0xf) === 3 ? 4 : 3;\n\t\t}\n\t\tthrow new Error(`Unexpected KTX2 colorModel, \"${dfd.colorModel}\".`);\n\t}\n\tgetGPUByteLength(array: Uint8Array): number {\n\t\tconst container = readKTX(array);\n\t\tconst hasAlpha = this.getChannels(array) > 3;\n\n\t\tlet uncompressedBytes = 0;\n\t\tfor (let i = 0; i < container.levels.length; i++) {\n\t\t\tconst level = container.levels[i];\n\n\t\t\t// Use level.uncompressedByteLength for UASTC; for ETC1S it's 0.\n\t\t\tif (level.uncompressedByteLength) {\n\t\t\t\tuncompressedBytes += level.uncompressedByteLength;\n\t\t\t} else {\n\t\t\t\tconst levelWidth = Math.max(1, Math.floor(container.pixelWidth / Math.pow(2, i)));\n\t\t\t\tconst levelHeight = Math.max(1, Math.floor(container.pixelHeight / Math.pow(2, i)));\n\t\t\t\tconst blockSize = hasAlpha ? 16 : 8;\n\t\t\t\tuncompressedBytes += (levelWidth / 4) * (levelHeight / 4) * blockSize;\n\t\t\t}\n\t\t}\n\n\t\treturn uncompressedBytes;\n\t}\n}\n\n/**\n * # TextureBasisu\n *\n * [`KHR_texture_basisu`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu)\n * enables KTX2 GPU textures with Basis Universal supercompression for any material texture.\n *\n * GPU texture formats, unlike traditional image formats, remain compressed in GPU memory. As a\n * result, they (1) upload to the GPU much more quickly, and (2) require much less GPU memory. In\n * certain cases they may also have smaller filesizes than PNG or JPEG textures, but this is not\n * guaranteed. GPU textures often require more careful tuning during compression to maintain image\n * quality, but this extra effort is worthwhile for applications that need to maintain a smooth\n * framerate while uploading images, or where GPU memory is limited.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/ktx2` MIME type\n * and passing KTX2 image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { TextureBasisu } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const basisuExtension = document.createExtension(TextureBasisu)\n * \t.setRequired(true);\n * document.createTexture('MyCompressedTexture')\n * \t.setMimeType('image/ktx2')\n * \t.setImage(fs.readFileSync('my-texture.ktx2'));\n * ```\n *\n * Compression is not done automatically when adding the extension as shown above — you must\n * compress the image data first, then pass the `.ktx2` payload to {@link Texture.setImage}. The\n * [glTF-Transform CLI](/cli.html) has functions to help with this, or any similar KTX2-capable\n * utility will work.\n *\n * When the `KHR_texture_basisu` extension is added to a file by glTF-Transform, the extension\n * should always be required. This tool does not support writing assets that \"fall back\" to optional\n * PNG or JPEG image data.\n *\n * > _**NOTICE:** Compressing some textures — particularly 3-component (RGB) normal maps, and\n * > occlusion/roughness/metalness maps, may give poor results with the ETC1S compression option.\n * > These issues can often be avoided with the larger UASTC compression option, or by upscaling the\n * > texture before compressing it.\n * >\n * > For best results when authoring new textures, use\n * > [texture dilation](https://docs.substance3d.com/spdoc/padding-134643719.html) and minimize\n * > prominent UV seams._\n */\nexport class TextureBasisu extends Extension {\n\tpublic readonly extensionName = NAME;\n\t/** @hidden */\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** @hidden */\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/ktx2', new KTX2ImageUtils());\n\t}\n\n\t/** @hidden */\n\tpublic preread(context: ReaderContext): this {\n\t\tcontext.jsonDoc.json.textures!.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\tconst basisuDef = textureDef.extensions[NAME] as BasisuDef;\n\t\t\t\ttextureDef.source = basisuDef.source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.document\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tjsonDoc.json.textures!.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty, IProperty, Nullable, vec2 } from '@gltf-transform/core';\nimport { PropertyType } from '@gltf-transform/core';\nimport { KHR_TEXTURE_TRANSFORM } from '../constants';\n\ninterface ITransform extends IProperty {\n\toffset: vec2;\n\trotation: number;\n\tscale: vec2;\n\ttexCoord: number | null; // null → do not override TextureInfo.\n}\n\n/**\n * # Transform\n *\n * Defines UV transform for a {@link TextureInfo}. See {@link TextureTransform}.\n */\nexport class Transform extends ExtensionProperty<ITransform> {\n\tpublic static EXTENSION_NAME = KHR_TEXTURE_TRANSFORM;\n\tpublic declare extensionName: typeof KHR_TEXTURE_TRANSFORM;\n\tpublic declare propertyType: 'Transform';\n\tpublic declare parentTypes: [PropertyType.TEXTURE_INFO];\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_TEXTURE_TRANSFORM;\n\t\tthis.propertyType = 'Transform';\n\t\tthis.parentTypes = [PropertyType.TEXTURE_INFO];\n\t}\n\n\tprotected getDefaults(): Nullable<ITransform> {\n\t\treturn Object.assign(super.getDefaults() as IProperty, {\n\t\t\toffset: [0.0, 0.0] as vec2,\n\t\t\trotation: 0,\n\t\t\tscale: [1.0, 1.0] as vec2,\n\t\t\ttexCoord: null,\n\t\t});\n\t}\n\n\tpublic getOffset(): vec2 {\n\t\treturn this.get('offset');\n\t}\n\tpublic setOffset(offset: vec2): this {\n\t\treturn this.set('offset', offset);\n\t}\n\n\tpublic getRotation(): number {\n\t\treturn this.get('rotation');\n\t}\n\tpublic setRotation(rotation: number): this {\n\t\treturn this.set('rotation', rotation);\n\t}\n\n\tpublic getScale(): vec2 {\n\t\treturn this.get('scale');\n\t}\n\tpublic setScale(scale: vec2): this {\n\t\treturn this.set('scale', scale);\n\t}\n\n\tpublic getTexCoord(): number | null {\n\t\treturn this.get('texCoord');\n\t}\n\tpublic setTexCoord(texCoord: number | null): this {\n\t\treturn this.set('texCoord', texCoord);\n\t}\n}\n","import { Extension, MathUtils, ReaderContext, WriterContext, vec2 } from '@gltf-transform/core';\nimport { KHR_TEXTURE_TRANSFORM } from '../constants';\nimport { Transform } from './transform';\n\nconst NAME = KHR_TEXTURE_TRANSFORM;\n\ninterface TransformDef {\n\toffset?: vec2;\n\trotation?: number;\n\tscale?: vec2;\n\ttexCoord?: number;\n}\n\n/**\n * # TextureTransform\n *\n * [`KHR_texture_transform`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/)\n * adds offset, rotation, and scale to {@link TextureInfo} properties.\n *\n * Affine UV transforms are useful for reducing the number of textures the GPU must load, improving\n * performance when used in techniques like texture atlases. UV transforms cannot be animated at\n * this time.\n *\n * Properties:\n * - {@link Transform}\n *\n * ### Example\n *\n * The `TextureTransform` class provides a single {@link ExtensionProperty} type, `Transform`, which\n * may be attached to any {@link TextureInfo} instance. For example:\n *\n * ```typescript\n * import { TextureTransform } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const transformExtension = document.createExtension(TextureTransform)\n * \t.setRequired(true);\n *\n * // Create a reusable Transform.\n * const transform = transformExtension.createTransform()\n * \t.setScale([100, 100]);\n *\n * // Apply the Transform to a Material's baseColorTexture.\n * document.createMaterial()\n * \t.setBaseColorTexture(myTexture)\n * \t.getBaseColorTextureInfo()\n * \t.setExtension('KHR_texture_transform', transform);\n * ```\n */\nexport class TextureTransform extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new Transform property for use on a {@link TextureInfo}. */\n\tpublic createTransform(): Transform {\n\t\treturn new Transform(this.document.getGraph());\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tfor (const [textureInfo, textureInfoDef] of Array.from(context.textureInfos.entries())) {\n\t\t\tif (!textureInfoDef.extensions || !textureInfoDef.extensions[NAME]) continue;\n\n\t\t\tconst transform = this.createTransform();\n\t\t\tconst transformDef = textureInfoDef.extensions[NAME] as TransformDef;\n\n\t\t\tif (transformDef.offset !== undefined) transform.setOffset(transformDef.offset);\n\t\t\tif (transformDef.rotation !== undefined) transform.setRotation(transformDef.rotation);\n\t\t\tif (transformDef.scale !== undefined) transform.setScale(transformDef.scale);\n\t\t\tif (transformDef.texCoord !== undefined) transform.setTexCoord(transformDef.texCoord);\n\n\t\t\ttextureInfo.setExtension(NAME, transform);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst textureInfoEntries = Array.from(context.textureInfoDefMap.entries());\n\t\tfor (const [textureInfo, textureInfoDef] of textureInfoEntries) {\n\t\t\tconst transform = textureInfo.getExtension<Transform>(NAME);\n\t\t\tif (!transform) continue;\n\n\t\t\ttextureInfoDef.extensions = textureInfoDef.extensions || {};\n\t\t\tconst transformDef = {} as TransformDef;\n\n\t\t\tconst eq = MathUtils.eq;\n\t\t\tif (!eq(transform.getOffset(), [0, 0])) transformDef.offset = transform.getOffset();\n\t\t\tif (transform.getRotation() !== 0) transformDef.rotation = transform.getRotation();\n\t\t\tif (!eq(transform.getScale(), [1, 1])) transformDef.scale = transform.getScale();\n\t\t\tif (transform.getTexCoord() != null) transformDef.texCoord = transform.getTexCoord()!;\n\n\t\t\ttextureInfoDef.extensions[NAME] = transformDef;\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { Nullable, PropertyType, ExtensionProperty, IProperty } from '@gltf-transform/core';\nimport { KHR_XMP_JSON_LD } from '../constants';\n\ntype Term = string;\ntype TermDefinition = string | Record<string, string>;\n\ntype Value = string | number | boolean;\n\nconst PARENT_TYPES = [\n\tPropertyType.ROOT,\n\tPropertyType.SCENE,\n\tPropertyType.NODE,\n\tPropertyType.MESH,\n\tPropertyType.MATERIAL,\n\tPropertyType.TEXTURE,\n\tPropertyType.ANIMATION,\n];\n\ninterface IPacket extends IProperty {\n\t// https://json-ld.org/spec/latest/json-ld/#the-context\n\tcontext: Record<Term, TermDefinition>;\n\tproperties: Record<string, Value | Record<string, unknown>>;\n}\n\n/**\n * # Packet\n *\n * Defines an XMP packet associated with a Document or Property. See {@link XMP}.\n */\nexport class Packet extends ExtensionProperty<IPacket> {\n\tpublic declare propertyType: 'Packet';\n\tpublic declare parentTypes: typeof PARENT_TYPES;\n\tpublic declare extensionName: typeof KHR_XMP_JSON_LD;\n\tpublic static EXTENSION_NAME = KHR_XMP_JSON_LD;\n\n\tprotected init(): void {\n\t\tthis.extensionName = KHR_XMP_JSON_LD;\n\t\tthis.propertyType = 'Packet';\n\t\tthis.parentTypes = PARENT_TYPES;\n\t}\n\n\tprotected getDefaults(): Nullable<IPacket> {\n\t\treturn Object.assign(super.getDefaults(), { context: {}, properties: {} });\n\t}\n\n\t/**********************************************************************************************\n\t * Context.\n\t */\n\n\t/**\n\t * Returns the XMP context definition URL for the given term.\n\t * See: https://json-ld.org/spec/latest/json-ld/#the-context\n\t * @param term Case-sensitive term. Usually a concise, lowercase, alphanumeric identifier.\n\t */\n\tpublic getContext(): Record<Term, TermDefinition> {\n\t\treturn this.get('context');\n\t}\n\n\t/**\n\t * Sets the XMP context definition URL for the given term.\n\t * See: https://json-ld.org/spec/latest/json-ld/#the-context\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.setContext({\n\t *   dc: 'http://purl.org/dc/elements/1.1/',\n\t *   model3d: 'https://schema.khronos.org/model3d/xsd/1.0/',\n\t * });\n\t * ```\n\t *\n\t * @param term Case-sensitive term. Usually a concise, lowercase, alphanumeric identifier.\n\t * @param definition URI for XMP namespace.\n\t */\n\tpublic setContext(context: Record<Term, TermDefinition>): this {\n\t\treturn this.set('context', { ...context });\n\t}\n\n\t/**********************************************************************************************\n\t * Properties.\n\t */\n\n\t/**\n\t * Lists properties defined in this packet.\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.listProperties(); // → ['dc:Language', 'dc:Creator', 'xmp:CreateDate']\n\t * ```\n\t */\n\tpublic listProperties(): string[] {\n\t\treturn Object.keys(this.get('properties'));\n\t}\n\n\t/**\n\t * Returns the value of a property, as a literal or JSONLD object.\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.getProperty('dc:Creator'); // → {\"@list\": [\"Acme, Inc.\"]}\n\t * packet.getProperty('dc:Title'); // → {\"@type\": \"rdf:Alt\", \"rdf:_1\": {\"@language\": \"en-US\", \"@value\": \"Lamp\"}}\n\t * packet.getProperty('xmp:CreateDate'); // → \"2022-01-01\"\n\t * ```\n\t */\n\tpublic getProperty(name: string): Value | Record<string, unknown> | null {\n\t\tconst properties = this.get('properties');\n\t\treturn name in properties ? properties[name] : null;\n\t}\n\n\t/**\n\t * Sets the value of a property, as a literal or JSONLD object.\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * packet.setProperty('dc:Creator', {'@list': ['Acme, Inc.']});\n\t * packet.setProperty('dc:Title', {\n\t * \t'@type': 'rdf:Alt',\n\t * \t'rdf:_1': {'@language': 'en-US', '@value': 'Lamp'}\n\t * });\n\t * packet.setProperty('model3d:preferredSurfaces', {'@list': ['vertical']});\n\t * ```\n\t */\n\tpublic setProperty(name: string, value: Value | Record<string, unknown>): this {\n\t\tthis._assertContext(name);\n\n\t\tconst properties = { ...this.get('properties') };\n\t\tif (value) {\n\t\t\tproperties[name] = value;\n\t\t} else {\n\t\t\tdelete properties[name];\n\t\t}\n\t\treturn this.set('properties', properties);\n\t}\n\n\t/**********************************************************************************************\n\t * Serialize / Deserialize.\n\t */\n\n\t/**\n\t * Serializes the packet context and properties to a JSONLD object.\n\t */\n\tpublic toJSONLD(): Record<string, unknown> {\n\t\tconst context = copyJSON(this.get('context'));\n\t\tconst properties = copyJSON(this.get('properties'));\n\t\treturn { '@context': context, ...properties };\n\t}\n\n\t/**\n\t * Deserializes a JSONLD packet, then overwrites existing context and properties with\n\t * the new values.\n\t */\n\tpublic fromJSONLD(jsonld: Record<string, unknown>): this {\n\t\tjsonld = copyJSON(jsonld);\n\n\t\t// Context.\n\t\tconst context = jsonld['@context'] as Record<Term, TermDefinition>;\n\t\tif (context) this.set('context', context);\n\t\tdelete jsonld['@context'];\n\n\t\t// Properties.\n\t\treturn this.set('properties', jsonld as Record<string, string | Record<string, unknown>>);\n\t}\n\n\t/**********************************************************************************************\n\t * Validation.\n\t */\n\n\t/** @hidden */\n\tprivate _assertContext(name: string) {\n\t\tconst prefix = name.split(':')[0];\n\t\tif (!(prefix in this.get('context'))) {\n\t\t\tthrow new Error(`${KHR_XMP_JSON_LD}: Missing context for term, \"${name}\".`);\n\t\t}\n\t}\n}\n\nfunction copyJSON<T>(object: T): T {\n\treturn JSON.parse(JSON.stringify(object));\n}\n","import {\n\tAnimation,\n\tExtension,\n\tGLTF,\n\tMaterial,\n\tMesh,\n\tNode,\n\tPropertyType,\n\tReaderContext,\n\tScene,\n\tTexture,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport { KHR_XMP_JSON_LD } from '../constants';\nimport { Packet } from './packet';\n\nconst NAME = KHR_XMP_JSON_LD;\n\ntype XMPPacketDef = Record<string, unknown>;\n\ntype XMPParentDef =\n\t| GLTF.IAsset\n\t| GLTF.IScene\n\t| GLTF.INode\n\t| GLTF.IMesh\n\t| GLTF.IMaterial\n\t| GLTF.ITexture\n\t| GLTF.IAnimation;\n\ninterface XMPPropertyDef {\n\tpacket: number;\n}\n\ninterface XMPRootDef {\n\tpackets?: XMPPacketDef[];\n}\n\n/**\n * # XMP\n *\n * [KHR_xmp_json_ld](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_xmp_json_ld/)\n * defines XMP metadata associated with a glTF asset.\n *\n * XMP metadata provides standardized fields describing the content, provenance, usage\n * restrictions, or other attributes of a 3D model. XMP metadata does not generally affect the\n * parsing or runtime behavior of the content — for that, use custom extensions, custom vertex\n * attributes, or extras. Similarly, storage mechanisms other than XMP should be preferred\n * for binary content like mesh data, animations, or textures.\n *\n * Generally XMP metadata is associated with the entire glTF asset by attaching an XMP {@link Packet}\n * to the document {@link Root}. In less common cases where metadata must be associated with\n * specific subsets of a document, XMP Packets may be attached to {@link Scene}, {@link Node},\n * {@link Mesh}, {@link Material}, {@link Texture}, or {@link Animation} properties.\n *\n * Within each packet, XMP properties become available when an\n * [XMP namespace](https://www.adobe.io/xmp/docs/XMPNamespaces/) is registered\n * with {@link Packet.setContext}. Packets cannot use properties whose namespaces are not\n * registered as context. While not all XMP namespaces are relevant to 3D assets, some common\n * namespaces provide useful metadata about authorship and provenance. Additionally, the `model3d`\n * namespace provides certain properties specific to 3D content, such as Augmented Reality (AR)\n * orientation data.\n *\n * Common XMP contexts for 3D models include:\n *\n * | Prefix      | URI                                         | Name                           |\n * |:------------|:--------------------------------------------|:-------------------------------|\n * | `dc`        | http://purl.org/dc/elements/1.1/            | Dublin Core                    |\n * | `model3d`   | https://schema.khronos.org/model3d/xsd/1.0/ | Model 3D                       |\n * | `rdf`       | http://www.w3.org/1999/02/22-rdf-syntax-ns# | Resource Description Framework |\n * | `xmp`       | http://ns.adobe.com/xap/1.0/                | XMP                            |\n * | `xmpRights` | http://ns.adobe.com/xap/1.0/rights/         | XMP Rights Management          |\n *\n * Only the XMP contexts required for a packet should be assigned, and different packets\n * in the same asset may use different contexts.\n *\n * Properties:\n * - {@link Packet}\n *\n * ### Example\n *\n * ```typescript\n * import { XMP, Packet } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const xmpExtension = document.createExtension(XMP);\n *\n * // Create Packet property.\n * const packet = xmpExtension.createPacket()\n * \t.setContext({\n * \t\tdc: 'http://purl.org/dc/elements/1.1/',\n * \t})\n *\t.setProperty('dc:Creator', {\"@list\": [\"Acme, Inc.\"]});\n *\n * // Option 1: Assign to Document Root.\n * document.getRoot().setExtension('KHR_xmp_json_ld', packet);\n *\n * // Option 2: Assign to a specific Property.\n * texture.setExtension('KHR_xmp_json_ld', packet);\n * ```\n */\nexport class XMP extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\t/** Creates a new XMP packet, to be linked with a {@link Document} or {@link Property Properties}. */\n\tpublic createPacket(): Packet {\n\t\treturn new Packet(this.document.getGraph());\n\t}\n\n\t/** Lists XMP packets currently defined in a {@link Document}. */\n\tpublic listPackets(): Packet[] {\n\t\treturn Array.from(this.properties) as Packet[];\n\t}\n\n\t/** @hidden */\n\tpublic read(context: ReaderContext): this {\n\t\tconst extensionDef = context.jsonDoc.json.extensions?.[NAME] as XMPRootDef | undefined;\n\t\tif (!extensionDef || !extensionDef.packets) return this;\n\n\t\t// Deserialize packets.\n\t\tconst json = context.jsonDoc.json;\n\t\tconst root = this.document.getRoot();\n\t\tconst packets = extensionDef.packets.map((packetDef) => this.createPacket().fromJSONLD(packetDef));\n\n\t\tconst defLists = [\n\t\t\t[json.asset],\n\t\t\tjson.scenes,\n\t\t\tjson.nodes,\n\t\t\tjson.meshes,\n\t\t\tjson.materials,\n\t\t\tjson.images,\n\t\t\tjson.animations,\n\t\t];\n\n\t\tconst propertyLists = [\n\t\t\t[root],\n\t\t\troot.listScenes(),\n\t\t\troot.listNodes(),\n\t\t\troot.listMeshes(),\n\t\t\troot.listMaterials(),\n\t\t\troot.listTextures(),\n\t\t\troot.listAnimations(),\n\t\t];\n\n\t\t// Assign packets.\n\t\tfor (let i = 0; i < defLists.length; i++) {\n\t\t\tconst defs = defLists[i] || [];\n\t\t\tfor (let j = 0; j < defs.length; j++) {\n\t\t\t\tconst def = defs[j];\n\t\t\t\tif (def.extensions && def.extensions[NAME]) {\n\t\t\t\t\tconst xmpDef = def.extensions[NAME] as XMPPropertyDef;\n\t\t\t\t\tpropertyLists[i][j].setExtension(NAME, packets[xmpDef.packet]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tpublic write(context: WriterContext): this {\n\t\tconst { json } = context.jsonDoc;\n\n\t\tconst packetDefs = [];\n\n\t\tfor (const packet of this.properties as Set<Packet>) {\n\t\t\t// Serialize packets.\n\t\t\tpacketDefs.push(packet.toJSONLD());\n\n\t\t\t// Assign packets.\n\n\t\t\tfor (const parent of packet.listParents()) {\n\t\t\t\tlet parentDef: XMPParentDef | null;\n\n\t\t\t\tswitch (parent.propertyType) {\n\t\t\t\t\tcase PropertyType.ROOT:\n\t\t\t\t\t\tparentDef = json.asset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.SCENE:\n\t\t\t\t\t\tparentDef = json.scenes![context.sceneIndexMap.get(parent as Scene)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.NODE:\n\t\t\t\t\t\tparentDef = json.nodes![context.nodeIndexMap.get(parent as Node)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.MESH:\n\t\t\t\t\t\tparentDef = json.meshes![context.meshIndexMap.get(parent as Mesh)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.MATERIAL:\n\t\t\t\t\t\tparentDef = json.materials![context.materialIndexMap.get(parent as Material)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.TEXTURE:\n\t\t\t\t\t\tparentDef = json.images![context.imageIndexMap.get(parent as Texture)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PropertyType.ANIMATION:\n\t\t\t\t\t\tparentDef = json.animations![context.animationIndexMap.get(parent as Animation)!];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tparentDef = null;\n\t\t\t\t\t\tthis.document\n\t\t\t\t\t\t\t.getLogger()\n\t\t\t\t\t\t\t.warn(`[${NAME}]: Unsupported parent property, \"${parent.propertyType}\"`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!parentDef) continue;\n\n\t\t\t\tparentDef.extensions = parentDef.extensions || {};\n\t\t\t\tparentDef.extensions[NAME] = { packet: packetDefs.length - 1 };\n\t\t\t}\n\t\t}\n\n\t\tif (packetDefs.length > 0) {\n\t\t\tjson.extensions = json.extensions || {};\n\t\t\tjson.extensions[NAME] = { packets: packetDefs };\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","/** @module extensions */\n\nimport { MeshGPUInstancing } from './ext-mesh-gpu-instancing';\nimport { MeshoptCompression } from './ext-meshopt-compression';\nimport { TextureWebP } from './ext-texture-webp';\nimport { DracoMeshCompression } from './khr-draco-mesh-compression';\nimport { LightsPunctual } from './khr-lights-punctual';\nimport { MaterialsClearcoat } from './khr-materials-clearcoat';\nimport { MaterialsEmissiveStrength } from './khr-materials-emissive-strength';\nimport { MaterialsIOR } from './khr-materials-ior';\nimport { MaterialsPBRSpecularGlossiness } from './khr-materials-pbr-specular-glossiness';\nimport { MaterialsSheen } from './khr-materials-sheen';\nimport { MaterialsSpecular } from './khr-materials-specular';\nimport { MaterialsTransmission } from './khr-materials-transmission';\nimport { MaterialsUnlit } from './khr-materials-unlit';\nimport { MaterialsVariants } from './khr-materials-variants';\nimport { MaterialsVolume } from './khr-materials-volume';\nimport { MeshQuantization } from './khr-mesh-quantization';\nimport { TextureBasisu } from './khr-texture-basisu';\nimport { TextureTransform } from './khr-texture-transform';\nimport { XMP } from './khr-xmp-json-ld';\n\nexport const KHRONOS_EXTENSIONS = [\n\tDracoMeshCompression,\n\tLightsPunctual,\n\tMaterialsClearcoat,\n\tMaterialsEmissiveStrength,\n\tMaterialsIOR,\n\tMaterialsPBRSpecularGlossiness,\n\tMaterialsSpecular,\n\tMaterialsSheen,\n\tMaterialsTransmission,\n\tMaterialsUnlit,\n\tMaterialsVariants,\n\tMaterialsVolume,\n\tMeshQuantization,\n\tTextureBasisu,\n\tTextureTransform,\n\tXMP,\n];\n\nexport const ALL_EXTENSIONS = [MeshGPUInstancing, MeshoptCompression, TextureWebP, ...KHRONOS_EXTENSIONS];\n\nexport * from './ext-mesh-gpu-instancing';\nexport * from './ext-meshopt-compression';\nexport * from './ext-texture-webp';\nexport * from './khr-draco-mesh-compression';\nexport * from './khr-lights-punctual';\nexport * from './khr-materials-clearcoat';\nexport * from './khr-materials-emissive-strength';\nexport * from './khr-materials-ior';\nexport * from './khr-materials-sheen';\nexport * from './khr-materials-specular';\nexport * from './khr-materials-pbr-specular-glossiness';\nexport * from './khr-materials-transmission';\nexport * from './khr-materials-unlit';\nexport * from './khr-materials-variants';\nexport * from './khr-materials-volume';\nexport * from './khr-mesh-quantization';\nexport * from './khr-texture-basisu';\nexport * from './khr-texture-transform';\nexport * from './khr-xmp-json-ld';\n",null,"///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xAB, 0x4B, 0x54, 0x58, 0x20, 0x32, 0x30, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport const KHR_DF_VENDORID_KHRONOS = 0;\nexport const KHR_DF_VERSION = 2;\nexport const KHR_DF_BLOCKSIZE = 40;\nexport const VK_FORMAT_UNDEFINED = 0;\n","/**\n * Enums.\n */\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport enum KTX2SupercompressionScheme {\n\tNONE = 0,\n\tBASISLZ = 1,\n\tZSTD = 2,\n\tZLIB = 3,\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport enum KTX2DescriptorType {\n\tBASICFORMAT = 0x00,\n};\n\nexport enum KTX2Model {\n\tUNSPECIFIED = 0,\n\tETC1S = 163,\n\tUASTC = 166,\n};\n\nexport enum KTX2Primaries {\n\tUNSPECIFIED = 0,\n\tSRGB = 1,\n};\n\nexport enum KTX2Transfer {\n\tUNSPECIFIED = 0,\n\tLINEAR = 1,\n\tSRGB = 2,\n\tITU = 3,\n\tNTSC = 4,\n\tSLOG = 5,\n\tSLOG2 = 6,\n};\n\nexport enum KTX2Flags {\n\tALPHA_STRAIGHT = 0,\n\tALPHA_PREMULTIPLIED = 1,\n};\n\nexport enum KTX2ChannelETC1S {\n\tRGB = 0,\n\tRRR = 3,\n\tGGG = 4,\n\tAAA = 15,\n};\n\nexport enum KTX2ChannelUASTC {\n\tRGB = 0,\n\tRGBA = 3,\n\tRRR = 4,\n\tRRRG = 5,\n};\n","import { KHR_DF_BLOCKSIZE, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, VK_FORMAT_UNDEFINED } from './constants';\nimport { KTX2DescriptorType, KTX2Flags, KTX2Model, KTX2Primaries, KTX2SupercompressionScheme } from './enums';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize: number = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth: number = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight: number = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth: number = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount: number = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount: number = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KTX2SupercompressionScheme.NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [{\n\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\tdescriptorType: KTX2DescriptorType.BASICFORMAT,\n\t\tversionNumber: KHR_DF_VERSION,\n\t\tdescriptorBlockSize: KHR_DF_BLOCKSIZE,\n\t\tcolorModel: KTX2Model.UNSPECIFIED,\n\t\tcolorPrimaries: KTX2Primaries.SRGB,\n\t\ttransferFunction: KTX2Primaries.SRGB,\n\t\tflags: KTX2Flags.ALPHA_STRAIGHT,\n\t\ttexelBlockDimension: {x: 4, y: 4, z: 1, w: 1},\n\t\tbytesPlane: [],\n\t\tsamples: [],\n\t}];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: {[key: string]: string | Uint8Array} = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: KTX2BasicFormatTexelBlockDimensions;\n\tbytesPlane: number[];\n\tsamples: KTX2BasicFormatSample[],\n};\n\nexport interface KTX2BasicFormatTexelBlockDimensions {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n};\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\tchannelID: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n};\n\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n};\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n};\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + (2 ** 32 * right);\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(\n\t\t\tthis._dataView.buffer,\n\t\t\tthis._dataView.byteOffset + byteOffset,\n\t\t\tbyteLength\n\t\t);\n\t}\n}\n","\n/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat (buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}","import { BufferReader } from './buffer-reader';\nimport { KTX2_ID } from './constants';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (id[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: {\n\t\t\tx: dfdReader._nextUint8() + 1,\n\t\t\ty: dfdReader._nextUint8() + 1,\n\t\t\tz: dfdReader._nextUint8() + 1,\n\t\t\tw: dfdReader._nextUint8() + 1,\n\t\t},\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i ++) {\n\t\tdfd.samples[ i ] = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelID: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: dfdReader._nextUint32(),\n\t\t\tsampleUpper: dfdReader._nextUint32(),\n\t\t};\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2_ID, KTX_WRITER, NUL } from './constants';\nimport { KTX2Container } from './container';\nimport { KTX2DescriptorType } from './enums';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {keepWriter?: boolean};\nconst DEFAULT_OPTIONS: WriteOptions = {keepWriter: false};\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = {...DEFAULT_OPTIONS, ...options};\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = {...container.keyValue, 'KTXwriter': KTX_WRITER};\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? (4 - (kvByteLength % 4)) : 0; // align(4)\n\t\tkeyValueData.push(concat([\n\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\tkeyData,\n\t\t\tNUL,\n\t\t\tvalueData,\n\t\t\tNUL,\n\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t]));\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tif (container.dataFormatDescriptor.length !== 1\n\t\t\t|| container.dataFormatDescriptor[0].descriptorType !== KTX2DescriptorType.BASICFORMAT) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tconst dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n\tconst dfdView = new DataView(dfdBuffer);\n\n\tdfdView.setUint32(0, dfdBuffer.byteLength, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, dfd.descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension.x - 1);\n\tdfdView.setUint8(17, dfd.texelBlockDimension.y - 1);\n\tdfdView.setUint8(18, dfd.texelBlockDimension.z - 1);\n\tdfdView.setUint8(19, dfd.texelBlockDimension.w - 1);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelID);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = kvdByteOffset + kvdBuffer.byteLength;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = sgdByteOffset + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdByteOffset), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(concat([\n\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\theaderBuffer,\n\t\tlevelIndex.buffer,\n\t\tdfdBuffer,\n\t\tkvdBuffer,\n\t\tnew ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)), // align(8)\n\t\tsgdBuffer,\n\t\t...levelData,\n\t]));\n}\n\n"],"names":["INSTANCE_ATTRIBUTE","InstancedMesh","ExtensionProperty","init","this","extensionName","propertyType","parentTypes","PropertyType","NODE","getDefaults","Object","assign","super","attributes","getAttribute","semantic","getRefMap","setAttribute","accessor","setRefMap","usage","listAttributes","listRefMapValues","listSemantics","listRefMapKeys","EXTENSION_NAME","NAME","MeshGPUInstancing","Extension","provideTypes","prewriteTypes","ACCESSOR","createInstancedMesh","document","getGraph","read","context","jsonDoc","json","nodes","forEach","nodeDef","nodeIndex","extensions","instancedMeshDef","instancedMesh","accessors","setExtension","prewrite","accessorUsageGroupedByParent","add","prop","properties","attribute","addAccessorToUsageGroup","write","getRoot","listNodes","node","getExtension","nodeIndexMap","get","accessorIndexMap","EncoderMethod","MeshoptMode","MeshoptFilter","BYTE","SHORT","FLOAT","Accessor","ComponentType","normalize","denormalize","MathUtils","prepareAccessor","encoder","mode","filterOptions","filter","bits","result","array","getArray","byteStride","getElementSize","getComponentSize","componentType","getComponentType","normalized","getNormalized","ATTRIBUTES","NONE","srcArray","dstArray","Float32Array","length","i","denormalizeArray","EXPONENTIAL","encodeFilterExp","getCount","OCTAHEDRAL","il","padNormals","encodeFilterOct","QUATERNION","encodeFilterQuat","Error","min","getMin","max","getMax","map","v","elementSize","elementStride","BufferUtils","padNumber","BYTES_PER_ELEMENT","constructor","j","padArrayElements","byteLength","getMeshoptMode","WriterContext","BufferViewUsage","ELEMENT_ARRAY_BUFFER","listParents","some","parent","Primitive","getMode","Mode","TRIANGLES","INDICES","getMeshoptFilter","doc","refs","listParentEdges","edge","getParent","Root","ref","refName","getName","refKey","getAttributes","key","startsWith","targetPath","getTargetPath","sampler","AnimationSampler","channel","AnimationChannel","DEFAULT_ENCODER_OPTIONS","method","QUANTIZE","MeshoptCompression","prereadTypes","BUFFER","PRIMITIVE","readDependencies","writeDependencies","_decoder","_decoderFallbackBufferMap","Map","_encoder","_encoderOptions","_encoderFallbackBuffer","_encoderBufferViews","_encoderBufferViewData","_encoderBufferViewAccessors","install","dependency","setEncoderOptions","options","preread","isRequired","supported","_prereadBuffers","_prereadPrimitives","bufferViews","viewDef","index","meshoptDef","byteOffset","count","stride","Uint8Array","bufferDef","buffers","buffer","source","toView","uri","resources","GLB_BUFFER","decodeGltfBuffer","fallback","set","_context","fallbackBuffer","swap","dispose","_prewriteAccessors","_prewriteBuffers","createBuffer","fallbackBufferIndex","listBuffers","indexOf","listAccessors","getAccessorUsage","FILTER","preparedAccessor","getBuffer","bufferIndex","join","bufferView","bufferViewData","bufferViewAccessors","target","USAGE_TO_TARGET","ARRAY_BUFFER","undefined","[object Object]","accessorDef","createAccessorDef","push","EXT_meshopt_compression","otherBufferViews","concat","encodeGltfBuffer","compressedData","pad","fallbackBufferByteOffset","bufferViewIndex","otherBufferViewsIndexMap","finalBufferViewDef","compressedByteOffset","bufferIndexMap","fallbackBufferDef","WEBPImageUtils","match","getSize","RIFF","decodeText","slice","WEBP","view","DataView","offset","chunkId","getUint8","chunkByteLength","getUint32","getInt16","b0","b1","b2","getChannels","_buffer","TextureWebP","TEXTURE","ImageUtils","registerFormat","textures","textureDef","listTextures","texture","getMimeType","imageIndex","imageIndexMap","decoderModule","COMPONENT_ARRAY","DATA_TYPE","encoderModule","decodeGeometry","decoder","data","DecoderBuffer","Init","GetEncodedGeometryType","TRIANGULAR_MESH","dracoMesh","Mesh","DecodeBufferToMesh","ok","ptr","destroy","decodeIndex","mesh","numIndices","num_faces","indices","num_points","Uint16Array","_malloc","GetTrianglesUInt16Array","HEAPU16","Uint32Array","GetTrianglesUInt32Array","HEAPU32","_free","decodeAttribute","dataType","ArrayCtor","numComponents","num_components","numValues","GetAttributeDataArrayForAllPoints","HEAPF32","AttributeEnum","DEFAULT_QUANTIZATION_BITS","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","decodeSpeed","encodeSpeed","EDGEBREAKER","quantizationBits","quantizationVolume","encodeGeometry","prim","_options","Encoder","builder","MeshBuilder","attributeIDs","dracoBuffer","DracoInt8Array","attributeEnum","getAttributeEnum","attributeID","addAttribute","SetAttributeQuantization","range","Math","SetAttributeExplicitQuantization","getIndices","AddFacesToMesh","SetSpeedOptions","SetTrackEncodedProperties","SEQUENTIAL","listTargets","SetEncodingMethod","MESH_SEQUENTIAL_ENCODING","MESH_EDGEBREAKER_ENCODING","EncodeMeshToDracoBuffer","GetValue","prevNumVertices","numVertices","GetNumberOfEncodedPoints","GetNumberOfEncodedFaces","itemSize","UNSIGNED_BYTE","AddUInt8Attribute","AddInt8Attribute","UNSIGNED_SHORT","AddUInt16Attribute","AddInt16Attribute","UNSIGNED_INT","AddUInt32Attribute","AddFloatAttribute","DracoMeshCompression","_decoderModule","_encoderModule","Int16Array","Int8Array","DT_FLOAT32","DT_UINT32","DT_UINT16","DT_UINT8","DT_INT16","DT_INT8","logger","getLogger","dracoMeshes","meshDefs","meshes","meshDef","primDef","primitives","dracoDef","bufferViewDef","Decoder","debug","dracoAttribute","GetAttributeByUniqueId","attributeArray","setArray","Array","from","values","_propertyType","JSON","stringify","primitiveHashMap","included","Set","excluded","listMeshes","listPrimitives","warn","accessorIndices","includedAccessors","includedHashKeys","primToHashKey","hashKey","createHashKey","has","dstIndices","clone","dstAttribute","keys","size","ROOT","attr","listDracoPrimitives","primitiveEncodingMap","listScenes","bounds","pop","primHash","accessorDefs","encodedPrim","indicesDef","attributeDef","extensionData","dracoContext","meshIndexMap","extensionsUsed","name","extensionsRequired","indexMap","hashElements","sort","Light","color","intensity","type","Type","POINT","innerConeAngle","outerConeAngle","PI","getColor","setColor","getColorHex","ColorUtils","factorToHex","setColorHex","hex","hexToFactor","getIntensity","setIntensity","getType","setType","getRange","setRange","getInnerConeAngle","setInnerConeAngle","angle","getOuterConeAngle","setOuterConeAngle","SPOT","DIRECTIONAL","LightsPunctual","createLight","lights","lightDef","light","setName","spot","lightDefs","lightIndexMap","property","eq","R","G","B","TextureChannel","Clearcoat","MATERIAL","clearcoatFactor","clearcoatTexture","clearcoatTextureInfo","TextureInfo","graph","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatRoughnessTextureInfo","clearcoatNormalScale","clearcoatNormalTexture","clearcoatNormalTextureInfo","getClearcoatFactor","setClearcoatFactor","factor","getClearcoatTexture","getRef","getClearcoatTextureInfo","setClearcoatTexture","setRef","channels","getClearcoatRoughnessFactor","setClearcoatRoughnessFactor","getClearcoatRoughnessTexture","getClearcoatRoughnessTextureInfo","setClearcoatRoughnessTexture","getClearcoatNormalScale","setClearcoatNormalScale","scale","getClearcoatNormalTexture","getClearcoatNormalTextureInfo","setClearcoatNormalTexture","MaterialsClearcoat","createClearcoat","textureDefs","materials","materialDef","materialIndex","clearcoat","clearcoatDef","textureInfoDef","setTextureInfo","listMaterials","material","materialIndexMap","textureInfo","createTextureInfoDef","EmissiveStrength","emissiveStrength","getEmissiveStrength","setEmissiveStrength","strength","MaterialsEmissiveStrength","createEmissiveStrength","emissiveStrengthDef","IOR","ior","getIOR","setIOR","MaterialsIOR","createIOR","iorDef","A","PBRSpecularGlossiness","diffuseFactor","diffuseTexture","diffuseTextureInfo","specularFactor","glossinessFactor","specularGlossinessTexture","specularGlossinessTextureInfo","getDiffuseFactor","setDiffuseFactor","getDiffuseHex","setDiffuseHex","getDiffuseTexture","getDiffuseTextureInfo","setDiffuseTexture","getSpecularFactor","setSpecularFactor","getGlossinessFactor","setGlossinessFactor","getSpecularGlossinessTexture","getSpecularGlossinessTextureInfo","setSpecularGlossinessTexture","MaterialsPBRSpecularGlossiness","createPBRSpecularGlossiness","specGloss","specGlossDef","Sheen","sheenColorFactor","sheenColorTexture","sheenColorTextureInfo","sheenRoughnessFactor","sheenRoughnessTexture","sheenRoughnessTextureInfo","getSheenColorFactor","getSheenColorHex","setSheenColorFactor","setSheenColorHex","getSheenColorTexture","getSheenColorTextureInfo","setSheenColorTexture","getSheenRoughnessFactor","setSheenRoughnessFactor","getSheenRoughnessTexture","getSheenRoughnessTextureInfo","setSheenRoughnessTexture","MaterialsSheen","createSheen","sheen","sheenDef","Specular","specularTexture","specularTextureInfo","specularColorFactor","specularColorTexture","specularColorTextureInfo","getSpecularColorFactor","setSpecularColorFactor","getSpecularColorHex","setSpecularColorHex","getSpecularTexture","getSpecularTextureInfo","setSpecularTexture","getSpecularColorTexture","getSpecularColorTextureInfo","setSpecularColorTexture","MaterialsSpecular","createSpecular","specular","specularDef","Transmission","transmissionFactor","transmissionTexture","transmissionTextureInfo","getTransmissionFactor","setTransmissionFactor","getTransmissionTexture","getTransmissionTextureInfo","setTransmissionTexture","MaterialsTransmission","createTransmission","transmission","transmissionDef","Unlit","MaterialsUnlit","createUnlit","Mapping","variants","getMaterial","setMaterial","addVariant","variant","addRef","removeVariant","removeRef","listVariants","listRefs","MappingList","mappings","addMapping","mapping","removeMapping","listMappings","Variant","MaterialsVariants","createMappingList","createVariant","createMapping","variantDef","meshIndex","primIndex","mappingList","variantPrimDef","mappingDef","variantIndex","variantDefs","variantIndexMap","createPropertyDef","mappingDefs","Volume","thicknessFactor","thicknessTexture","thicknessTextureInfo","attenuationDistance","Infinity","attenuationColor","getThicknessFactor","setThicknessFactor","getThicknessTexture","getThicknessTextureInfo","setThicknessTexture","getAttenuationDistance","setAttenuationDistance","distance","getAttenuationColor","setAttenuationColor","getAttenuationColorHex","setAttenuationColorHex","MaterialsVolume","createVolume","volume","volumeDef","Number","isFinite","MeshQuantization","_","KTX2ImageUtils","container","readKTX","pixelWidth","pixelHeight","dfd","dataFormatDescriptor","colorModel","KTX2Model","ETC1S","samples","channelID","UASTC","getGPUByteLength","hasAlpha","uncompressedBytes","levels","level","uncompressedByteLength","floor","pow","TextureBasisu","Transform","TEXTURE_INFO","rotation","texCoord","getOffset","setOffset","getRotation","setRotation","getScale","setScale","getTexCoord","setTexCoord","TextureTransform","createTransform","textureInfos","entries","transform","transformDef","textureInfoEntries","textureInfoDefMap","PARENT_TYPES","SCENE","MESH","ANIMATION","Packet","getContext","setContext","listProperties","getProperty","setProperty","value","_assertContext","toJSONLD","@context","copyJSON","fromJSONLD","jsonld","split","object","parse","XMP","createPacket","listPackets","extensionDef","_context$jsonDoc$json","packets","root","packetDef","defLists","asset","scenes","images","animations","propertyLists","listAnimations","defs","def","packet","packetDefs","parentDef","sceneIndexMap","animationIndexMap","KHRONOS_EXTENSIONS","ALL_EXTENSIONS","NUL","KTX2_ID","KTX2SupercompressionScheme","KTX2DescriptorType","KTX2Primaries","KTX2Transfer","KTX2Flags","KTX2ChannelETC1S","KTX2ChannelUASTC","KTX2Container","vendorId","descriptorType","BASICFORMAT","versionNumber","descriptorBlockSize","UNSPECIFIED","colorPrimaries","SRGB","transferFunction","flags","ALPHA_STRAIGHT","texelBlockDimension","x","y","z","w","bytesPlane","BufferReader","littleEndian","_dataView","_littleEndian","_offset","_nextUint8","_nextUint16","getUint16","_nextUint32","_nextUint64","_skip","bytes","_scan","maxByteLength","term","encodeText","text","TextEncoder","encode","Buffer","TextDecoder","decode","toString","totalByteLength","id","headerByteLength","headerReader","vkFormat","typeSize","pixelDepth","layerCount","faceCount","levelCount","supercompressionScheme","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","levelReader","levelData","dfdReader","numSamples","bitOffset","bitLength","samplePosition","sampleLower","sampleUpper","kvdReader","keyValueByteLength","keyData","valueData","keyValue","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","globalData","DEFAULT_OPTIONS","keepWriter","sgdBuffer","ArrayBuffer","sgdHeaderBuffer","sgdHeaderView","setUint16","setUint32","imageDesc","keyValueData","KTXwriter","kvByteLength","kvPadding","fill","kvdBuffer","dfdBuffer","dfdView","setUint8","sample","sampleByteOffset","levelIndex","levelDataByteOffset","setBigUint64","BigInt","headerBuffer","headerView"],"version":3,"file":"extensions.modern.085c094d.js.map","sourceRoot":"/__parcel_source_root/"}